[{"objectID":"Contributing","href":"contributing.html#contributing","title":"Contributing","text":"Contributing\n\nWe welcome contributions to QuantumEngine! This guide will help you get started."},{"objectID":"Contributing","href":"contributing.html#development-setup","title":"Contributing > Development Setup","text":"Development Setup\n\nFork the repository on GitHub\n\nClone your fork locally:\n\nInstall development dependencies:\n\nSet up pre-commit hooks (optional but recommended):"},{"objectID":"Contributing","href":"contributing.html#running-tests","title":"Contributing > Running Tests","text":"Running Tests\n\nQuantumEngine has both unit tests and integration tests:"},{"objectID":"Contributing","href":"contributing.html#code-style","title":"Contributing > Code Style","text":"Code Style\n\nWe use several tools to maintain code quality:"},{"objectID":"Contributing","href":"contributing.html#documentation","title":"Contributing > Documentation","text":"Documentation\n\nTo work on documentation:\n\nSee docs/README for detailed documentation guidelines."},{"objectID":"Contributing","href":"contributing.html#contribution-guidelines","title":"Contributing > Contribution Guidelines","text":"Contribution Guidelines"},{"objectID":"Contributing","href":"contributing.html#code-contributions","title":"Contributing > Code Contributions","text":"Code Contributions\n\nCreate a feature branch from main:\n\nWrite tests for your changes\n\nEnsure all tests pass\n\nUpdate documentation if needed\n\nSubmit a pull request"},{"objectID":"Contributing","href":"contributing.html#pull-request-process","title":"Contributing > Pull Request Process","text":"Pull Request Process\n\nDescribe your changes clearly in the PR description\n\nReference any related issues\n\nEnsure CI passes (tests, linting, type checking)\n\nRequest review from maintainers\n\nAddress feedback promptly"},{"objectID":"Contributing","href":"contributing.html#types-of-contributions","title":"Contributing > Types of Contributions","text":"Types of Contributions"},{"objectID":"Contributing","href":"contributing.html#bug-reports","title":"Contributing > Bug Reports","text":"Bug Reports\n\nWhen reporting bugs, please include:\n\nClear description of the issue\n\nSteps to reproduce the problem\n\nExpected vs actual behavior\n\nEnvironment details (Python version, OS, backend versions)\n\nMinimal code example if possible"},{"objectID":"Contributing","href":"contributing.html#feature-requests","title":"Contributing > Feature Requests","text":"Feature Requests\n\nFor new features:\n\nDescribe the use case clearly\n\nExplain why the feature would be valuable\n\nConsider backwards compatibility\n\nPropose an API design if applicable"},{"objectID":"Contributing","href":"contributing.html#documentation-improvements","title":"Contributing > Documentation Improvements","text":"Documentation Improvements\n\nFix typos and grammatical errors\n\nAdd missing examples\n\nImprove clarity of explanations\n\nUpdate outdated information"},{"objectID":"Contributing","href":"contributing.html#backend-support","title":"Contributing > Backend Support","text":"Backend Support\n\nAdding support for new databases:\n\nStudy existing backends (ClickHouse, SurrealDB)\n\nImplement base backend interface\n\nAdd comprehensive tests\n\nDocument backend-specific features\n\nUpdate installation guide"},{"objectID":"Contributing","href":"contributing.html#development-standards","title":"Contributing > Development Standards","text":"Development Standards"},{"objectID":"Contributing","href":"contributing.html#code-quality","title":"Contributing > Code Quality","text":"Code Quality\n\nWrite clear, readable code\n\nAdd docstrings to all public functions/classes\n\nUse type hints throughout\n\nFollow Python naming conventions\n\nKeep functions focused and small"},{"objectID":"Contributing","href":"contributing.html#testing","title":"Contributing > Testing","text":"Testing\n\nWrite tests for all new functionality\n\nAim for high test coverage\n\nUse descriptive test names\n\nTest both success and failure cases\n\nInclude integration tests for database operations"},{"objectID":"Contributing","href":"contributing.html#documentation","title":"Contributing > Documentation","text":"Documentation\n\nDocument all public APIs\n\nInclude usage examples\n\nKeep documentation up-to-date\n\nUse clear, concise language"},{"objectID":"Contributing","href":"contributing.html#release-process","title":"Contributing > Release Process","text":"Release Process\n\nQuantumEngine follows semantic versioning:\n\nMajor version (1.0.0): Breaking changes\n\nMinor version (0.1.0): New features, backwards compatible\n\nPatch version (0.1.1): Bug fixes, backwards compatible"},{"objectID":"Contributing","href":"contributing.html#security","title":"Contributing > Security","text":"Security\n\nNever commit secrets or credentials\n\nUse environment variables for configuration\n\nReport security issues privately to maintainers\n\nFollow secure coding practices"},{"objectID":"Contributing","href":"contributing.html#community","title":"Contributing > Community","text":"Community\n\nBe respectful and inclusive\n\nHelp others in discussions\n\nShare knowledge and experiences\n\nFollow the code of conduct"},{"objectID":"Contributing","href":"contributing.html#getting-help","title":"Contributing > Getting Help","text":"Getting Help\n\nIf you need help with contributions:\n\nCheck existing issues and discussions\n\nAsk questions in GitHub Discussions\n\nJoin our community channels\n\nContact maintainers directly for complex issues\n\nThank you for contributing to QuantumEngine! 🚀"},{"objectID":"Changelog","href":"changelog.html#changelog","title":"Changelog","text":"Changelog\n\nAll notable changes to QuantumEngine will be documented in this file.\n\nThe format is based on Keep a Changelog, and this project adheres to Semantic Versioning.\n\n\n\n"},{"objectID":"Changelog","href":"changelog.html#unreleased","title":"Changelog > [Unreleased]","text":"[Unreleased]"},{"objectID":"Changelog","href":"changelog.html#added","title":"Changelog > Added","text":"Added\n\nNew features that have been added"},{"objectID":"Changelog","href":"changelog.html#changed","title":"Changelog > Changed","text":"Changed\n\nChanges in existing functionality"},{"objectID":"Changelog","href":"changelog.html#deprecated","title":"Changelog > Deprecated","text":"Deprecated\n\nFeatures that will be removed in upcoming releases"},{"objectID":"Changelog","href":"changelog.html#removed","title":"Changelog > Removed","text":"Removed\n\nFeatures that have been removed"},{"objectID":"Changelog","href":"changelog.html#fixed","title":"Changelog > Fixed","text":"Fixed\n\nBug fixes"},{"objectID":"Changelog","href":"changelog.html#security","title":"Changelog > Security","text":"Security\n\nSecurity improvements"},{"objectID":"Changelog","href":"changelog.html#012---2025-07-13","title":"Changelog > [0.1.2] - 2025-07-13","text":"[0.1.2] - 2025-07-13"},{"objectID":"Changelog","href":"changelog.html#fixed","title":"Changelog > Fixed","text":"Fixed\n\nUse Unicode symbols for PyPI-compatible logo display\n\nImproved README formatting for PyPI package page\n\nClean commit history without automated attribution"},{"objectID":"Changelog","href":"changelog.html#added","title":"Changelog > Added","text":"Added\n\nMongoEngine acknowledgment in documentation\n\nProfessional badge set in README\n\nImproved error handling for missing backends"},{"objectID":"Changelog","href":"changelog.html#011---2025-07-13","title":"Changelog > [0.1.1] - 2025-07-13","text":"[0.1.1] - 2025-07-13"},{"objectID":"Changelog","href":"changelog.html#fixed","title":"Changelog > Fixed","text":"Fixed\n\nGitHub Actions workflow paths for test execution\n\nImport statements to use installed package names\n\nInclude GitHub workflows in repository for automation"},{"objectID":"Changelog","href":"changelog.html#added","title":"Changelog > Added","text":"Added\n\nComplete GitHub Actions workflow for PyPI publishing\n\nComprehensive installation guide with modular options\n\nBackend registry with helpful error messages"},{"objectID":"Changelog","href":"changelog.html#010---2025-07-13","title":"Changelog > [0.1.0] - 2025-07-13","text":"[0.1.0] - 2025-07-13"},{"objectID":"Changelog","href":"changelog.html#added","title":"Changelog > Added","text":"Added\n\nInitial release of QuantumEngine\n\nMulti-backend support for SurrealDB and ClickHouse\n\nModular installation system with optional dependencies\n\nComplete type safety with py.typed file\n\nAsync/sync API support\n\nDocument-oriented modeling with field validation\n\nQuery system with Q objects and expressions\n\nRelationship management for SurrealDB\n\nSchema management tools\n\nPerformance optimizations\n\nProfessional documentation structure\n\nComprehensive test suite\n\nDocker support\n\nMIT license"},{"objectID":"Changelog","href":"changelog.html#features","title":"Changelog > Features","text":"Features\n\nCore ODM: Document classes with field validation\n\nMulti-Backend: Seamless switching between SurrealDB and ClickHouse\n\nType Safety: Full type hints and mypy compatibility\n\nField Types: 15+ field types including specialized ones\n\nQuery System: Advanced filtering, aggregation, and relations\n\nSchema Tools: Table creation, migration, and drop operations\n\nPerformance: Direct record access and bulk operations\n\nInstallation: Modular pip packages for specific backends\n\nDocumentation: Complete Sphinx documentation with examples\n\nTesting: Working test suite with real database connections"},{"objectID":"Changelog","href":"changelog.html#backend-support","title":"Changelog > Backend Support","text":"Backend Support\n\nSurrealDB: Graph relations, transactions, full-text search\n\nClickHouse: High-performance analytics, bulk operations, time-series"},{"objectID":"Home","href":"api/fields.html#fields-api","title":"Fields API","text":"Fields API\n\nThis section provides the complete API reference for all field types in QuantumEngine.\n\nTable of Contents\n\nBase Field\n\nScalar Fields\n\nDateTime Fields\n\nCollection Fields\n\nReference Fields\n\nGeometry Fields\n\nID Fields\n\nSpecialized Fields\n\nBytesField\n\nRegexField\n\nDecimalField\n\nUUIDField\n\nLiteralField\n\nEmailField\n\nURLField\n\nIPAddressField\n\nSlugField\n\nChoiceField\n\nAdditional Fields\n\nOptionField\n\nFutureField\n\nTableField\n\nRangeField\n\nClickHouse-Specific Fields\n\nComplete Fields Module"},{"objectID":"Home","href":"api/fields.html#base-field","title":"Fields API > Base Field","text":"Base Field\n\n\n\n\n\nclass quantumengine.fields.base.Field(required=False, default=None, db_field=None, define_schema=False, indexed=False, unique=False, search=False, analyzer=None, index_with=None, materialized=None, indexes=None, help_text=None)\n\nBases: Generic[T]\n\nBase class for all field types.\n\nThis class provides the foundation for all field types in the document model.\nIt includes methods for validation and conversion between Python and database\nrepresentations.\n\n\n\n\n\nrequired\n\nWhether the field is required\n\n\n\ndefault\n\nDefault value for the field\n\n\n\nname\n\nName of the field (set during document class creation)\n\n\n\ndb_field\n\nName of the field in the database\n\n\n\nowner_document\n\nThe document class that owns this field\n\n\n\ndefine_schema\n\nWhether to define this field in the schema (even for SCHEMALESS tables)\n\n\n\n__init__(required=False, default=None, db_field=None, define_schema=False, indexed=False, unique=False, search=False, analyzer=None, index_with=None, materialized=None, indexes=None, help_text=None)\n\nInitialize a new Field.\n\nParameters\n\nrequired (bool) – Whether the field is required\n\ndefault (Any) – Default value for the field\n\ndb_field (str | None) – Name of the field in the database (defaults to the field name)\n\ndefine_schema (bool) – Whether to define this field in the schema (even for SCHEMALESS tables)\n\nindexed (bool) – Whether the field should be indexed\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\nindex_with (List[str] | None) – List of other field names to include in the index\n\nmaterialized (str | None) – ClickHouse materialized column expression\n\nhelp_text (str | None) – Human-readable description of what this field represents\n\nindexes (List[Dict[str, Any]] | None) – List of index specifications for advanced indexing\n\n\n\nvalidate(value)\n\nValidate the field value.\n\nThis method checks if the value is valid for this field type.\nSubclasses should override this method to provide type-specific validation.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValueError – If the value is invalid\n\nReturn type\n\nT\n\n\n\nto_db(value, backend=None)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a representation that can be\nstored in the database. Subclasses should override this method to\nprovide type-specific conversion.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nbackend (str | None) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nfrom_db(value, backend=None)\n\nConvert database value to Python representation.\n\nThis method converts a value from the database to a Python value.\nSubclasses should override this method to provide type-specific conversion.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nbackend (str | None) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nT"},{"objectID":"Home","href":"api/fields.html#scalar-fields","title":"Fields API > Scalar Fields","text":"Scalar Fields\n\n\n\n\n\nclass quantumengine.fields.scalar.StringField(min_length=None, max_length=None, regex=None, choices=None, **kwargs)\n\nBases: Field[str]\n\nString field type.\n\nThis field type stores string values and provides validation for\nminimum length, maximum length, and regex pattern matching.\n\n\n\n\n\nmin_length\n\nMinimum length of the string\n\n\n\nmax_length\n\nMaximum length of the string\n\n\n\nregex\n\nRegular expression pattern to match\n\n\n\n__init__(min_length=None, max_length=None, regex=None, choices=None, **kwargs)\n\nInitialize a new StringField.\n\nParameters\n\nmin_length (int | None) – Minimum length of the string\n\nmax_length (int | None) – Maximum length of the string\n\nregex (str | None) – Regular expression pattern to match\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the string value.\n\nThis method checks if the value is a valid string and meets the\nconstraints for minimum length, maximum length, and regex pattern.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated string value\n\nRaises\n\nTypeError – If the value is not a string\n\nValueError – If the value does not meet the constraints\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.scalar.NumberField(min_value=None, max_value=None, **kwargs)\n\nBases: Field[int | float]\n\nBase class for numeric fields.\n\nThis field type is the base class for all numeric field types.\nIt provides validation for minimum and maximum values.\n\n\n\n\n\nmin_value\n\nMinimum allowed value\n\n\n\nmax_value\n\nMaximum allowed value\n\n\n\n__init__(min_value=None, max_value=None, **kwargs)\n\nInitialize a new NumberField.\n\nParameters\n\nmin_value (int | float | None) – Minimum allowed value\n\nmax_value (int | float | None) – Maximum allowed value\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the numeric value.\n\nThis method checks if the value is a valid number and meets the\nconstraints for minimum and maximum values.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated numeric value\n\nRaises\n\nTypeError – If the value is not a number\n\nValueError – If the value does not meet the constraints\n\nReturn type\n\nint | float\n\n\n\nclass quantumengine.fields.scalar.IntField(**kwargs)\n\nBases: NumberField\n\nInteger field type.\n\nThis field type stores integer values and provides validation\nto ensure the value is an integer.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new IntField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the integer value.\n\nThis method checks if the value is a valid integer.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated integer value\n\nRaises\n\nTypeError – If the value is not an integer\n\nReturn type\n\nint\n\n\n\nto_db(value, backend=None)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to an integer for storage in the database.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe integer value for the database\n\nReturn type\n\nint | None\n\n\n\nclass quantumengine.fields.scalar.FloatField(**kwargs)\n\nBases: NumberField\n\nFloat field type.\n\nThis field type stores floating-point values and provides validation\nto ensure the value can be converted to a float.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new FloatField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the float value.\n\nThis method checks if the value can be converted to a float.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated float value\n\nRaises\n\nTypeError – If the value cannot be converted to a float\n\nReturn type\n\nfloat\n\n\n\nclass quantumengine.fields.scalar.BooleanField(**kwargs)\n\nBases: Field[bool]\n\nBoolean field type.\n\nThis field type stores boolean values and provides validation\nto ensure the value is a boolean.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new BooleanField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the boolean value.\n\nThis method checks if the value is a valid boolean.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated boolean value\n\nRaises\n\nTypeError – If the value is not a boolean\n\nReturn type\n\nbool"},{"objectID":"Home","href":"api/fields.html#datetime-fields","title":"Fields API > DateTime Fields","text":"DateTime Fields\n\n\n\n\n\nclass quantumengine.fields.datetime.DateTimeField(**kwargs)\n\nBases: Field[datetime]\n\nDateTime field type.\n\nThis field type stores datetime values and provides validation and\nconversion between Python datetime objects and SurrealDB datetime format.\n\nSurrealDB v2.0.0+ requires datetime values to have a d prefix or be cast\nas <datetime>. This field handles the conversion automatically, so you can\nuse standard Python datetime objects in your code.\n\nExample\n\n>>> class Event(Document):\n...     created_at = DateTimeField(default=datetime.datetime.now)\n...     scheduled_for = DateTimeField()\n>>>\n>>> # Python datetime objects are automatically converted to SurrealDB format\n>>> event = Event(scheduled_for=datetime.datetime.now() + datetime.timedelta(days=7))\n>>> await event.save()\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new DateTimeField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the datetime value.\n\nThis method checks if the value is a valid datetime or can be\nconverted to a datetime from an ISO format string.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated datetime value\n\nRaises\n\nTypeError – If the value cannot be converted to a datetime\n\nReturn type\n\ndatetime\n\n\n\nclass quantumengine.fields.datetime.TimeSeriesField(**kwargs)\n\nBases: DateTimeField\n\nField for time series data.\n\nThis field type extends DateTimeField and adds support for time series data.\nIt can be used to store timestamps for time series data and supports\nadditional metadata for time series operations.\n\nExample\n\nclass SensorReading(Document):\n\ntimestamp = TimeSeriesField(index=True)\nvalue = FloatField()\n\nclass Meta:\n\ntime_series = True\ntime_field = “timestamp”\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new TimeSeriesField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the timestamp value.\n\nThis method checks if the value is a valid timestamp for time series data.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated timestamp value\n\nReturn type\n\ndatetime | None\n\n\n\nclass quantumengine.fields.datetime.DurationField(**kwargs)\n\nBases: Field\n\nDuration field type.\n\nThis field type stores durations of time and provides validation and\nconversion between Python timedelta objects and SurrealDB duration strings.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new DurationField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the duration value.\n\nThis method checks if the value is a valid timedelta or can be\nconverted to a timedelta from a string.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated timedelta value\n\nRaises\n\nTypeError – If the value cannot be converted to a timedelta\n\nReturn type\n\ntimedelta | None\n\n\n\nto_db(value)\n\nConvert Python timedelta to database representation.\n\nThis method converts a Python timedelta object to a SurrealDB Duration object\nfor storage in the database.\n\nParameters\n\nvalue (Any) – The Python timedelta to convert\n\nReturns\n\nThe SurrealDB Duration object for the database\n\nReturn type\n\nAny | None\n\n\n\nfrom_db(value)\n\nConvert database value to Python timedelta.\n\nThis method converts a SurrealDB duration string from the database to a\nPython timedelta object.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python timedelta object\n\nReturn type\n\ntimedelta | None"},{"objectID":"Home","href":"api/fields.html#collection-fields","title":"Fields API > Collection Fields","text":"Collection Fields\n\n\n\n\n\nclass quantumengine.fields.collection.ListField(field_type=None, **kwargs)\n\nBases: Field\n\nList field type.\n\nThis field type stores lists of values and provides validation and\nconversion for the items in the list. The items can be of a specific\nfield type, which is used to validate and convert each item.\n\n\n\n\n\nfield_type\n\nThe field type for items in the list\n\n\n\n__init__(field_type=None, **kwargs)\n\nInitialize a new ListField.\n\nParameters\n\nfield_type (Field | None) – The field type for items in the list\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the list value.\n\nThis method checks if the value is a valid list and validates each\nitem in the list using the field_type if provided.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated list value\n\nRaises\n\nTypeError – If the value is not a list\n\nValueError – If an item in the list fails validation\n\nReturn type\n\nList[Any] | None\n\n\n\nto_db(value, backend=None)\n\nConvert Python list to database representation.\n\nThis method converts a Python list to a database representation by\nconverting each item using the field_type if provided. For ClickHouse,\nlists are converted to JSON strings.\n\nParameters\n\nvalue (List[Any] | None) – The Python list to convert\n\nbackend (str | None) – The backend name for backend-specific serialization\n\nReturns\n\nThe database representation of the list\n\nReturn type\n\nAny\n\n\n\nfrom_db(value)\n\nConvert database list to Python representation.\n\nThis method converts a database list to a Python representation by\nconverting each item using the field_type if provided.\n\nParameters\n\nvalue (List[Any] | None) – The database list to convert\n\nReturns\n\nThe Python representation of the list\n\nReturn type\n\nList[Any] | None\n\n\n\nclass quantumengine.fields.collection.DictField(field_type=None, **kwargs)\n\nBases: Field\n\nDict field type.\n\nThis field type stores dictionaries of values and provides validation and\nconversion for the values in the dictionary. The values can be of a specific\nfield type, which is used to validate and convert each value.\n\n\n\n\n\nfield_type\n\nThe field type for values in the dictionary\n\n\n\n__init__(field_type=None, **kwargs)\n\nInitialize a new DictField.\n\nParameters\n\nfield_type (Field | None) – The field type for values in the dictionary\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the dictionary value.\n\nThis method checks if the value is a valid dictionary and validates each\nvalue in the dictionary using the field_type if provided.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated dictionary value\n\nRaises\n\nTypeError – If the value is not a dictionary\n\nValueError – If a value in the dictionary fails validation\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nto_db(value, backend=None)\n\nConvert Python dictionary to database representation.\n\nThis method converts a Python dictionary to a database representation by\nconverting each value using the field_type if provided. For ClickHouse,\ndictionaries are converted to JSON strings.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The Python dictionary to convert\n\nbackend (str | None) – The backend name for backend-specific serialization\n\nReturns\n\nThe database representation of the dictionary\n\nReturn type\n\nAny\n\n\n\nfrom_db(value)\n\nConvert database dictionary to Python representation.\n\nThis method converts a database dictionary to a Python representation by\nconverting each value using the field_type if provided.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The database dictionary to convert\n\nReturns\n\nThe Python representation of the dictionary\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nclass quantumengine.fields.collection.SetField(field_type=None, **kwargs)\n\nBases: ListField\n\nSet field type.\n\nThis field type stores sets of unique values and provides validation and\nconversion for the items in the set. Values are automatically deduplicated.\n\nExample\n\nclass User(Document):\n\ntags = SetField(StringField())\n\n\n\n\n\nvalidate(value)\n\nValidate the list value and ensure uniqueness.\n\nThis method checks if the value is a valid list and validates each\nitem in the list using the field_type if provided. It also ensures\nthat all items in the list are unique.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated and deduplicated list value\n\nReturn type\n\nList[Any] | None\n\n\n\nto_db(value, backend=None)\n\nConvert Python list to database representation with deduplication.\n\n"},{"objectID":"Home","href":"api/fields.html#reference-fields","title":"Fields API > Reference Fields","text":"Reference Fields\n\n\n\n\n\nclass quantumengine.fields.reference.ReferenceField(document_type, **kwargs)\n\nBases: Field\n\nReference to another document.\n\nThis field type stores references to other documents in the database.\nIt can accept a document instance, an ID string, or a dictionary with an ID.\n\n\n\n\n\ndocument_type\n\nThe type of document being referenced\n\n\n\n__init__(document_type, **kwargs)\n\nInitialize a new ReferenceField.\n\nParameters\n\ndocument_type (Type) – The type of document being referenced\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the reference value.\n\nThis method checks if the value is a valid reference to another document.\nIt accepts a document instance, an ID string, a dictionary with an ID, or a RecordID object.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated reference value\n\nRaises\n\nTypeError – If the value is not a valid reference\n\nValueError – If the referenced document is not saved\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python reference to database representation.\n\nThis method converts a Python reference (document instance, ID string,\ndictionary with an ID, or RecordID object) to a database representation.\n\nParameters\n\nvalue (Any) – The Python reference to convert\n\nReturns\n\nThe database representation of the reference\n\nRaises\n\nValueError – If the referenced document is not saved\n\nReturn type\n\nstr | None\n\n\n\nfrom_db(value, dereference=False)\n\nConvert database reference to Python representation.\n\nThis method converts a database reference to a Python representation.\nIf the value is already a resolved document (from FETCH), return it as is.\nIf dereference is False, it returns the string reference as is.\nIf dereference is True but value is still a string, fetch the referenced document.\n\nParameters\n\nvalue (Any) – The database reference to convert\n\ndereference (bool) – Whether to dereference the reference (default: False)\n\nReturns\n\nThe Python representation of the reference\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.fields.reference.RelationField(to_document, **kwargs)\n\nBases: Field\n\nField representing a relation between documents.\n\nThis field type stores relations between documents in the database.\nIt can accept a document instance, an ID string, or a dictionary with an ID.\n\n\n\n\n\nto_document\n\nThe type of document being related to\n\n\n\n__init__(to_document, **kwargs)\n\nInitialize a new RelationField.\n\nParameters\n\nto_document (Type) – The type of document being related to\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the relation value.\n\nThis method checks if the value is a valid relation to another document.\nIt accepts a document instance, an ID string, or a dictionary with an ID.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated relation value\n\nRaises\n\nTypeError – If the value is not a valid relation\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python relation to database representation.\n\nThis method converts a Python relation (document instance, ID string,\nor dictionary with an ID) to a database representation.\n\nParameters\n\nvalue (Any) – The Python relation to convert\n\nReturns\n\nThe database representation of the relation\n\nRaises\n\nValueError – If the related document is not saved\n\nReturn type\n\nstr | None\n\n\n\nfrom_db(value, dereference=False)\n\nConvert database relation to Python representation.\n\nThis method converts a database relation to a Python representation.\nIf the value is already a resolved document (from FETCH), return it as is.\nIf dereference is False, it returns the string reference as is.\nIf dereference is True but value is still a string, fetch the related document.\n\nParameters\n\nvalue (Any) – The database relation to convert\n\ndereference (bool) – Whether to dereference the relation (default: False)\n\nReturns\n\nThe Python representation of the relation\n\nReturn type\n\nAny\n\n\n\nasync get_related_documents(instance)\n\nGet documents related through this relation field.\n\nThis method retrieves documents related to the given instance through\nthis relation field. It uses the RelationQuerySet to get related documents.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\nReturns\n\nList of related documents\n\nRaises\n\nValueError – If the instance is not saved\n\nReturn type\n\nList[Any]\n\n\n\nget_related_documents_sync(instance)\n\nGet documents related through this relation field synchronously.\n\nThis method retrieves documents related to the given instance through\nthis relation field. It uses the RelationQuerySet to get related documents.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\nReturns\n\nList of related documents\n\nRaises\n\nValueError – If the instance is not saved\n\nReturn type\n\nList[Any]"},{"objectID":"Home","href":"api/fields.html#geometry-fields","title":"Fields API > Geometry Fields","text":"Geometry Fields\n\n\n\n\n\nclass quantumengine.fields.geometry.GeometryField(required=False, **kwargs)\n\nBases: Field\n\nField for handling geometric data in SurrealDB.\n\nThis field validates and processes geometric data according to SurrealDB’s\ngeometry specification. It supports various geometry types including Point,\nLineString, Polygon, MultiPoint, MultiLineString, and MultiPolygon.\n\n\n\n\n\nrequired\n\nWhether the field is required. Defaults to False.\n\nType\n\nbool\n\nExample\n\n>>> class Location(Document):\n...     point = GeometryField()\n>>>\n>>> # Using GeometryPoint for precise coordinate handling\n>>> from quantumengine.geometry import GeometryPoint\n>>> loc = Location(point=GeometryPoint([-122.4194, 37.7749]))\n\n\n\n__init__(required=False, **kwargs)\n\nInitialize a GeometryField.\n\nParameters\n\nrequired (bool, optional) – Whether this field is required. Defaults to False.\n\n**kwargs – Additional field options to be passed to the parent Field class.\n\n\n\nvalidate(value)\n\nValidate geometry data.\n\nEnsures the geometry data follows SurrealDB’s expected format with proper structure\nand coordinates. Does not modify the numeric values to preserve SurrealDB’s\nnative geometry handling.\n\nParameters\n\nvalue – The geometry value to validate. Can be a GeometryPoint object or\na dict with ‘type’ and ‘coordinates’ fields.\n\nReturns\n\nThe validated geometry data.\n\nReturn type\n\ndict\n\nRaises\n\nValidationError – If the geometry data is invalid or improperly formatted."},{"objectID":"Home","href":"api/fields.html#id-fields","title":"Fields API > ID Fields","text":"ID Fields\n\n\n\n\n\nclass quantumengine.fields.id.RecordIDField(**kwargs)\n\nBases: Field\n\nRecordID field type.\n\nThis field type stores record IDs and provides validation and\nconversion between Python values and SurrealDB record ID format.\n\nA RecordID consists of a table name and a unique identifier, formatted as\ntable:id. This field can accept a string in this format, or a tuple/list\nwith the table name and ID.\n\nExample\n\n>>> class Reference(Document):\n...     target = RecordIDField()\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new RecordIDField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the record ID.\n\nThis method checks if the value is a valid record ID.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated record ID\n\nRaises\n\nTypeError – If the value cannot be converted to a record ID\n\nValueError – If the record ID format is invalid\n\nReturn type\n\nstr | None\n\n\n\nto_db(value)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a record ID for storage in the database.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe record ID for the database\n\nReturn type\n\nstr | None\n\n\n\nfrom_db(value)\n\nConvert database value to Python representation.\n\nThis method converts a record ID from the database to a Python representation.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python representation of the record ID\n\nReturn type\n\nstr | None"},{"objectID":"Home","href":"api/fields.html#specialized-fields","title":"Fields API > Specialized Fields","text":"Specialized Fields"},{"objectID":"Home","href":"api/fields.html#bytesfield","title":"Fields API > BytesField","text":"BytesField\n\n\n\nclass quantumengine.fields.BytesField(**kwargs)\n\nBases: Field\n\nBytes field type.\n\nThis field type stores binary data as byte arrays and provides validation and\nconversion between Python bytes objects and SurrealDB bytes format.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new BytesField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the bytes value.\n\nThis method checks if the value is a valid bytes object or can be\nconverted to bytes.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated bytes value\n\nRaises\n\nTypeError – If the value cannot be converted to bytes\n\nReturn type\n\nbytes | None\n\n\n\nto_db(value)\n\nConvert Python bytes to database representation.\n\nThis method converts a Python bytes object to a SurrealDB bytes format\nfor storage in the database.\n\nParameters\n\nvalue (Any) – The Python bytes to convert\n\nReturns\n\nThe SurrealDB bytes format for the database\n\nReturn type\n\nstr | None\n\n\n\nfrom_db(value)\n\nConvert database value to Python bytes.\n\nThis method converts a SurrealDB bytes format from the database to a\nPython bytes object.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python bytes object\n\nReturn type\n\nbytes | None"},{"objectID":"Home","href":"api/fields.html#regexfield","title":"Fields API > RegexField","text":"RegexField\n\n\n\nclass quantumengine.fields.RegexField(**kwargs)\n\nBases: Field\n\nRegular expression field type.\n\nThis field type stores regular expressions and provides validation and\nconversion between Python regex objects and SurrealDB regex format.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new RegexField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the regex value.\n\nThis method checks if the value is a valid regex pattern or can be\ncompiled into a regex pattern.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated regex pattern\n\nRaises\n\nTypeError – If the value cannot be converted to a regex pattern\n\nValueError – If the regex pattern is invalid\n\nReturn type\n\nPattern | None\n\n\n\nto_db(value)\n\nConvert Python regex to database representation.\n\nThis method converts a Python regex pattern to a SurrealDB regex format\nfor storage in the database.\n\nParameters\n\nvalue (Any) – The Python regex pattern to convert\n\nReturns\n\nThe SurrealDB regex format for the database\n\nReturn type\n\nstr | None\n\n\n\nfrom_db(value)\n\nConvert database value to Python regex.\n\nThis method converts a SurrealDB regex format from the database to a\nPython regex pattern.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python regex pattern\n\nReturn type\n\nPattern | None"},{"objectID":"Home","href":"api/fields.html#decimalfield","title":"Fields API > DecimalField","text":"DecimalField\n\n\n\nclass quantumengine.fields.DecimalField(**kwargs)\n\nBases: NumberField\n\nDecimal field type.\n\nThis field type stores decimal values with arbitrary precision using Python’s\nDecimal class. It provides validation to ensure the value is a valid decimal.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new DecimalField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the decimal value.\n\nThis method checks if the value is a valid decimal or can be\nconverted to a decimal.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated decimal value\n\nRaises\n\nTypeError – If the value cannot be converted to a decimal\n\nReturn type\n\nDecimal | None"},{"objectID":"Home","href":"api/fields.html#uuidfield","title":"Fields API > UUIDField","text":"UUIDField\n\n\n\nclass quantumengine.fields.UUIDField(**kwargs)\n\nBases: Field\n\nUUID field type.\n\nThis field type stores UUID values and provides validation and\nconversion between Python UUID objects and SurrealDB string format.\n\nExample\n\n>>> class User(Document):\n...     id = UUIDField(default=uuid.uuid4)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new UUIDField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the UUID value.\n\nThis method checks if the value is a valid UUID or can be\nconverted to a UUID.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated UUID value\n\nRaises\n\nTypeError – If the value cannot be converted to a UUID\n\nValueError – If the UUID format is invalid\n\nReturn type\n\nUUID | None\n\n\n\nto_db(value)\n\nConvert Python UUID to database representation.\n\nThis method converts a Python UUID object to a string for storage in the database.\n\nParameters\n\nvalue (Any) – The Python UUID to convert\n\nReturns\n\nThe string representation for the database\n\nReturn type\n\nstr | None\n\n\n\nfrom_db(value)\n\nConvert database value to Python UUID.\n\nThis method converts a value from the database to a Python UUID object.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python UUID object\n\nReturn type\n\nUUID | None"},{"objectID":"Home","href":"api/fields.html#literalfield","title":"Fields API > LiteralField","text":"LiteralField\n\n\n\nclass quantumengine.fields.LiteralField(allowed_values, **kwargs)\n\nBases: Field\n\nField for union/enum-like values.\n\nAllows a field to accept multiple different types or specific values,\nsimilar to a union or enum type in other languages.\n\nExample\n\nclass Product(Document):\n\nstatus = LiteralField([“active”, “discontinued”, “out_of_stock”])\nid_or_name = LiteralField([IntField(), StringField()])\n\n\n\n\n\n__init__(allowed_values, **kwargs)\n\nInitialize a new LiteralField.\n\nParameters\n\nallowed_values (List[Any]) – List of allowed values or field types\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate that the value is one of the allowed values or types.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValidationError – If the value is not one of the allowed values or types\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a database representation by\nusing the appropriate field type if the value is not a literal.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nfrom_db(value)\n\nConvert database value to Python representation.\n\nThis method converts a database value to a Python representation by\nusing the appropriate field type if the value is not a literal.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nAny"},{"objectID":"Home","href":"api/fields.html#emailfield","title":"Fields API > EmailField","text":"EmailField\n\n\n\nclass quantumengine.fields.EmailField(**kwargs)\n\nBases: StringField\n\nEmail field type.\n\nThis field type stores email addresses and provides validation to ensure\nthe value is a valid email address.\n\nExample\n\n>>> class User(Document):\n...     email = EmailField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new EmailField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the email address.\n\nThis method checks if the value is a valid email address.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated email address\n\nRaises\n\nValueError – If the email address is invalid\n\nReturn type\n\nstr | None"},{"objectID":"Home","href":"api/fields.html#urlfield","title":"Fields API > URLField","text":"URLField\n\n\n\nclass quantumengine.fields.URLField(**kwargs)\n\nBases: StringField\n\nURL field type.\n\nThis field type stores URLs and provides validation to ensure\nthe value is a valid URL.\n\nExample\n\n>>> class Website(Document):\n...     url = URLField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new URLField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the URL.\n\nThis method checks if the value is a valid URL.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated URL\n\nRaises\n\nValueError – If the URL is invalid\n\nReturn type\n\nstr | None"},{"objectID":"Home","href":"api/fields.html#ipaddressfield","title":"Fields API > IPAddressField","text":"IPAddressField\n\n\n\nclass quantumengine.fields.IPAddressField(ipv4_only=False, ipv6_only=False, version=None, **kwargs)\n\nBases: StringField\n\nIP address field type.\n\nThis field type stores IP addresses and provides validation to ensure\nthe value is a valid IPv4 or IPv6 address.\n\nExample\n\n>>> class Server(Document):\n...     ip_address = IPAddressField(required=True)\n...     ip_v4 = IPAddressField(ipv4_only=True)\n...     ip_v6 = IPAddressField(ipv6_only=True)\n\n\n\n\n\n__init__(ipv4_only=False, ipv6_only=False, version=None, **kwargs)\n\nInitialize a new IPAddressField.\n\nParameters\n\nipv4_only (bool) – Whether to only allow IPv4 addresses\n\nipv6_only (bool) – Whether to only allow IPv6 addresses\n\nversion (str) – IP version to validate (‘ipv4’, ‘ipv6’, or ‘both’)\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the IP address.\n\nThis method checks if the value is a valid IP address.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated IP address\n\nRaises\n\nValueError – If the IP address is invalid\n\nReturn type\n\nstr | None"},{"objectID":"Home","href":"api/fields.html#slugfield","title":"Fields API > SlugField","text":"SlugField\n\n\n\nclass quantumengine.fields.SlugField(**kwargs)\n\nBases: StringField\n\nSlug field type.\n\nThis field type stores slugs (URL-friendly strings) and provides validation\nto ensure the value is a valid slug.\n\nExample\n\n>>> class Article(Document):\n...     slug = SlugField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new SlugField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the slug.\n\nThis method checks if the value is a valid slug.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated slug\n\nRaises\n\nValueError – If the slug is invalid\n\nReturn type\n\nstr | None"},{"objectID":"Home","href":"api/fields.html#choicefield","title":"Fields API > ChoiceField","text":"ChoiceField\n\n\n\nclass quantumengine.fields.ChoiceField(choices, **kwargs)\n\nBases: Field\n\nChoice field type.\n\nThis field type stores values from a predefined set of choices and provides\nvalidation to ensure the value is one of the allowed choices.\n\nExample\n\n>>> class Product(Document):\n...     status = ChoiceField(choices=['active', 'inactive', 'discontinued'])\n\n\n\n\n\n__init__(choices, **kwargs)\n\nInitialize a new ChoiceField.\n\nParameters\n\nchoices (List[str | tuple]) – List of allowed choices. Each choice can be a string or a tuple\nof (value, display_name).\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the choice value.\n\nThis method checks if the value is one of the allowed choices.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated choice value\n\nRaises\n\nValueError – If the value is not one of the allowed choices\n\nReturn type\n\nstr | None"},{"objectID":"Home","href":"api/fields.html#additional-fields","title":"Fields API > Additional Fields","text":"Additional Fields"},{"objectID":"Home","href":"api/fields.html#optionfield","title":"Fields API > OptionField","text":"OptionField\n\n\n\nclass quantumengine.fields.OptionField(field_type, **kwargs)\n\nBases: Field\n\nOption field type.\n\nThis field type makes a field optional and guarantees it to be either\nNone or a value of the specified type.\n\n\n\n\n\nfield_type\n\nThe field type for the value when not None\n\n\n\n__init__(field_type, **kwargs)\n\nInitialize a new OptionField.\n\nParameters\n\nfield_type (Field) – The field type for the value when not None\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the option value.\n\nThis method checks if the value is None or a valid value for the field_type.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValueError – If the value is not None and fails validation for field_type\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a database representation using\nthe field_type’s to_db method if the value is not None.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nfrom_db(value)\n\nConvert database value to Python representation.\n\nThis method converts a database value to a Python representation using\nthe field_type’s from_db method if the value is not None.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nAny"},{"objectID":"Home","href":"api/fields.html#futurefield","title":"Fields API > FutureField","text":"FutureField\n\n\n\nclass quantumengine.fields.FutureField(computation_expression, **kwargs)\n\nBases: Field\n\nField for future (computed) values.\n\nThis field type represents a computed value in SurrealDB that is calculated\nat query time rather than stored in the database. It uses SurrealDB’s\n<future> syntax to define a computation expression.\n\n\n\n\n\ncomputation_expression\n\nThe SurrealDB expression to compute the value\n\n\n\n__init__(computation_expression, **kwargs)\n\nInitialize a new FutureField.\n\nParameters\n\ncomputation_expression (str) – The SurrealDB expression to compute the value\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nto_db(value)\n\nConvert to SurrealDB future syntax.\n\nThis method returns the SurrealDB <future> syntax with the computation\nexpression, regardless of the input value.\n\nParameters\n\nvalue (Any) – The input value (ignored)\n\nReturns\n\nThe SurrealDB future syntax string\n\nReturn type\n\nstr"},{"objectID":"Home","href":"api/fields.html#tablefield","title":"Fields API > TableField","text":"TableField\n\n\n\nclass quantumengine.fields.TableField(**kwargs)\n\nBases: Field\n\nTable field type.\n\nThis field type stores table names and provides validation and\nconversion between Python strings and SurrealDB table format.\n\nExample\n\n```python\nclass Schema(Document):\n\ntable_name = TableField()\nfields = DictField()\n\n```\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new TableField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the table name.\n\nThis method checks if the value is a valid table name.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated table name\n\nRaises\n\nTypeError – If the value is not a string\n\nValueError – If the table name is invalid\n\nReturn type\n\nstr | None\n\n\n\nto_db(value)\n\nConvert Python string to database representation.\n\nThis method converts a Python string to a table name for storage in the database.\n\nParameters\n\nvalue (Any) – The Python string to convert\n\nReturns\n\nThe table name for the database\n\nReturn type\n\nstr | None"},{"objectID":"Home","href":"api/fields.html#rangefield","title":"Fields API > RangeField","text":"RangeField\n\n\n\nclass quantumengine.fields.RangeField(min_type, max_type=None, **kwargs)\n\nBases: Field\n\nField for storing ranges of values.\n\nThis field type stores ranges of values with minimum and maximum bounds.\nIt supports various types for the bounds, such as numbers, strings, and dates.\n\nExample\n\nclass PriceRange(Document):\n\nprice_range = RangeField(min_type=FloatField(), max_type=FloatField())\nage_range = RangeField(min_type=IntField(), max_type=IntField())\n\n\n\n\n\n__init__(min_type, max_type=None, **kwargs)\n\nInitialize a new RangeField.\n\nParameters\n\nmin_type (Field) – The field type for the minimum value\n\nmax_type (Field) – The field type for the maximum value (defaults to same as min_type)\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the range value.\n\nThis method checks if the value is a valid range with minimum and maximum\nvalues that can be validated by the respective field types.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated range value\n\nRaises\n\nValidationError – If the value is not a valid range\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nto_db(value)\n\nConvert Python range to database representation.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The Python range to convert\n\nReturns\n\nThe database representation of the range\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nfrom_db(value)\n\nConvert database range to Python representation.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The database range to convert\n\nReturns\n\nThe Python representation of the range\n\nReturn type\n\nDict[str, Any] | None"},{"objectID":"Home","href":"api/fields.html#clickhouse-specific-fields","title":"Fields API > ClickHouse-Specific Fields","text":"ClickHouse-Specific Fields\n\n\n\nClickHouse-specific field types for QuantumORM.\n\nThis module contains field types that are optimized for or specific to ClickHouse backend.\n\n\n\nclass quantumengine.fields.clickhouse.LowCardinalityField(base_type='String', **kwargs)\n\nBases: StringField\n\nClickHouse LowCardinality field for enum-like string values.\n\nLowCardinality is a ClickHouse optimization for string columns with a small\nnumber of distinct values (typically < 10,000). It uses dictionary encoding\nto reduce memory usage and improve query performance.\n\nThis field automatically maps to LowCardinality(String) in ClickHouse and\nfalls back to regular String type in other backends.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     seller_name = LowCardinalityField(required=True)\n...     marketplace = LowCardinalityField(choices=['Amazon', 'eBay', 'Walmart'])\n...\n...     class Meta:\n...         backend = 'clickhouse'\n\n\n\n\n\n__init__(base_type='String', **kwargs)\n\nInitialize a new LowCardinalityField.\n\nParameters\n\nbase_type (str) – The base ClickHouse type to wrap with LowCardinality (default: ‘String’)\n\n**kwargs (Any) – Additional arguments passed to StringField\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type.\n\nReturns\n\nThe ClickHouse field type definition\n\nReturn type\n\nstr\n\n\n\nget_surrealdb_type()\n\nGet the SurrealDB fallback field type.\n\nReturns\n\nThe SurrealDB field type definition\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.clickhouse.FixedStringField(length, **kwargs)\n\nBases: StringField\n\nClickHouse FixedString field for fixed-length strings.\n\nFixedString is a ClickHouse type for strings of exactly N bytes.\nIt’s more memory-efficient than String for fixed-length data like\ncountry codes, currency codes, etc.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     currency_code = FixedStringField(length=3)  # USD, EUR, etc.\n...     country_code = FixedStringField(length=2)   # US, CA, etc.\n\n\n\n\n\n__init__(length, **kwargs)\n\nInitialize a new FixedStringField.\n\nParameters\n\nlength (int) – The exact length in bytes for the string\n\n**kwargs (Any) – Additional arguments passed to StringField\n\n\n\nvalidate(value)\n\nValidate the fixed string value.\n\nEnsures the string is exactly the specified length.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated string value\n\nRaises\n\nValueError – If the string length doesn’t match exactly\n\nReturn type\n\nstr\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type.\n\nReturns\n\nThe ClickHouse field type definition\n\nReturn type\n\nstr\n\n\n\nget_surrealdb_type()\n\nGet the SurrealDB fallback field type.\n\nReturns\n\nThe SurrealDB field type definition\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.clickhouse.EnumField(values, **kwargs)\n\nBases: Field[str]\n\nClickHouse Enum field for predefined string values.\n\nEnum fields in ClickHouse are stored as integers internally but presented\nas strings. They’re more efficient than LowCardinality for small sets of\nvalues that rarely change.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     status = EnumField(values={\n...         'active': 1,\n...         'inactive': 2,\n...         'discontinued': 3\n...     })\n\n\n\n\n\n__init__(values, **kwargs)\n\nInitialize a new EnumField.\n\nParameters\n\nvalues (Dict[str, int]) – Dictionary mapping string values to integer codes\n\n**kwargs (Any) – Additional arguments passed to Field\n\n\n\nvalidate(value)\n\nValidate the enum value.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated enum value\n\nRaises\n\nValueError – If the value is not in the enum\n\nReturn type\n\nstr\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type.\n\nReturns\n\nThe ClickHouse field type definition\n\nReturn type\n\nstr\n\n\n\nget_surrealdb_type()\n\nGet the SurrealDB fallback field type.\n\nReturns\n\nThe SurrealDB field type definition\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.clickhouse.CompressionMixin(codec=None, **kwargs)\n\nBases: object\n\nMixin class to add compression codec support to fields.\n\nThis mixin can be used with string fields to add ClickHouse\ncompression codec support.\n\n\n\n\n\n__init__(codec=None, **kwargs)\n\nInitialize compression settings.\n\nParameters\n\ncodec (str | None) – ClickHouse compression codec (e.g., ‘ZSTD(3)’, ‘LZ4’, ‘NONE’)\n\n**kwargs (Any) – Additional arguments passed to parent class\n\n\n\nget_compression_suffix()\n\nGet the compression codec suffix for ClickHouse.\n\nReturns\n\nThe codec suffix to append to field type\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.clickhouse.CompressedStringField(codec=None, **kwargs)\n\nBases: CompressionMixin, StringField\n\nString field with ClickHouse compression codec support.\n\nUseful for large text fields like URLs, descriptions, etc.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     ad_page_url = CompressedStringField(codec=\"ZSTD(3)\")\n...     product_description = CompressedStringField(codec=\"LZ4\")\n\n\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type with compression.\n\nReturns\n\nThe ClickHouse field type definition with codec\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.clickhouse.CompressedLowCardinalityField(codec=None, **kwargs)\n\nBases: CompressionMixin, LowCardinalityField\n\nLowCardinality field with ClickHouse compression codec support.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     category = CompressedLowCardinalityField(codec=\"LZ4\")\n\n\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type with compression.\n\nReturns\n\nThe ClickHouse field type definition with codec\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.clickhouse.ArrayField(element_field, codec=None, **kwargs)\n\nBases: Field\n\nClickHouse Array field with support for nested types and optimizations.\n\nClickHouse arrays can contain any type including LowCardinality, Nullable,\nand other complex types. This field provides full ClickHouse array support\nwith automatic type detection and optimization.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     # Array of low cardinality strings (efficient for repeated values)\n...     tags = ArrayField(LowCardinalityField())\n...\n...     # Array of integers\n...     ratings = ArrayField(IntField())\n...\n...     # Array of strings with compression\n...     urls = ArrayField(StringField(), codec=\"LZ4\")\n\n\n\n\n\n__init__(element_field, codec=None, **kwargs)\n\nInitialize a new ArrayField.\n\nParameters\n\nelement_field (Field) – The field type for array elements\n\ncodec (str | None) – Optional ClickHouse compression codec for the array\n\n**kwargs (Any) – Additional arguments passed to Field\n\n\n\nvalidate(value)\n\nValidate the array value and all elements.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated array value\n\nRaises\n\nTypeError – If the value is not a list\n\nValueError – If an element fails validation\n\nReturn type\n\nList[Any] | None\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type.\n\nReturns\n\nThe ClickHouse field type definition\n\nReturn type\n\nstr\n\n\n\nget_surrealdb_type()\n\nGet the SurrealDB fallback field type.\n\nReturns\n\nThe SurrealDB field type definition\n\nReturn type\n\nstr"},{"objectID":"Home","href":"api/fields.html#complete-fields-module","title":"Fields API > Complete Fields Module","text":"Complete Fields Module\n\nFor convenience, here’s the complete fields module with all exports:\n\n\n\n\n\n\n\nclass quantumengine.fields.Field(required=False, default=None, db_field=None, define_schema=False, indexed=False, unique=False, search=False, analyzer=None, index_with=None, materialized=None, indexes=None, help_text=None)\n\nBase class for all field types.\n\nThis class provides the foundation for all field types in the document model.\nIt includes methods for validation and conversion between Python and database\nrepresentations.\n\n\n\n\n\nrequired\n\nWhether the field is required\n\n\n\ndefault\n\nDefault value for the field\n\n\n\nname\n\nName of the field (set during document class creation)\n\n\n\ndb_field\n\nName of the field in the database\n\n\n\nowner_document\n\nThe document class that owns this field\n\n\n\ndefine_schema\n\nWhether to define this field in the schema (even for SCHEMALESS tables)\n\n\n\n__init__(required=False, default=None, db_field=None, define_schema=False, indexed=False, unique=False, search=False, analyzer=None, index_with=None, materialized=None, indexes=None, help_text=None)\n\nInitialize a new Field.\n\nParameters\n\nrequired (bool) – Whether the field is required\n\ndefault (Any) – Default value for the field\n\ndb_field (str | None) – Name of the field in the database (defaults to the field name)\n\ndefine_schema (bool) – Whether to define this field in the schema (even for SCHEMALESS tables)\n\nindexed (bool) – Whether the field should be indexed\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\nindex_with (List[str] | None) – List of other field names to include in the index\n\nmaterialized (str | None) – ClickHouse materialized column expression\n\nhelp_text (str | None) – Human-readable description of what this field represents\n\nindexes (List[Dict[str, Any]] | None) – List of index specifications for advanced indexing\n\n\n\nfrom_db(value, backend=None)\n\nConvert database value to Python representation.\n\nThis method converts a value from the database to a Python value.\nSubclasses should override this method to provide type-specific conversion.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nbackend (str | None) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nT\n\n\n\nto_db(value, backend=None)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a representation that can be\nstored in the database. Subclasses should override this method to\nprovide type-specific conversion.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nbackend (str | None) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate the field value.\n\nThis method checks if the value is valid for this field type.\nSubclasses should override this method to provide type-specific validation.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValueError – If the value is invalid\n\nReturn type\n\nT\n\n\n\nclass quantumengine.fields.StringField(min_length=None, max_length=None, regex=None, choices=None, **kwargs)\n\nString field type.\n\nThis field type stores string values and provides validation for\nminimum length, maximum length, and regex pattern matching.\n\n\n\n\n\nmin_length\n\nMinimum length of the string\n\n\n\nmax_length\n\nMaximum length of the string\n\n\n\nregex\n\nRegular expression pattern to match\n\n\n\n__init__(min_length=None, max_length=None, regex=None, choices=None, **kwargs)\n\nInitialize a new StringField.\n\nParameters\n\nmin_length (int | None) – Minimum length of the string\n\nmax_length (int | None) – Maximum length of the string\n\nregex (str | None) – Regular expression pattern to match\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the string value.\n\nThis method checks if the value is a valid string and meets the\nconstraints for minimum length, maximum length, and regex pattern.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated string value\n\nRaises\n\nTypeError – If the value is not a string\n\nValueError – If the value does not meet the constraints\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.NumberField(min_value=None, max_value=None, **kwargs)\n\nBase class for numeric fields.\n\nThis field type is the base class for all numeric field types.\nIt provides validation for minimum and maximum values.\n\n\n\n\n\nmin_value\n\nMinimum allowed value\n\n\n\nmax_value\n\nMaximum allowed value\n\n\n\n__init__(min_value=None, max_value=None, **kwargs)\n\nInitialize a new NumberField.\n\nParameters\n\nmin_value (int | float | None) – Minimum allowed value\n\nmax_value (int | float | None) – Maximum allowed value\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the numeric value.\n\nThis method checks if the value is a valid number and meets the\nconstraints for minimum and maximum values.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated numeric value\n\nRaises\n\nTypeError – If the value is not a number\n\nValueError – If the value does not meet the constraints\n\nReturn type\n\nint | float\n\n\n\nclass quantumengine.fields.IntField(**kwargs)\n\nInteger field type.\n\nThis field type stores integer values and provides validation\nto ensure the value is an integer.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new IntField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nto_db(value, backend=None)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to an integer for storage in the database.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe integer value for the database\n\nReturn type\n\nint | None\n\n\n\nvalidate(value)\n\nValidate the integer value.\n\nThis method checks if the value is a valid integer.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated integer value\n\nRaises\n\nTypeError – If the value is not an integer\n\nReturn type\n\nint\n\n\n\nclass quantumengine.fields.FloatField(**kwargs)\n\nFloat field type.\n\nThis field type stores floating-point values and provides validation\nto ensure the value can be converted to a float.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new FloatField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the float value.\n\nThis method checks if the value can be converted to a float.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated float value\n\nRaises\n\nTypeError – If the value cannot be converted to a float\n\nReturn type\n\nfloat\n\n\n\nclass quantumengine.fields.BooleanField(**kwargs)\n\nBoolean field type.\n\nThis field type stores boolean values and provides validation\nto ensure the value is a boolean.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new BooleanField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the boolean value.\n\nThis method checks if the value is a valid boolean.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated boolean value\n\nRaises\n\nTypeError – If the value is not a boolean\n\nReturn type\n\nbool\n\n\n\nclass quantumengine.fields.DateTimeField(**kwargs)\n\nDateTime field type.\n\nThis field type stores datetime values and provides validation and\nconversion between Python datetime objects and SurrealDB datetime format.\n\nSurrealDB v2.0.0+ requires datetime values to have a d prefix or be cast\nas <datetime>. This field handles the conversion automatically, so you can\nuse standard Python datetime objects in your code.\n\nExample\n\n>>> class Event(Document):\n...     created_at = DateTimeField(default=datetime.datetime.now)\n...     scheduled_for = DateTimeField()\n>>>\n>>> # Python datetime objects are automatically converted to SurrealDB format\n>>> event = Event(scheduled_for=datetime.datetime.now() + datetime.timedelta(days=7))\n>>> await event.save()\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new DateTimeField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the datetime value.\n\nThis method checks if the value is a valid datetime or can be\nconverted to a datetime from an ISO format string.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated datetime value\n\nRaises\n\nTypeError – If the value cannot be converted to a datetime\n\nReturn type\n\ndatetime\n\n\n\nclass quantumengine.fields.TimeSeriesField(**kwargs)\n\nField for time series data.\n\nThis field type extends DateTimeField and adds support for time series data.\nIt can be used to store timestamps for time series data and supports\nadditional metadata for time series operations.\n\nExample\n\nclass SensorReading(Document):\n\ntimestamp = TimeSeriesField(index=True)\nvalue = FloatField()\n\nclass Meta:\n\ntime_series = True\ntime_field = “timestamp”\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new TimeSeriesField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the timestamp value.\n\nThis method checks if the value is a valid timestamp for time series data.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated timestamp value\n\nReturn type\n\ndatetime | None\n\n\n\nclass quantumengine.fields.DurationField(**kwargs)\n\nDuration field type.\n\nThis field type stores durations of time and provides validation and\nconversion between Python timedelta objects and SurrealDB duration strings.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new DurationField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python timedelta.\n\nThis method converts a SurrealDB duration string from the database to a\nPython timedelta object.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python timedelta object\n\nReturn type\n\ntimedelta | None\n\n\n\nto_db(value)\n\nConvert Python timedelta to database representation.\n\nThis method converts a Python timedelta object to a SurrealDB Duration object\nfor storage in the database.\n\nParameters\n\nvalue (Any) – The Python timedelta to convert\n\nReturns\n\nThe SurrealDB Duration object for the database\n\nReturn type\n\nAny | None\n\n\n\nvalidate(value)\n\nValidate the duration value.\n\nThis method checks if the value is a valid timedelta or can be\nconverted to a timedelta from a string.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated timedelta value\n\nRaises\n\nTypeError – If the value cannot be converted to a timedelta\n\nReturn type\n\ntimedelta | None\n\n\n\nclass quantumengine.fields.ListField(field_type=None, **kwargs)\n\nList field type.\n\nThis field type stores lists of values and provides validation and\nconversion for the items in the list. The items can be of a specific\nfield type, which is used to validate and convert each item.\n\n\n\n\n\nfield_type\n\nThe field type for items in the list\n\n\n\n__init__(field_type=None, **kwargs)\n\nInitialize a new ListField.\n\nParameters\n\nfield_type (Field | None) – The field type for items in the list\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database list to Python representation.\n\nThis method converts a database list to a Python representation by\nconverting each item using the field_type if provided.\n\nParameters\n\nvalue (List[Any] | None) – The database list to convert\n\nReturns\n\nThe Python representation of the list\n\nReturn type\n\nList[Any] | None\n\n\n\nto_db(value, backend=None)\n\nConvert Python list to database representation.\n\nThis method converts a Python list to a database representation by\nconverting each item using the field_type if provided. For ClickHouse,\nlists are converted to JSON strings.\n\nParameters\n\nvalue (List[Any] | None) – The Python list to convert\n\nbackend (str | None) – The backend name for backend-specific serialization\n\nReturns\n\nThe database representation of the list\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate the list value.\n\nThis method checks if the value is a valid list and validates each\nitem in the list using the field_type if provided.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated list value\n\nRaises\n\nTypeError – If the value is not a list\n\nValueError – If an item in the list fails validation\n\nReturn type\n\nList[Any] | None\n\n\n\nclass quantumengine.fields.DictField(field_type=None, **kwargs)\n\nDict field type.\n\nThis field type stores dictionaries of values and provides validation and\nconversion for the values in the dictionary. The values can be of a specific\nfield type, which is used to validate and convert each value.\n\n\n\n\n\nfield_type\n\nThe field type for values in the dictionary\n\n\n\n__init__(field_type=None, **kwargs)\n\nInitialize a new DictField.\n\nParameters\n\nfield_type (Field | None) – The field type for values in the dictionary\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database dictionary to Python representation.\n\nThis method converts a database dictionary to a Python representation by\nconverting each value using the field_type if provided.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The database dictionary to convert\n\nReturns\n\nThe Python representation of the dictionary\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nto_db(value, backend=None)\n\nConvert Python dictionary to database representation.\n\nThis method converts a Python dictionary to a database representation by\nconverting each value using the field_type if provided. For ClickHouse,\ndictionaries are converted to JSON strings.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The Python dictionary to convert\n\nbackend (str | None) – The backend name for backend-specific serialization\n\nReturns\n\nThe database representation of the dictionary\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate the dictionary value.\n\nThis method checks if the value is a valid dictionary and validates each\nvalue in the dictionary using the field_type if provided.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated dictionary value\n\nRaises\n\nTypeError – If the value is not a dictionary\n\nValueError – If a value in the dictionary fails validation\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nclass quantumengine.fields.SetField(field_type=None, **kwargs)\n\nSet field type.\n\nThis field type stores sets of unique values and provides validation and\nconversion for the items in the set. Values are automatically deduplicated.\n\nExample\n\nclass User(Document):\n\ntags = SetField(StringField())\n\n\n\n\n\nto_db(value, backend=None)\n\nConvert Python list to database representation with deduplication.\n\n\n\n\n\nvalidate(value)\n\nValidate the list value and ensure uniqueness.\n\nThis method checks if the value is a valid list and validates each\nitem in the list using the field_type if provided. It also ensures\nthat all items in the list are unique.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated and deduplicated list value\n\nReturn type\n\nList[Any] | None\n\n\n\nclass quantumengine.fields.ReferenceField(document_type, **kwargs)\n\nReference to another document.\n\nThis field type stores references to other documents in the database.\nIt can accept a document instance, an ID string, or a dictionary with an ID.\n\n\n\n\n\ndocument_type\n\nThe type of document being referenced\n\n\n\n__init__(document_type, **kwargs)\n\nInitialize a new ReferenceField.\n\nParameters\n\ndocument_type (Type) – The type of document being referenced\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value, dereference=False)\n\nConvert database reference to Python representation.\n\nThis method converts a database reference to a Python representation.\nIf the value is already a resolved document (from FETCH), return it as is.\nIf dereference is False, it returns the string reference as is.\nIf dereference is True but value is still a string, fetch the referenced document.\n\nParameters\n\nvalue (Any) – The database reference to convert\n\ndereference (bool) – Whether to dereference the reference (default: False)\n\nReturns\n\nThe Python representation of the reference\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python reference to database representation.\n\nThis method converts a Python reference (document instance, ID string,\ndictionary with an ID, or RecordID object) to a database representation.\n\nParameters\n\nvalue (Any) – The Python reference to convert\n\nReturns\n\nThe database representation of the reference\n\nRaises\n\nValueError – If the referenced document is not saved\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the reference value.\n\nThis method checks if the value is a valid reference to another document.\nIt accepts a document instance, an ID string, a dictionary with an ID, or a RecordID object.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated reference value\n\nRaises\n\nTypeError – If the value is not a valid reference\n\nValueError – If the referenced document is not saved\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.fields.RelationField(to_document, **kwargs)\n\nField representing a relation between documents.\n\nThis field type stores relations between documents in the database.\nIt can accept a document instance, an ID string, or a dictionary with an ID.\n\n\n\n\n\nto_document\n\nThe type of document being related to\n\n\n\n__init__(to_document, **kwargs)\n\nInitialize a new RelationField.\n\nParameters\n\nto_document (Type) – The type of document being related to\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value, dereference=False)\n\nConvert database relation to Python representation.\n\nThis method converts a database relation to a Python representation.\nIf the value is already a resolved document (from FETCH), return it as is.\nIf dereference is False, it returns the string reference as is.\nIf dereference is True but value is still a string, fetch the related document.\n\nParameters\n\nvalue (Any) – The database relation to convert\n\ndereference (bool) – Whether to dereference the relation (default: False)\n\nReturns\n\nThe Python representation of the relation\n\nReturn type\n\nAny\n\n\n\nasync get_related_documents(instance)\n\nGet documents related through this relation field.\n\nThis method retrieves documents related to the given instance through\nthis relation field. It uses the RelationQuerySet to get related documents.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\nReturns\n\nList of related documents\n\nRaises\n\nValueError – If the instance is not saved\n\nReturn type\n\nList[Any]\n\n\n\nget_related_documents_sync(instance)\n\nGet documents related through this relation field synchronously.\n\nThis method retrieves documents related to the given instance through\nthis relation field. It uses the RelationQuerySet to get related documents.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\nReturns\n\nList of related documents\n\nRaises\n\nValueError – If the instance is not saved\n\nReturn type\n\nList[Any]\n\n\n\nto_db(value)\n\nConvert Python relation to database representation.\n\nThis method converts a Python relation (document instance, ID string,\nor dictionary with an ID) to a database representation.\n\nParameters\n\nvalue (Any) – The Python relation to convert\n\nReturns\n\nThe database representation of the relation\n\nRaises\n\nValueError – If the related document is not saved\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the relation value.\n\nThis method checks if the value is a valid relation to another document.\nIt accepts a document instance, an ID string, or a dictionary with an ID.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated relation value\n\nRaises\n\nTypeError – If the value is not a valid relation\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.fields.GeometryField(required=False, **kwargs)\n\nField for handling geometric data in SurrealDB.\n\nThis field validates and processes geometric data according to SurrealDB’s\ngeometry specification. It supports various geometry types including Point,\nLineString, Polygon, MultiPoint, MultiLineString, and MultiPolygon.\n\n\n\n\n\nrequired\n\nWhether the field is required. Defaults to False.\n\nType\n\nbool\n\nExample\n\n>>> class Location(Document):\n...     point = GeometryField()\n>>>\n>>> # Using GeometryPoint for precise coordinate handling\n>>> from quantumengine.geometry import GeometryPoint\n>>> loc = Location(point=GeometryPoint([-122.4194, 37.7749]))\n\n\n\n__init__(required=False, **kwargs)\n\nInitialize a GeometryField.\n\nParameters\n\nrequired (bool, optional) – Whether this field is required. Defaults to False.\n\n**kwargs – Additional field options to be passed to the parent Field class.\n\n\n\nvalidate(value)\n\nValidate geometry data.\n\nEnsures the geometry data follows SurrealDB’s expected format with proper structure\nand coordinates. Does not modify the numeric values to preserve SurrealDB’s\nnative geometry handling.\n\nParameters\n\nvalue – The geometry value to validate. Can be a GeometryPoint object or\na dict with ‘type’ and ‘coordinates’ fields.\n\nReturns\n\nThe validated geometry data.\n\nReturn type\n\ndict\n\nRaises\n\nValidationError – If the geometry data is invalid or improperly formatted.\n\n\n\nclass quantumengine.fields.RecordIDField(**kwargs)\n\nRecordID field type.\n\nThis field type stores record IDs and provides validation and\nconversion between Python values and SurrealDB record ID format.\n\nA RecordID consists of a table name and a unique identifier, formatted as\ntable:id. This field can accept a string in this format, or a tuple/list\nwith the table name and ID.\n\nExample\n\n>>> class Reference(Document):\n...     target = RecordIDField()\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new RecordIDField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python representation.\n\nThis method converts a record ID from the database to a Python representation.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python representation of the record ID\n\nReturn type\n\nstr | None\n\n\n\nto_db(value)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a record ID for storage in the database.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe record ID for the database\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the record ID.\n\nThis method checks if the value is a valid record ID.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated record ID\n\nRaises\n\nTypeError – If the value cannot be converted to a record ID\n\nValueError – If the record ID format is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.fields.BytesField(**kwargs)\n\nBytes field type.\n\nThis field type stores binary data as byte arrays and provides validation and\nconversion between Python bytes objects and SurrealDB bytes format.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new BytesField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python bytes.\n\nThis method converts a SurrealDB bytes format from the database to a\nPython bytes object.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python bytes object\n\nReturn type\n\nbytes | None\n\n\n\nto_db(value)\n\nConvert Python bytes to database representation.\n\nThis method converts a Python bytes object to a SurrealDB bytes format\nfor storage in the database.\n\nParameters\n\nvalue (Any) – The Python bytes to convert\n\nReturns\n\nThe SurrealDB bytes format for the database\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the bytes value.\n\nThis method checks if the value is a valid bytes object or can be\nconverted to bytes.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated bytes value\n\nRaises\n\nTypeError – If the value cannot be converted to bytes\n\nReturn type\n\nbytes | None\n\n\n\nclass quantumengine.fields.RegexField(**kwargs)\n\nRegular expression field type.\n\nThis field type stores regular expressions and provides validation and\nconversion between Python regex objects and SurrealDB regex format.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new RegexField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python regex.\n\nThis method converts a SurrealDB regex format from the database to a\nPython regex pattern.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python regex pattern\n\nReturn type\n\nPattern | None\n\n\n\nto_db(value)\n\nConvert Python regex to database representation.\n\nThis method converts a Python regex pattern to a SurrealDB regex format\nfor storage in the database.\n\nParameters\n\nvalue (Any) – The Python regex pattern to convert\n\nReturns\n\nThe SurrealDB regex format for the database\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the regex value.\n\nThis method checks if the value is a valid regex pattern or can be\ncompiled into a regex pattern.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated regex pattern\n\nRaises\n\nTypeError – If the value cannot be converted to a regex pattern\n\nValueError – If the regex pattern is invalid\n\nReturn type\n\nPattern | None\n\n\n\nclass quantumengine.fields.DecimalField(**kwargs)\n\nDecimal field type.\n\nThis field type stores decimal values with arbitrary precision using Python’s\nDecimal class. It provides validation to ensure the value is a valid decimal.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new DecimalField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the decimal value.\n\nThis method checks if the value is a valid decimal or can be\nconverted to a decimal.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated decimal value\n\nRaises\n\nTypeError – If the value cannot be converted to a decimal\n\nReturn type\n\nDecimal | None\n\n\n\nclass quantumengine.fields.UUIDField(**kwargs)\n\nUUID field type.\n\nThis field type stores UUID values and provides validation and\nconversion between Python UUID objects and SurrealDB string format.\n\nExample\n\n>>> class User(Document):\n...     id = UUIDField(default=uuid.uuid4)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new UUIDField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python UUID.\n\nThis method converts a value from the database to a Python UUID object.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python UUID object\n\nReturn type\n\nUUID | None\n\n\n\nto_db(value)\n\nConvert Python UUID to database representation.\n\nThis method converts a Python UUID object to a string for storage in the database.\n\nParameters\n\nvalue (Any) – The Python UUID to convert\n\nReturns\n\nThe string representation for the database\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the UUID value.\n\nThis method checks if the value is a valid UUID or can be\nconverted to a UUID.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated UUID value\n\nRaises\n\nTypeError – If the value cannot be converted to a UUID\n\nValueError – If the UUID format is invalid\n\nReturn type\n\nUUID | None\n\n\n\nclass quantumengine.fields.LiteralField(allowed_values, **kwargs)\n\nField for union/enum-like values.\n\nAllows a field to accept multiple different types or specific values,\nsimilar to a union or enum type in other languages.\n\nExample\n\nclass Product(Document):\n\nstatus = LiteralField([“active”, “discontinued”, “out_of_stock”])\nid_or_name = LiteralField([IntField(), StringField()])\n\n\n\n\n\n__init__(allowed_values, **kwargs)\n\nInitialize a new LiteralField.\n\nParameters\n\nallowed_values (List[Any]) – List of allowed values or field types\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python representation.\n\nThis method converts a database value to a Python representation by\nusing the appropriate field type if the value is not a literal.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a database representation by\nusing the appropriate field type if the value is not a literal.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate that the value is one of the allowed values or types.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValidationError – If the value is not one of the allowed values or types\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.fields.EmailField(**kwargs)\n\nEmail field type.\n\nThis field type stores email addresses and provides validation to ensure\nthe value is a valid email address.\n\nExample\n\n>>> class User(Document):\n...     email = EmailField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new EmailField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the email address.\n\nThis method checks if the value is a valid email address.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated email address\n\nRaises\n\nValueError – If the email address is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.fields.URLField(**kwargs)\n\nURL field type.\n\nThis field type stores URLs and provides validation to ensure\nthe value is a valid URL.\n\nExample\n\n>>> class Website(Document):\n...     url = URLField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new URLField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the URL.\n\nThis method checks if the value is a valid URL.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated URL\n\nRaises\n\nValueError – If the URL is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.fields.IPAddressField(ipv4_only=False, ipv6_only=False, version=None, **kwargs)\n\nIP address field type.\n\nThis field type stores IP addresses and provides validation to ensure\nthe value is a valid IPv4 or IPv6 address.\n\nExample\n\n>>> class Server(Document):\n...     ip_address = IPAddressField(required=True)\n...     ip_v4 = IPAddressField(ipv4_only=True)\n...     ip_v6 = IPAddressField(ipv6_only=True)\n\n\n\n\n\n__init__(ipv4_only=False, ipv6_only=False, version=None, **kwargs)\n\nInitialize a new IPAddressField.\n\nParameters\n\nipv4_only (bool) – Whether to only allow IPv4 addresses\n\nipv6_only (bool) – Whether to only allow IPv6 addresses\n\nversion (str) – IP version to validate (‘ipv4’, ‘ipv6’, or ‘both’)\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the IP address.\n\nThis method checks if the value is a valid IP address.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated IP address\n\nRaises\n\nValueError – If the IP address is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.fields.SlugField(**kwargs)\n\nSlug field type.\n\nThis field type stores slugs (URL-friendly strings) and provides validation\nto ensure the value is a valid slug.\n\nExample\n\n>>> class Article(Document):\n...     slug = SlugField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new SlugField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the slug.\n\nThis method checks if the value is a valid slug.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated slug\n\nRaises\n\nValueError – If the slug is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.fields.ChoiceField(choices, **kwargs)\n\nChoice field type.\n\nThis field type stores values from a predefined set of choices and provides\nvalidation to ensure the value is one of the allowed choices.\n\nExample\n\n>>> class Product(Document):\n...     status = ChoiceField(choices=['active', 'inactive', 'discontinued'])\n\n\n\n\n\n__init__(choices, **kwargs)\n\nInitialize a new ChoiceField.\n\nParameters\n\nchoices (List[str | tuple]) – List of allowed choices. Each choice can be a string or a tuple\nof (value, display_name).\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the choice value.\n\nThis method checks if the value is one of the allowed choices.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated choice value\n\nRaises\n\nValueError – If the value is not one of the allowed choices\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.fields.OptionField(field_type, **kwargs)\n\nOption field type.\n\nThis field type makes a field optional and guarantees it to be either\nNone or a value of the specified type.\n\n\n\n\n\nfield_type\n\nThe field type for the value when not None\n\n\n\n__init__(field_type, **kwargs)\n\nInitialize a new OptionField.\n\nParameters\n\nfield_type (Field) – The field type for the value when not None\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python representation.\n\nThis method converts a database value to a Python representation using\nthe field_type’s from_db method if the value is not None.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a database representation using\nthe field_type’s to_db method if the value is not None.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate the option value.\n\nThis method checks if the value is None or a valid value for the field_type.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValueError – If the value is not None and fails validation for field_type\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.fields.FutureField(computation_expression, **kwargs)\n\nField for future (computed) values.\n\nThis field type represents a computed value in SurrealDB that is calculated\nat query time rather than stored in the database. It uses SurrealDB’s\n<future> syntax to define a computation expression.\n\n\n\n\n\ncomputation_expression\n\nThe SurrealDB expression to compute the value\n\n\n\n__init__(computation_expression, **kwargs)\n\nInitialize a new FutureField.\n\nParameters\n\ncomputation_expression (str) – The SurrealDB expression to compute the value\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nto_db(value)\n\nConvert to SurrealDB future syntax.\n\nThis method returns the SurrealDB <future> syntax with the computation\nexpression, regardless of the input value.\n\nParameters\n\nvalue (Any) – The input value (ignored)\n\nReturns\n\nThe SurrealDB future syntax string\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.TableField(**kwargs)\n\nTable field type.\n\nThis field type stores table names and provides validation and\nconversion between Python strings and SurrealDB table format.\n\nExample\n\n```python\nclass Schema(Document):\n\ntable_name = TableField()\nfields = DictField()\n\n```\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new TableField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nto_db(value)\n\nConvert Python string to database representation.\n\nThis method converts a Python string to a table name for storage in the database.\n\nParameters\n\nvalue (Any) – The Python string to convert\n\nReturns\n\nThe table name for the database\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the table name.\n\nThis method checks if the value is a valid table name.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated table name\n\nRaises\n\nTypeError – If the value is not a string\n\nValueError – If the table name is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.fields.RangeField(min_type, max_type=None, **kwargs)\n\nField for storing ranges of values.\n\nThis field type stores ranges of values with minimum and maximum bounds.\nIt supports various types for the bounds, such as numbers, strings, and dates.\n\nExample\n\nclass PriceRange(Document):\n\nprice_range = RangeField(min_type=FloatField(), max_type=FloatField())\nage_range = RangeField(min_type=IntField(), max_type=IntField())\n\n\n\n\n\n__init__(min_type, max_type=None, **kwargs)\n\nInitialize a new RangeField.\n\nParameters\n\nmin_type (Field) – The field type for the minimum value\n\nmax_type (Field) – The field type for the maximum value (defaults to same as min_type)\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database range to Python representation.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The database range to convert\n\nReturns\n\nThe Python representation of the range\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nto_db(value)\n\nConvert Python range to database representation.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The Python range to convert\n\nReturns\n\nThe database representation of the range\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nvalidate(value)\n\nValidate the range value.\n\nThis method checks if the value is a valid range with minimum and maximum\nvalues that can be validated by the respective field types.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated range value\n\nRaises\n\nValidationError – If the value is not a valid range\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nclass quantumengine.fields.LowCardinalityField(base_type='String', **kwargs)\n\nClickHouse LowCardinality field for enum-like string values.\n\nLowCardinality is a ClickHouse optimization for string columns with a small\nnumber of distinct values (typically < 10,000). It uses dictionary encoding\nto reduce memory usage and improve query performance.\n\nThis field automatically maps to LowCardinality(String) in ClickHouse and\nfalls back to regular String type in other backends.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     seller_name = LowCardinalityField(required=True)\n...     marketplace = LowCardinalityField(choices=['Amazon', 'eBay', 'Walmart'])\n...\n...     class Meta:\n...         backend = 'clickhouse'\n\n\n\n\n\n__init__(base_type='String', **kwargs)\n\nInitialize a new LowCardinalityField.\n\nParameters\n\nbase_type (str) – The base ClickHouse type to wrap with LowCardinality (default: ‘String’)\n\n**kwargs (Any) – Additional arguments passed to StringField\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type.\n\nReturns\n\nThe ClickHouse field type definition\n\nReturn type\n\nstr\n\n\n\nget_surrealdb_type()\n\nGet the SurrealDB fallback field type.\n\nReturns\n\nThe SurrealDB field type definition\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.FixedStringField(length, **kwargs)\n\nClickHouse FixedString field for fixed-length strings.\n\nFixedString is a ClickHouse type for strings of exactly N bytes.\nIt’s more memory-efficient than String for fixed-length data like\ncountry codes, currency codes, etc.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     currency_code = FixedStringField(length=3)  # USD, EUR, etc.\n...     country_code = FixedStringField(length=2)   # US, CA, etc.\n\n\n\n\n\n__init__(length, **kwargs)\n\nInitialize a new FixedStringField.\n\nParameters\n\nlength (int) – The exact length in bytes for the string\n\n**kwargs (Any) – Additional arguments passed to StringField\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type.\n\nReturns\n\nThe ClickHouse field type definition\n\nReturn type\n\nstr\n\n\n\nget_surrealdb_type()\n\nGet the SurrealDB fallback field type.\n\nReturns\n\nThe SurrealDB field type definition\n\nReturn type\n\nstr\n\n\n\nvalidate(value)\n\nValidate the fixed string value.\n\nEnsures the string is exactly the specified length.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated string value\n\nRaises\n\nValueError – If the string length doesn’t match exactly\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.EnumField(values, **kwargs)\n\nClickHouse Enum field for predefined string values.\n\nEnum fields in ClickHouse are stored as integers internally but presented\nas strings. They’re more efficient than LowCardinality for small sets of\nvalues that rarely change.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     status = EnumField(values={\n...         'active': 1,\n...         'inactive': 2,\n...         'discontinued': 3\n...     })\n\n\n\n\n\n__init__(values, **kwargs)\n\nInitialize a new EnumField.\n\nParameters\n\nvalues (Dict[str, int]) – Dictionary mapping string values to integer codes\n\n**kwargs (Any) – Additional arguments passed to Field\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type.\n\nReturns\n\nThe ClickHouse field type definition\n\nReturn type\n\nstr\n\n\n\nget_surrealdb_type()\n\nGet the SurrealDB fallback field type.\n\nReturns\n\nThe SurrealDB field type definition\n\nReturn type\n\nstr\n\n\n\nvalidate(value)\n\nValidate the enum value.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated enum value\n\nRaises\n\nValueError – If the value is not in the enum\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.CompressedStringField(codec=None, **kwargs)\n\nString field with ClickHouse compression codec support.\n\nUseful for large text fields like URLs, descriptions, etc.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     ad_page_url = CompressedStringField(codec=\"ZSTD(3)\")\n...     product_description = CompressedStringField(codec=\"LZ4\")\n\n\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type with compression.\n\nReturns\n\nThe ClickHouse field type definition with codec\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.CompressedLowCardinalityField(codec=None, **kwargs)\n\nLowCardinality field with ClickHouse compression codec support.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     category = CompressedLowCardinalityField(codec=\"LZ4\")\n\n\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type with compression.\n\nReturns\n\nThe ClickHouse field type definition with codec\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.fields.ArrayField(element_field, codec=None, **kwargs)\n\nClickHouse Array field with support for nested types and optimizations.\n\nClickHouse arrays can contain any type including LowCardinality, Nullable,\nand other complex types. This field provides full ClickHouse array support\nwith automatic type detection and optimization.\n\nExample\n\n>>> class MarketplaceData(Document):\n...     # Array of low cardinality strings (efficient for repeated values)\n...     tags = ArrayField(LowCardinalityField())\n...\n...     # Array of integers\n...     ratings = ArrayField(IntField())\n...\n...     # Array of strings with compression\n...     urls = ArrayField(StringField(), codec=\"LZ4\")\n\n\n\n\n\n__init__(element_field, codec=None, **kwargs)\n\nInitialize a new ArrayField.\n\nParameters\n\nelement_field (Field) – The field type for array elements\n\ncodec (str | None) – Optional ClickHouse compression codec for the array\n\n**kwargs (Any) – Additional arguments passed to Field\n\n\n\nget_clickhouse_type()\n\nGet the ClickHouse-specific field type.\n\nReturns\n\nThe ClickHouse field type definition\n\nReturn type\n\nstr\n\n\n\nget_surrealdb_type()\n\nGet the SurrealDB fallback field type.\n\nReturns\n\nThe SurrealDB field type definition\n\nReturn type\n\nstr\n\n\n\nvalidate(value)\n\nValidate the array value and all elements.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated array value\n\nRaises\n\nTypeError – If the value is not a list\n\nValueError – If an element fails validation\n\nReturn type\n\nList[Any] | None"},{"objectID":"Home","href":"api/backends.html#backends-api","title":"Backends API","text":"Backends API\n\nThis section provides the complete API reference for QuantumEngine’s backend system.\n\nTable of Contents\n\nConnection Management\n\nBackend Configuration\n\nConfiguration Functions\n\nConnection Functions\n\nBackend Implementations\n\nSurrealDB Backend\n\nClickHouse Backend\n\nBackend Interface\n\nBase Backend Classes\n\nBackend Registry\n\nSchema Management\n\nSchemaless Operations\n\nData Grid API\n\nMaterialized Views\n\nBackend Utilities\n\nConnection Pooling\n\nBackend Detection\n\nBackend-Specific Features\n\nSurrealDB Features\n\nClickHouse Features\n\nMigration Support\n\nPerformance Monitoring\n\nException Handling\n\nSee Also"},{"objectID":"Home","href":"api/backends.html#connection-management","title":"Backends API > Connection Management","text":"Connection Management\n\n\n\n\n\nclass quantumengine.connection.ConnectionPoolBase(url, namespace=None, database=None, username=None, password=None, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nBases: ABC\n\nBase class for connection pools.\n\nThis abstract class defines the common interface and functionality for\nboth synchronous and asynchronous connection pools.\n\n\n\n\n\nurl\n\nThe URL of the SurrealDB server\n\n\n\nnamespace\n\nThe namespace to use\n\n\n\ndatabase\n\nThe database to use\n\n\n\nusername\n\nThe username for authentication\n\n\n\npassword\n\nThe password for authentication\n\n\n\npool_size\n\nMaximum number of connections in the pool\n\n\n\nmax_idle_time\n\nMaximum time in seconds a connection can be idle before being closed\n\n\n\nconnect_timeout\n\nTimeout in seconds for establishing a connection\n\n\n\noperation_timeout\n\nTimeout in seconds for operations\n\n\n\nretry_limit\n\nMaximum number of retries for failed operations\n\n\n\nretry_delay\n\nInitial delay in seconds between retries\n\n\n\nretry_backoff\n\nBackoff multiplier for retry delay\n\n\n\nvalidate_on_borrow\n\nWhether to validate connections when borrowing from the pool\n\n\n\n__init__(url, namespace=None, database=None, username=None, password=None, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nInitialize a new ConnectionPoolBase.\n\nParameters\n\nurl (str) – The URL of the SurrealDB server\n\nnamespace (str | None) – The namespace to use\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\npool_size (int) – Maximum number of connections in the pool\n\nmax_idle_time (int) – Maximum time in seconds a connection can be idle before being closed\n\nconnect_timeout (int) – Timeout in seconds for establishing a connection\n\noperation_timeout (int) – Timeout in seconds for operations\n\nretry_limit (int) – Maximum number of retries for failed operations\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\nvalidate_on_borrow (bool) – Whether to validate connections when borrowing from the pool\n\n\n\nabstractmethod create_connection()\n\nCreate a new connection.\n\nReturns\n\nA new connection\n\nReturn type\n\nAny\n\n\n\nabstractmethod validate_connection(connection)\n\nValidate a connection.\n\nParameters\n\nconnection (Any) – The connection to validate\n\nReturns\n\nTrue if the connection is valid, False otherwise\n\nReturn type\n\nbool\n\n\n\nabstractmethod close_connection(connection)\n\nClose a connection.\n\nParameters\n\nconnection (Any) – The connection to close\n\n\n\nabstractmethod get_connection()\n\nGet a connection from the pool.\n\nReturns\n\nA connection from the pool\n\nReturn type\n\nAny\n\n\n\nabstractmethod return_connection(connection)\n\nReturn a connection to the pool.\n\nParameters\n\nconnection (Any) – The connection to return\n\n\n\nabstractmethod close()\n\nClose the pool and all connections.\n\n\n\n\n\nclass quantumengine.connection.SyncConnectionPool(url, namespace=None, database=None, username=None, password=None, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nBases: ConnectionPoolBase\n\nSynchronous connection pool for SurrealDB.\n\nThis class manages a pool of synchronous connections to a SurrealDB database.\nIt handles connection creation, validation, and reuse, and provides methods\nfor acquiring and releasing connections.\n\nThe connections returned by this pool are wrapped in SurrealEngineSyncConnection\nobjects, which can be used with the Document class and other SurrealEngine\nfunctionality that expects a SurrealEngineSyncConnection.\n\n\n\n\n\npool\n\nQueue of available connections\n\n\n\nin_use\n\nSet of connections currently in use\n\n\n\nlock\n\nLock for thread-safe operations\n\n\n\nclosed\n\nWhether the pool is closed\n\n\n\n__init__(url, namespace=None, database=None, username=None, password=None, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nInitialize a new SyncConnectionPool.\n\nParameters\n\nurl (str) – The URL of the SurrealDB server\n\nnamespace (str | None) – The namespace to use\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\npool_size (int) – Maximum number of connections in the pool\n\nmax_idle_time (int) – Maximum time in seconds a connection can be idle before being closed\n\nconnect_timeout (int) – Timeout in seconds for establishing a connection\n\noperation_timeout (int) – Timeout in seconds for operations\n\nretry_limit (int) – Maximum number of retries for failed operations\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\nvalidate_on_borrow (bool) – Whether to validate connections when borrowing from the pool\n\n\n\ncreate_connection()\n\nCreate a new connection.\n\nReturns\n\nA new connection wrapped in SurrealEngineSyncConnection\n\nRaises\n\nException – If the connection cannot be created\n\nReturn type\n\nSurrealEngineSyncConnection\n\n\n\nvalidate_connection(connection)\n\nValidate a connection.\n\nParameters\n\nconnection (SurrealEngineSyncConnection) – The connection to validate (SurrealEngineSyncConnection)\n\nReturns\n\nTrue if the connection is valid, False otherwise\n\nReturn type\n\nbool\n\n\n\nclose_connection(connection)\n\nClose a connection.\n\nParameters\n\nconnection (SurrealEngineSyncConnection) – The connection to close (SurrealEngineSyncConnection)\n\n\n\nget_connection()\n\nGet a connection from the pool.\n\nReturns\n\nA SurrealEngineSyncConnection from the pool\n\nRaises\n\nRuntimeError – If the pool is closed\n\nException – If a connection cannot be obtained\n\nReturn type\n\nSurrealEngineSyncConnection\n\n\n\nreturn_connection(connection)\n\nReturn a connection to the pool.\n\nParameters\n\nconnection (SurrealEngineSyncConnection) – The connection to return (SurrealEngineSyncConnection)\n\n\n\nclose()\n\nClose the pool and all connections.\n\n\n\n\n\nclass quantumengine.connection.AsyncConnectionPool(url, namespace=None, database=None, username=None, password=None, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nBases: ConnectionPoolBase\n\nAsynchronous connection pool for SurrealDB.\n\nThis class manages a pool of asynchronous connections to a SurrealDB database.\nIt handles connection creation, validation, and reuse, and provides methods\nfor acquiring and releasing connections.\n\nThe connections returned by this pool are wrapped in SurrealEngineAsyncConnection\nobjects, which can be used with the Document class and other SurrealEngine\nfunctionality that expects a SurrealEngineAsyncConnection.\n\n\n\n\n\npool\n\nList of available connections\n\n\n\nin_use\n\nDictionary of connections currently in use and their timestamps\n\n\n\nlock\n\nAsyncio lock for thread-safe operations\n\n\n\nclosed\n\nWhether the pool is closed\n\n\n\n__init__(url, namespace=None, database=None, username=None, password=None, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nInitialize a new AsyncConnectionPool.\n\nParameters\n\nurl (str) – The URL of the SurrealDB server\n\nnamespace (str | None) – The namespace to use\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\npool_size (int) – Maximum number of connections in the pool\n\nmax_idle_time (int) – Maximum time in seconds a connection can be idle before being closed\n\nconnect_timeout (int) – Timeout in seconds for establishing a connection\n\noperation_timeout (int) – Timeout in seconds for operations\n\nretry_limit (int) – Maximum number of retries for failed operations\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\nvalidate_on_borrow (bool) – Whether to validate connections when borrowing from the pool\n\n\n\nasync create_connection()\n\nCreate a new connection.\n\nReturns\n\nA new connection wrapped in SurrealEngineAsyncConnection\n\nRaises\n\nException – If the connection cannot be created\n\nReturn type\n\nSurrealEngineAsyncConnection\n\n\n\nasync validate_connection(connection)\n\nValidate a connection.\n\nParameters\n\nconnection (SurrealEngineAsyncConnection) – The connection to validate (SurrealEngineAsyncConnection)\n\nReturns\n\nTrue if the connection is valid, False otherwise\n\nReturn type\n\nbool\n\n\n\nasync close_connection(connection)\n\nClose a connection.\n\nParameters\n\nconnection (SurrealEngineAsyncConnection) – The connection to close (SurrealEngineAsyncConnection)\n\n\n\nasync get_connection()\n\nGet a connection from the pool.\n\nReturns\n\nA SurrealEngineAsyncConnection from the pool\n\nRaises\n\nRuntimeError – If the pool is closed\n\nException – If a connection cannot be obtained\n\nReturn type\n\nSurrealEngineAsyncConnection\n\n\n\nasync return_connection(connection)\n\nReturn a connection to the pool.\n\nParameters\n\nconnection (SurrealEngineAsyncConnection) – The connection to return (SurrealEngineAsyncConnection)\n\n\n\nasync close()\n\nClose the pool and all connections.\n\n\n\n\n\nclass quantumengine.connection.ConnectionEvent\n\nBases: object\n\nEvent types for connection events.\n\nThis class defines the event types that can be emitted by connections.\n\n\n\nCONNECTED = 'connected'\n\n\n\n\n\nDISCONNECTED = 'disconnected'\n\n\n\n\n\nRECONNECTING = 'reconnecting'\n\n\n\n\n\nRECONNECTED = 'reconnected'\n\n\n\n\n\nCONNECTION_FAILED = 'connection_failed'\n\n\n\n\n\nRECONNECTION_FAILED = 'reconnection_failed'\n\n\n\n\n\nCONNECTION_CLOSED = 'connection_closed'\n\n\n\n\n\nclass quantumengine.connection.ConnectionEventListener\n\nBases: object\n\nListener for connection events.\n\nThis class defines the interface for connection event listeners.\n\n\n\non_event(event_type, connection, **kwargs)\n\nHandle a connection event.\n\nParameters\n\nevent_type (str) – The type of event\n\nconnection (Any) – The connection that emitted the event\n\n**kwargs – Additional event data\n\n\n\nclass quantumengine.connection.ConnectionEventEmitter\n\nBases: object\n\nEmitter for connection events.\n\nThis class provides methods for registering listeners and emitting events.\n\n\n\n\n\nlisteners\n\nList of registered event listeners\n\n\n\n__init__()\n\nInitialize a new ConnectionEventEmitter.\n\n\n\n\n\nadd_listener(listener)\n\nAdd a listener for connection events.\n\nParameters\n\nlistener (ConnectionEventListener) – The listener to add\n\n\n\nremove_listener(listener)\n\nRemove a listener for connection events.\n\nParameters\n\nlistener (ConnectionEventListener) – The listener to remove\n\n\n\nemit_event(event_type, connection, **kwargs)\n\nEmit a connection event.\n\nParameters\n\nevent_type (str) – The type of event\n\nconnection (Any) – The connection that emitted the event\n\n**kwargs – Additional event data\n\n\n\nclass quantumengine.connection.OperationQueue\n\nBases: object\n\nQueue for operations during reconnection.\n\nThis class manages a queue of operations that are waiting for a connection\nto be reestablished. Once the connection is restored, the operations are\nexecuted in the order they were queued.\n\n\n\n\n\nsync_operations\n\nQueue of synchronous operations\n\n\n\nasync_operations\n\nQueue of asynchronous operations\n\n\n\nis_reconnecting\n\nWhether the connection is currently reconnecting\n\n\n\nreconnection_event\n\nEvent that is set when reconnection is complete\n\n\n\nasync_reconnection_event\n\nAsyncio event that is set when reconnection is complete\n\n\n\n__init__()\n\nInitialize a new OperationQueue.\n\n\n\n\n\nstart_reconnection()\n\nStart the reconnection process.\n\nThis method marks the connection as reconnecting and clears the\nreconnection events.\n\n\n\n\n\nend_reconnection()\n\nEnd the reconnection process.\n\nThis method marks the connection as no longer reconnecting and sets\nthe reconnection events.\n\n\n\n\n\nqueue_operation(operation, args=None, kwargs=None)\n\nQueue a synchronous operation.\n\nParameters\n\noperation (Callable) – The operation to queue\n\nargs (List) – The positional arguments for the operation\n\nkwargs (Dict) – The keyword arguments for the operation\n\n\n\nqueue_async_operation(operation, args=None, kwargs=None)\n\nQueue an asynchronous operation.\n\nParameters\n\noperation (Callable) – The operation to queue\n\nargs (List) – The positional arguments for the operation\n\nkwargs (Dict) – The keyword arguments for the operation\n\n\n\nexecute_queued_operations()\n\nExecute all queued synchronous operations.\n\n\n\n\n\nasync execute_queued_async_operations()\n\nExecute all queued asynchronous operations.\n\n\n\n\n\nwait_for_reconnection(timeout=None)\n\nWait for reconnection to complete.\n\nParameters\n\ntimeout (float | None) – Maximum time to wait in seconds\n\nReturns\n\nTrue if reconnection completed, False if timed out\n\nReturn type\n\nbool\n\n\n\nasync wait_for_async_reconnection(timeout=None)\n\nWait for reconnection to complete asynchronously.\n\nParameters\n\ntimeout (float | None) – Maximum time to wait in seconds\n\nReturns\n\nTrue if reconnection completed, False if timed out\n\nReturn type\n\nbool\n\n\n\nclass quantumengine.connection.ReconnectionStrategy(max_attempts=10, initial_delay=1.0, max_delay=60.0, backoff_factor=2.0)\n\nBases: object\n\nStrategy for reconnecting to the database.\n\nThis class provides methods for reconnecting to the database with\nconfigurable retry limits and backoff strategies.\n\n\n\n\n\nmax_attempts\n\nMaximum number of reconnection attempts\n\n\n\ninitial_delay\n\nInitial delay in seconds between reconnection attempts\n\n\n\nmax_delay\n\nMaximum delay in seconds between reconnection attempts\n\n\n\nbackoff_factor\n\nBackoff multiplier for reconnection delay\n\n\n\n__init__(max_attempts=10, initial_delay=1.0, max_delay=60.0, backoff_factor=2.0)\n\nInitialize a new ReconnectionStrategy.\n\nParameters\n\nmax_attempts (int) – Maximum number of reconnection attempts\n\ninitial_delay (float) – Initial delay in seconds between reconnection attempts\n\nmax_delay (float) – Maximum delay in seconds between reconnection attempts\n\nbackoff_factor (float) – Backoff multiplier for reconnection delay\n\n\n\nget_delay(attempt)\n\nGet the delay for a reconnection attempt.\n\nParameters\n\nattempt (int) – The reconnection attempt number (0-based)\n\nReturns\n\nThe delay in seconds for the reconnection attempt\n\nReturn type\n\nfloat\n\n\n\nclass quantumengine.connection.RetryStrategy(retry_limit=3, retry_delay=1.0, retry_backoff=2.0)\n\nBases: object\n\nStrategy for retrying operations with exponential backoff.\n\nThis class provides methods for retrying operations with configurable\nretry limits and backoff strategies.\n\n\n\n\n\nretry_limit\n\nMaximum number of retries\n\n\n\nretry_delay\n\nInitial delay in seconds between retries\n\n\n\nretry_backoff\n\nBackoff multiplier for retry delay\n\n\n\n__init__(retry_limit=3, retry_delay=1.0, retry_backoff=2.0)\n\nInitialize a new RetryStrategy.\n\nParameters\n\nretry_limit (int) – Maximum number of retries\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\n\n\nget_retry_delay(attempt)\n\nGet the delay for a retry attempt.\n\nParameters\n\nattempt (int) – The retry attempt number (0-based)\n\nReturns\n\nThe delay in seconds for the retry attempt\n\nReturn type\n\nfloat\n\n\n\nshould_retry(attempt, exception)\n\nDetermine whether to retry an operation.\n\nParameters\n\nattempt (int) – The retry attempt number (0-based)\n\nexception (Exception) – The exception that caused the operation to fail\n\nReturns\n\nTrue if the operation should be retried, False otherwise\n\nReturn type\n\nbool\n\n\n\nexecute_with_retry(operation)\n\nExecute an operation with retry.\n\nParameters\n\noperation (Callable[[], Any]) – The operation to execute\n\nReturns\n\nThe result of the operation\n\nRaises\n\nException – If the operation fails after all retries\n\nReturn type\n\nAny\n\n\n\nasync execute_with_retry_async(operation)\n\nExecute an asynchronous operation with retry.\n\nParameters\n\noperation (Callable[[], Any]) – The asynchronous operation to execute\n\nReturns\n\nThe result of the operation\n\nRaises\n\nException – If the operation fails after all retries\n\nReturn type\n\nAny\n\n\n\nquantumengine.connection.parse_connection_string(connection_string)\n\nParse a connection string into a dictionary of connection parameters.\n\nSupports the following formats:\n- surrealdb://user:pass@host:port/namespace/database?param1=value1&param2=value2 (maps to ws://)\n- wss://user:pass@host:port/namespace/database?param1=value1&param2=value2\n- ws://user:pass@host:port/namespace/database?param1=value1&param2=value2\n- http://user:pass@host:port/namespace/database?param1=value1&param2=value2\n- https://user:pass@host:port/namespace/database?param1=value1&param2=value2\n\nConnection string parameters:\n- pool_size: Maximum number of connections in the pool (default: 10)\n- max_idle_time: Maximum time in seconds a connection can be idle before being closed (default: 60)\n- connect_timeout: Timeout in seconds for establishing a connection (default: 30)\n- operation_timeout: Timeout in seconds for operations (default: 30)\n- retry_limit: Maximum number of retries for failed operations (default: 3)\n- retry_delay: Initial delay in seconds between retries (default: 1)\n- retry_backoff: Backoff multiplier for retry delay (default: 2)\n- validate_on_borrow: Whether to validate connections when borrowing from the pool (default: true)\n\nParameters\n\nconnection_string (str) – The connection string to parse\n\nReturns\n\nA dictionary containing the parsed connection parameters\n\nRaises\n\nValueError – If the connection string is invalid\n\nReturn type\n\nDict[str, Any]\n\n\n\nclass quantumengine.connection.BaseSurrealEngineConnection(*args, **kwargs)\n\nBases: Protocol\n\nProtocol defining the interface for SurrealDB connections.\n\nThis protocol defines the common interface that both synchronous and\nasynchronous connections must implement.\n\n\n\nurl: str | None\n\n\n\n\n\nnamespace: str | None\n\n\n\n\n\ndatabase: str | None\n\n\n\n\n\nusername: str | None\n\n\n\n\n\npassword: str | None\n\n\n\n\n\nclient: Any\n\n\n\n\n\nproperty db: SurrealEngine\n\nGet dynamic table accessor.\n\n\n\n__init__(*args, **kwargs)\n\n\n\n\n\nclass quantumengine.connection.ConnectionPoolClient(pool)\n\nBases: object\n\nClient that proxies requests to connections from a connection pool.\n\nThis class provides the same interface as the SurrealDB client but gets a connection\nfrom the pool for each operation and returns it when done.\n\n\n\n\n\npool\n\nThe connection pool to get connections from\n\n\n\n__init__(pool)\n\nInitialize a new ConnectionPoolClient.\n\nParameters\n\npool (AsyncConnectionPool) – The connection pool to get connections from\n\n\n\nasync create(collection, data)\n\nCreate a new record in the database.\n\nParameters\n\ncollection (str) – The collection to create the record in\n\ndata (Dict[str, Any]) – The data to create the record with\n\nReturns\n\nThe created record\n\nReturn type\n\nAny\n\n\n\nasync update(id, data)\n\nUpdate an existing record in the database.\n\nParameters\n\nid (str) – The ID of the record to update\n\ndata (Dict[str, Any]) – The data to update the record with\n\nReturns\n\nThe updated record\n\nReturn type\n\nAny\n\n\n\nasync delete(id)\n\nDelete a record from the database.\n\nParameters\n\nid (str) – The ID of the record to delete\n\nReturns\n\nThe result of the delete operation\n\nReturn type\n\nAny\n\n\n\nasync select(id)\n\nSelect a record from the database.\n\nParameters\n\nid (str) – The ID of the record to select\n\nReturns\n\nThe selected record\n\nReturn type\n\nAny\n\n\n\nasync query(query)\n\nExecute a query against the database.\n\nParameters\n\nquery (str) – The query to execute\n\nReturns\n\nThe result of the query\n\nReturn type\n\nAny\n\n\n\nasync insert(collection, data)\n\nInsert multiple records into the database.\n\nParameters\n\ncollection (str) – The collection to insert the records into\n\ndata (List[Dict[str, Any]]) – The data to insert\n\nReturns\n\nThe inserted records\n\nReturn type\n\nAny\n\n\n\nasync signin(credentials)\n\nSign in to the database.\n\nParameters\n\ncredentials (Dict[str, str]) – The credentials to sign in with\n\nReturns\n\nThe result of the sign-in operation\n\nReturn type\n\nAny\n\n\n\nasync use(namespace, database)\n\nUse a specific namespace and database.\n\nParameters\n\nnamespace (str) – The namespace to use\n\ndatabase (str) – The database to use\n\nReturns\n\nThe result of the use operation\n\nReturn type\n\nAny\n\n\n\nasync close()\n\nClose the connection pool.\n\n\n\n\n\nclass quantumengine.connection.ConnectionRegistry\n\nBases: object\n\nGlobal connection registry for multi-backend support.\n\nThis class provides a centralized registry for managing database connections\nfor multiple backends (SurrealDB, ClickHouse, etc.). It allows setting default\nconnections per backend and registering named connections that can be retrieved\nthroughout the application.\n\n\n\n_default_async_connection\n\nThe default async connection to use when none is specified (legacy)\n\nType\n\nquantumengine.connection.SurrealEngineAsyncConnection | None\n\n\n\n_default_sync_connection\n\nThe default sync connection to use when none is specified (legacy)\n\nType\n\nquantumengine.connection.SurrealEngineSyncConnection | None\n\n\n\n_async_connections\n\nDictionary of named async connections (legacy)\n\nType\n\nDict[str, quantumengine.connection.SurrealEngineAsyncConnection]\n\n\n\n_sync_connections\n\nDictionary of named sync connections (legacy)\n\nType\n\nDict[str, quantumengine.connection.SurrealEngineSyncConnection]\n\n\n\n_backend_connections\n\nDictionary of backend -> {connection_name -> connection}\n\nType\n\nDict[str, Dict[str, Any]]\n\n\n\n_default_backend_connections\n\nDictionary of backend -> default_connection\n\nType\n\nDict[str, Any]\n\n\n\nclassmethod set_default_async_connection(connection)\n\nSet the default async connection.\n\nParameters\n\nconnection (SurrealEngineAsyncConnection) – The async connection to set as default\n\n\n\nclassmethod set_default_sync_connection(connection)\n\nSet the default sync connection.\n\nParameters\n\nconnection (SurrealEngineSyncConnection) – The sync connection to set as default\n\n\n\nclassmethod set_default_connection(connection)\n\nSet the default connection based on its type.\n\nParameters\n\nconnection (SurrealEngineAsyncConnection | SurrealEngineSyncConnection) – The connection to set as default\n\n\n\nclassmethod get_default_async_connection()\n\nGet the default async connection.\n\nReturns\n\nThe default async connection\n\nRaises\n\nRuntimeError – If no default async connection has been set\n\nReturn type\n\nSurrealEngineAsyncConnection\n\n\n\nclassmethod get_default_sync_connection()\n\nGet the default sync connection.\n\nReturns\n\nThe default sync connection\n\nRaises\n\nRuntimeError – If no default sync connection has been set\n\nReturn type\n\nSurrealEngineSyncConnection\n\n\n\nclassmethod add_async_connection(name, connection)\n\nAdd a named async connection to the registry.\n\nParameters\n\nname (str) – The name to register the connection under\n\nconnection (SurrealEngineAsyncConnection) – The async connection to register\n\n\n\nclassmethod add_sync_connection(name, connection)\n\nAdd a named sync connection to the registry.\n\nParameters\n\nname (str) – The name to register the connection under\n\nconnection (SurrealEngineSyncConnection) – The sync connection to register\n\n\n\nclassmethod add_connection(name, connection)\n\nAdd a named connection to the registry based on its type.\n\nParameters\n\nname (str) – The name to register the connection under\n\nconnection (SurrealEngineAsyncConnection | SurrealEngineSyncConnection) – The connection to register\n\n\n\nclassmethod get_async_connection(name)\n\nGet a named async connection from the registry.\n\nParameters\n\nname (str) – The name of the async connection to retrieve\n\nReturns\n\nThe requested async connection\n\nRaises\n\nKeyError – If no async connection with the given name exists\n\nReturn type\n\nSurrealEngineAsyncConnection\n\n\n\nclassmethod get_sync_connection(name)\n\nGet a named sync connection from the registry.\n\nParameters\n\nname (str) – The name of the sync connection to retrieve\n\nReturns\n\nThe requested sync connection\n\nRaises\n\nKeyError – If no sync connection with the given name exists\n\nReturn type\n\nSurrealEngineSyncConnection\n\n\n\nclassmethod get_connection(name, async_mode=True)\n\nGet a named connection from the registry based on the mode.\n\nParameters\n\nname (str) – The name of the connection to retrieve\n\nasync_mode (bool) – Whether to get an async or sync connection\n\nReturns\n\nThe requested connection of the requested type\n\nRaises\n\nKeyError – If no connection of the requested type with the given name exists\n\nReturn type\n\nSurrealEngineAsyncConnection | SurrealEngineSyncConnection\n\n\n\nclassmethod register(name, connection, backend='surrealdb')\n\nRegister a connection for a specific backend.\n\nParameters\n\nname (str) – The name to register the connection under\n\nconnection (Any) – The connection object\n\nbackend (str) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\n\n\nclassmethod set_default(backend, connection_name)\n\nSet the default connection for a backend.\n\nParameters\n\nbackend (str) – The backend type\n\nconnection_name (str) – The name of the connection to set as default\n\n\n\nclassmethod get_default_connection(backend='surrealdb')\n\nGet the default connection for a backend.\n\nParameters\n\nbackend (str) – The backend type\n\nReturns\n\nThe default connection for the backend\n\nRaises\n\nValueError – If no default connection is set for the backend\n\nReturn type\n\nAny\n\n\n\nclassmethod get_connection_by_backend(name, backend='surrealdb')\n\nGet a named connection for a specific backend.\n\nParameters\n\nname (str) – The name of the connection\n\nbackend (str) – The backend type\n\nReturns\n\nThe requested connection\n\nRaises\n\nValueError – If the connection is not found\n\nReturn type\n\nAny\n\n\n\nclassmethod list_backends()\n\nList all registered backends.\n\nReturns\n\nList of backend names\n\nReturn type\n\nList[str]\n\n\n\nclassmethod list_connections(backend)\n\nList all connections for a backend.\n\nParameters\n\nbackend (str) – The backend type\n\nReturns\n\nList of connection names for the backend\n\nReturn type\n\nList[str]\n\n\n\nclass quantumengine.connection.SurrealEngineAsyncConnection(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False, use_pool=False, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nBases: object\n\nAsynchronous connection manager for SurrealDB.\n\nThis class manages the asynchronous connection to a SurrealDB database, providing methods\nfor connecting, disconnecting, and executing transactions. It also provides\naccess to the database through the db property.\n\n\n\n\n\nurl\n\nThe URL of the SurrealDB server\n\n\n\nnamespace\n\nThe namespace to use\n\n\n\ndatabase\n\nThe database to use\n\n\n\nusername\n\nThe username for authentication\n\n\n\npassword\n\nThe password for authentication\n\n\n\nclient\n\nThe SurrealDB async client instance or ConnectionPoolClient\n\n\n\nuse_pool\n\nWhether to use a connection pool\n\n\n\npool\n\nThe connection pool if use_pool is True\n\n\n\npool_size\n\nThe size of the connection pool\n\n\n\nmax_idle_time\n\nMaximum time in seconds a connection can be idle before being closed\n\n\n\n__init__(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False, use_pool=False, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nInitialize a new SurrealEngineAsyncConnection.\n\nParameters\n\nurl (str | None) – The URL of the SurrealDB server\n\nnamespace (str | None) – The namespace to use\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\nname (str | None) – The name to register this connection under in the registry\n\nmake_default (bool) – Whether to set this connection as the default\n\nuse_pool (bool) – Whether to use a connection pool\n\npool_size (int) – The size of the connection pool\n\nmax_idle_time (int) – Maximum time in seconds a connection can be idle before being closed\n\nconnect_timeout (int) – Timeout in seconds for establishing a connection\n\noperation_timeout (int) – Timeout in seconds for operations\n\nretry_limit (int) – Maximum number of retries for failed operations\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\nvalidate_on_borrow (bool) – Whether to validate connections when borrowing from the pool\n\n\n\nasync __aenter__()\n\nEnter the async context manager.\n\nReturns\n\nThe connection instance\n\nReturn type\n\nSurrealEngineAsyncConnection\n\n\n\nasync __aexit__(exc_type, exc_val, exc_tb)\n\nExit the async context manager.\n\nParameters\n\nexc_type (Type[BaseException] | None) – The exception type, if an exception was raised\n\nexc_val (BaseException | None) – The exception value, if an exception was raised\n\nexc_tb (Any | None) – The exception traceback, if an exception was raised\n\n\n\nproperty db: SurrealEngine\n\nGet dynamic table accessor.\n\nReturns\n\nA SurrealEngine instance for accessing tables dynamically\n\n\n\nasync connect()\n\nConnect to the database.\n\nThis method creates a new client if one doesn’t exist. If use_pool is True,\nit creates a connection pool and a ConnectionPoolClient. Otherwise, it creates\na direct connection to the database.\n\nReturns\n\nThe SurrealDB client instance or ConnectionPoolClient\n\nReturn type\n\nAny\n\n\n\nasync disconnect()\n\nDisconnect from the database.\n\nThis method closes the client connection if one exists. If use_pool is True,\nit closes the connection pool.\n\n\n\n\n\nasync transaction(coroutines)\n\nExecute multiple operations in a transaction.\n\nThis method executes a list of coroutines within a transaction,\ncommitting the transaction if all operations succeed or canceling\nit if any operation fails.\n\nParameters\n\ncoroutines (list) – List of coroutines to execute in the transaction\n\nReturns\n\nList of results from the coroutines\n\nRaises\n\nException – If any operation in the transaction fails\n\nReturn type\n\nlist\n\n\n\nquantumengine.connection.create_connection(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False, async_mode=True, use_pool=False, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True, auto_connect=False, backend='surrealdb', **backend_kwargs)\n\nFactory function to create a connection for the specified backend.\n\nParameters\n\nurl (str | None) – The URL of the database server (for SurrealDB) or host (for ClickHouse)\n\nnamespace (str | None) – The namespace to use (SurrealDB only)\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\nname (str | None) – The name to register this connection under in the registry\n\nmake_default (bool) – Whether to set this connection as the default\n\nasync_mode (bool) – Whether to create an async or sync connection (SurrealDB only)\n\nuse_pool (bool) – Whether to use a connection pool (SurrealDB async_mode only)\n\npool_size (int) – The size of the connection pool\n\nmax_idle_time (int) – Maximum time in seconds a connection can be idle before being closed\n\nconnect_timeout (int) – Timeout in seconds for establishing a connection\n\noperation_timeout (int) – Timeout in seconds for operations\n\nretry_limit (int) – Maximum number of retries for failed operations\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\nvalidate_on_borrow (bool) – Whether to validate connections when borrowing from the pool\n\nauto_connect (bool) – Whether to automatically connect the connection\n\nbackend (str) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\n**backend_kwargs – Additional backend-specific connection parameters\n\nReturns\n\nA connection instance for the specified backend\n\nReturn type\n\nAny\n\nExamples\n\nSurrealDB connection (default):\n\nClickHouse connection:\n\n\n\nclass quantumengine.connection.SurrealEngineSyncConnection(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False)\n\nBases: object\n\nSynchronous connection manager for SurrealDB.\n\nThis class manages the synchronous connection to a SurrealDB database, providing methods\nfor connecting, disconnecting, and executing transactions. It also provides\naccess to the database through the db property.\n\n\n\n\n\nurl\n\nThe URL of the SurrealDB server\n\n\n\nnamespace\n\nThe namespace to use\n\n\n\ndatabase\n\nThe database to use\n\n\n\nusername\n\nThe username for authentication\n\n\n\npassword\n\nThe password for authentication\n\n\n\nclient\n\nThe SurrealDB sync client instance\n\n\n\n__init__(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False)\n\nInitialize a new SurrealEngineSyncConnection.\n\nParameters\n\nurl (str | None) – The URL of the SurrealDB server\n\nnamespace (str | None) – The namespace to use\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\nname (str | None) – The name to register this connection under in the registry\n\nmake_default (bool) – Whether to set this connection as the default\n\n\n\n__enter__()\n\nEnter the sync context manager.\n\nReturns\n\nThe connection instance\n\nReturn type\n\nSurrealEngineSyncConnection\n\n\n\n__exit__(exc_type, exc_val, exc_tb)\n\nExit the sync context manager.\n\nParameters\n\nexc_type (Type[BaseException] | None) – The exception type, if an exception was raised\n\nexc_val (BaseException | None) – The exception value, if an exception was raised\n\nexc_tb (Any | None) – The exception traceback, if an exception was raised\n\n\n\nproperty db: SurrealEngine\n\nGet dynamic table accessor.\n\nReturns\n\nA SurrealEngine instance for accessing tables dynamically\n\n\n\nconnect()\n\nConnect to the database.\n\nThis method creates a new client if one doesn’t exist, signs in if\ncredentials are provided, and sets the namespace and database.\n\nReturns\n\nThe SurrealDB client instance\n\nReturn type\n\nAny\n\n\n\ndisconnect()\n\nDisconnect from the database.\n\nThis method closes the client connection if one exists.\n\n\n\n\n\ntransaction(callables)\n\nExecute multiple operations in a transaction.\n\nThis method executes a list of callables within a transaction,\ncommitting the transaction if all operations succeed or canceling\nit if any operation fails.\n\nParameters\n\ncallables (list) – List of callables to execute in the transaction\n\nReturns\n\nList of results from the callables\n\nRaises\n\nException – If any operation in the transaction fails\n\nReturn type\n\nlist"},{"objectID":"Home","href":"api/backends.html#backend-configuration","title":"Backends API > Backend Configuration","text":"Backend Configuration\n\nBackend configuration and management utilities for connecting to different database systems."},{"objectID":"Home","href":"api/backends.html#configuration-functions","title":"Backends API > Configuration Functions","text":"Configuration Functions"},{"objectID":"Home","href":"api/backends.html#connection-functions","title":"Backends API > Connection Functions","text":"Connection Functions"},{"objectID":"Home","href":"api/backends.html#backend-implementations","title":"Backends API > Backend Implementations","text":"Backend Implementations"},{"objectID":"Home","href":"api/backends.html#surrealdb-backend","title":"Backends API > SurrealDB Backend","text":"SurrealDB Backend\n\nSurrealDB-specific backend implementation for multi-model database operations.\n\n\n\nclass quantumengine.backends.surrealdb.SurrealDBBackend(connection)\n\nBases: BaseBackend\n\nSurrealDB backend implementation.\n\nThis backend implements the BaseBackend interface for SurrealDB,\nproviding all the core database operations using SurrealQL.\n\n\n\n\n\n__init__(connection)\n\nInitialize the SurrealDB backend.\n\nParameters\n\nconnection (Any) – SurrealEngine connection (async or sync)\n\n\n\nasync create_table(document_class, **kwargs)\n\nCreate a table/collection for the document class.\n\nParameters\n\ndocument_class (Type) – The document class to create a table for\n\n**kwargs – Backend-specific options:\n- schemafull: Whether to create a schemafull table (default: True)\n\n\n\nasync insert(table_name, data)\n\nInsert a single document.\n\nParameters\n\ntable_name (str) – The table name\n\ndata (Dict[str, Any]) – The document data to insert\n\nReturns\n\nThe inserted document with any generated fields\n\nReturn type\n\nDict[str, Any]\n\n\n\nasync insert_many(table_name, data)\n\nInsert multiple documents efficiently.\n\nParameters\n\ntable_name (str) – The table name\n\ndata (List[Dict[str, Any]]) – List of documents to insert\n\nReturns\n\nList of inserted documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync select(table_name, conditions, fields=None, limit=None, offset=None, order_by=None)\n\nSelect documents from a table.\n\nParameters\n\ntable_name (str) – The table name\n\nconditions (List[str]) – List of condition strings\n\nfields (List[str] | None) – List of fields to return (None for all)\n\nlimit (int | None) – Maximum number of results\n\noffset (int | None) – Number of results to skip (START in SurrealDB)\n\norder_by (List[tuple[str, str]] | None) – List of (field, direction) tuples\n\nReturns\n\nList of matching documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync select_by_ids(table_name, ids)\n\nSelect documents by their IDs using direct record access.\n\nParameters\n\ntable_name (str) – The table name\n\nids (List[Any]) – List of IDs to select\n\nReturns\n\nList of matching documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync count(table_name, conditions)\n\nCount documents matching conditions.\n\nParameters\n\ntable_name (str) – The table name\n\nconditions (List[str]) – List of condition strings\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\nasync update(table_name, conditions, data)\n\nUpdate documents matching conditions.\n\nParameters\n\ntable_name (str) – The table name\n\nconditions (List[str]) – List of condition strings\n\ndata (Dict[str, Any]) – The fields to update\n\nReturns\n\nList of updated documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync delete(table_name, conditions)\n\nDelete documents matching conditions.\n\nParameters\n\ntable_name (str) – The table name\n\nconditions (List[str]) – List of condition strings\n\nReturns\n\nNumber of deleted documents\n\nReturn type\n\nint\n\n\n\nasync drop_table(table_name, if_exists=True)\n\nDrop a table using SurrealDB’s REMOVE TABLE statement.\n\nParameters\n\ntable_name (str) – The table name to drop\n\nif_exists (bool) – Whether to use IF EXISTS clause to avoid errors if table doesn’t exist\n\n\n\nasync execute_raw(query, params=None)\n\nExecute a raw SurrealQL query.\n\nParameters\n\nquery (str) – The raw SurrealQL query string\n\nparams (Dict[str, Any] | None) – Optional query parameters (not used - SurrealDB handles this)\n\nReturns\n\nQuery result\n\nReturn type\n\nAny\n\n\n\nbuild_condition(field, operator, value)\n\nBuild a condition string for SurrealQL.\n\nParameters\n\nfield (str) – The field name\n\noperator (str) – The operator (=, !=, >, <, >=, <=, ~, !~, etc.)\n\nvalue (Any) – The value to compare against\n\nReturns\n\nA condition string in SurrealQL\n\nReturn type\n\nstr\n\n\n\nget_field_type(field)\n\nGet the SurrealDB field type for a SurrealEngine field.\n\nParameters\n\nfield (Any) – A SurrealEngine field instance\n\nReturns\n\nThe corresponding SurrealDB field type\n\nReturn type\n\nstr\n\n\n\nformat_value(value, field_type=None)\n\nFormat a value for SurrealQL.\n\nParameters\n\nvalue (Any) – The value to format\n\nfield_type (str | None) – Optional field type hint\n\nReturns\n\nThe formatted value as a string for SurrealQL\n\nReturn type\n\nstr\n\n\n\nasync begin_transaction()\n\nBegin a transaction.\n\nReturns\n\nTransaction object (SurrealDB client for now)\n\nReturn type\n\nAny\n\n\n\nasync commit_transaction(transaction)\n\nCommit a transaction.\n\nParameters\n\ntransaction (Any) – The transaction object\n\n\n\nasync rollback_transaction(transaction)\n\nRollback a transaction.\n\nParameters\n\ntransaction (Any) – The transaction object\n\n\n\nsupports_transactions()\n\nSurrealDB supports transactions within query batches.\n\n\n\n\n\nsupports_references()\n\nSurrealDB supports references between records.\n\n\n\n\n\nsupports_graph_relations()\n\nSurrealDB has native graph relation support.\n\n\n\n\n\nsupports_direct_record_access()\n\nSurrealDB supports direct record access syntax.\n\n\n\n\n\nsupports_explain()\n\nSurrealDB supports EXPLAIN queries.\n\n\n\n\n\nsupports_indexes()\n\nSurrealDB supports indexes.\n\n\n\n\n\nsupports_full_text_search()\n\nSurrealDB supports full-text search.\n\n\n\n\n\nsupports_bulk_operations()\n\nSurrealDB supports bulk operations.\n\n\n\n\n\nget_optimized_methods()\n\nGet SurrealDB-specific optimization methods.\n\n\n\n\n\nasync create_relation(from_table, from_id, relation_name, to_table, to_id, attributes=None)\n\nCreate a relation using SurrealDB’s RELATE statement.\n\nParameters\n\nfrom_table (str) – Source table name\n\nfrom_id (str) – Source document ID\n\nrelation_name (str) – Name of the relation\n\nto_table (str) – Target table name\n\nto_id (str) – Target document ID\n\nattributes (Dict[str, Any] | None) – Optional attributes for the relation\n\nReturns\n\nThe created relation record\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nasync delete_relation(from_table, from_id, relation_name, to_table=None, to_id=None)\n\nDelete relations using SurrealDB’s DELETE statement.\n\nParameters\n\nfrom_table (str) – Source table name\n\nfrom_id (str) – Source document ID\n\nrelation_name (str) – Name of the relation\n\nto_table (str | None) – Target table name (optional)\n\nto_id (str | None) – Target document ID (optional)\n\nReturns\n\nNumber of relations deleted\n\nReturn type\n\nint\n\n\n\nasync query_relations(from_table, from_id, relation_name, direction='out')\n\nQuery relations using SurrealDB’s graph traversal.\n\nParameters\n\nfrom_table (str) – Source table name\n\nfrom_id (str) – Source document ID\n\nrelation_name (str) – Name of the relation\n\ndirection (str) – Direction of relations (‘out’, ‘in’, ‘both’)\n\nReturns\n\nList of related documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync create_materialized_view(materialized_document_class)\n\nCreate a SurrealDB materialized view using DEFINE TABLE … AS SELECT.\n\nParameters\n\nmaterialized_document_class (Type) – The MaterializedDocument class\n\n\n\nasync drop_materialized_view(materialized_document_class)\n\nDrop a SurrealDB materialized view.\n\nParameters\n\nmaterialized_document_class (Type) – The MaterializedDocument class\n\n\n\nasync refresh_materialized_view(materialized_document_class)\n\nRefresh a SurrealDB materialized view.\n\nNote: SurrealDB materialized views update automatically when data changes.\nThis is a no-op for SurrealDB.\n\nParameters\n\nmaterialized_document_class (Type) – The MaterializedDocument class"},{"objectID":"Home","href":"api/backends.html#clickhouse-backend","title":"Backends API > ClickHouse Backend","text":"ClickHouse Backend\n\nClickHouse-specific backend implementation for analytical workloads.\n\n\n\nclass quantumengine.backends.clickhouse.ClickHouseBackend(connection)\n\nBases: BaseBackend\n\nClickHouse backend implementation using clickhouse-connect.\n\n\n\n\n\n__init__(connection)\n\nInitialize the ClickHouse backend.\n\nParameters\n\nconnection (Any) – ClickHouse client connection\n\n\n\nasync create_table(document_class, **kwargs)\n\nCreate a table for the document class with advanced ClickHouse features.\n\nParameters\n\ndocument_class (Type) – The document class to create a table for\n\n**kwargs – Backend-specific options (override Meta settings):\n- engine: ClickHouse table engine (default: MergeTree)\n- engine_params: Parameters for the engine (e.g., [‘date_collected’] for ReplacingMergeTree)\n- order_by: Order by columns (default: [‘id’])\n- partition_by: Partition by expression\n- primary_key: Primary key columns\n- settings: Additional table settings\n- ttl: TTL expression for data lifecycle\n\n\n\nasync insert(table_name, data)\n\nInsert a single document.\n\nParameters\n\ntable_name (str) – The table name\n\ndata (Dict[str, Any]) – The document data to insert\n\nReturns\n\nThe inserted document with generated id if not provided\n\nReturn type\n\nDict[str, Any]\n\n\n\nasync insert_many(table_name, data)\n\nInsert multiple documents efficiently.\n\nParameters\n\ntable_name (str) – The table name\n\ndata (List[Dict[str, Any]]) – List of documents to insert\n\nReturns\n\nList of inserted documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync select(table_name, conditions, fields=None, limit=None, offset=None, order_by=None)\n\nSelect documents from a table.\n\nParameters\n\ntable_name (str) – The table name\n\nconditions (List[str]) – List of condition strings\n\nfields (List[str] | None) – List of fields to return (None for all)\n\nlimit (int | None) – Maximum number of results\n\noffset (int | None) – Number of results to skip\n\norder_by (List[tuple[str, str]] | None) – List of (field, direction) tuples\n\nReturns\n\nList of matching documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync count(table_name, conditions)\n\nCount documents matching conditions.\n\nParameters\n\ntable_name (str) – The table name\n\nconditions (List[str]) – List of condition strings\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\nasync update(table_name, conditions, data)\n\nUpdate documents matching conditions.\n\nNote: ClickHouse uses ALTER TABLE UPDATE which is asynchronous\nand doesn’t immediately return updated rows.\n\nParameters\n\ntable_name (str) – The table name\n\nconditions (List[str]) – List of condition strings\n\ndata (Dict[str, Any]) – The fields to update\n\nReturns\n\nList of documents that will be updated\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync delete(table_name, conditions)\n\nDelete documents matching conditions.\n\nNote: ClickHouse uses ALTER TABLE DELETE which is asynchronous.\n\nParameters\n\ntable_name (str) – The table name\n\nconditions (List[str]) – List of condition strings\n\nReturns\n\nNumber of documents that will be deleted\n\nReturn type\n\nint\n\n\n\nasync drop_table(table_name, if_exists=True)\n\nDrop a table using ClickHouse’s DROP TABLE statement.\n\nParameters\n\ntable_name (str) – The table name to drop\n\nif_exists (bool) – Whether to use IF EXISTS clause to avoid errors if table doesn’t exist\n\n\n\nasync execute_raw(query, params=None)\n\nExecute a raw query.\n\nParameters\n\nquery (str) – The raw query string\n\nparams (Dict[str, Any] | None) – Optional query parameters\n\nReturns\n\nQuery result\n\nReturn type\n\nAny\n\n\n\nbuild_condition(field, operator, value)\n\nBuild a condition string for ClickHouse SQL.\n\nParameters\n\nfield (str) – The field name\n\noperator (str) – The operator\n\nvalue (Any) – The value to compare against\n\nReturns\n\nA condition string in ClickHouse SQL\n\nReturn type\n\nstr\n\n\n\nget_field_type(field)\n\nGet the ClickHouse field type for a QuantumORM field.\n\nParameters\n\nfield (Any) – A QuantumORM field instance\n\nReturns\n\nThe corresponding ClickHouse field type\n\nReturn type\n\nstr\n\n\n\nformat_value(value, field_type=None)\n\nFormat a value for ClickHouse SQL.\n\nParameters\n\nvalue (Any) – The value to format\n\nfield_type (str | None) – Optional field type hint\n\nReturns\n\nThe formatted value as a string\n\nReturn type\n\nstr\n\n\n\nasync begin_transaction()\n\nBegin a transaction.\n\nNote: ClickHouse has limited transaction support.\n\n\n\n\n\nasync commit_transaction(transaction)\n\nCommit a transaction.\n\nNote: No-op for ClickHouse.\n\n\n\n\n\nasync rollback_transaction(transaction)\n\nRollback a transaction.\n\nNote: No-op for ClickHouse.\n\n\n\n\n\nsupports_transactions()\n\nClickHouse has limited transaction support.\n\n\n\n\n\nsupports_references()\n\nClickHouse doesn’t support references between tables.\n\n\n\n\n\nsupports_graph_relations()\n\nClickHouse doesn’t support graph relations.\n\n\n\n\n\nsupports_direct_record_access()\n\nClickHouse doesn’t support direct record access syntax.\n\n\n\n\n\nsupports_explain()\n\nClickHouse supports EXPLAIN queries.\n\n\n\n\n\nsupports_indexes()\n\nClickHouse supports indexes.\n\n\n\n\n\nsupports_full_text_search()\n\nClickHouse has limited full-text search support.\n\n\n\n\n\nsupports_bulk_operations()\n\nClickHouse excels at bulk operations.\n\n\n\n\n\nget_optimized_methods()\n\nGet ClickHouse-specific optimization methods.\n\n\n\n\n\nasync create_materialized_view(materialized_document_class)\n\nCreate a ClickHouse materialized view.\n\nParameters\n\nmaterialized_document_class (Type) – The MaterializedDocument class\n\n\n\nasync drop_materialized_view(materialized_document_class)\n\nDrop a ClickHouse materialized view.\n\nParameters\n\nmaterialized_document_class (Type) – The MaterializedDocument class\n\n\n\nasync refresh_materialized_view(materialized_document_class)\n\nRefresh a ClickHouse materialized view.\n\nNote: ClickHouse materialized views update automatically as data arrives.\nThis is a no-op for ClickHouse.\n\nParameters\n\nmaterialized_document_class (Type) – The MaterializedDocument class"},{"objectID":"Home","href":"api/backends.html#backend-interface","title":"Backends API > Backend Interface","text":"Backend Interface"},{"objectID":"Home","href":"api/backends.html#base-backend-classes","title":"Backends API > Base Backend Classes","text":"Base Backend Classes\n\nAbstract base classes that define the backend interface.\n\n\n\nclass quantumengine.backends.base.BaseBackend(connection)\n\nBases: ABC\n\nAbstract base class for database backends.\n\nAll database backends must implement this interface to work with QuantumEngine.\n\n\n\n\n\n__init__(connection)\n\nInitialize the backend with a connection.\n\nParameters\n\nconnection (Any) – The database connection object\n\n\n\nabstractmethod async create_table(document_class, **kwargs)\n\nCreate a table/collection for the document class.\n\nParameters\n\ndocument_class (Type) – The document class to create a table for\n\n**kwargs – Backend-specific options (e.g., schemafull for SurrealDB)\n\n\n\nabstractmethod async insert(table_name, data)\n\nInsert a single document.\n\nParameters\n\ntable_name (str) – The table/collection name\n\ndata (Dict[str, Any]) – The document data to insert\n\nReturns\n\nThe inserted document with any generated fields (e.g., id)\n\nReturn type\n\nDict[str, Any]\n\n\n\nabstractmethod async insert_many(table_name, data)\n\nInsert multiple documents.\n\nParameters\n\ntable_name (str) – The table/collection name\n\ndata (List[Dict[str, Any]]) – List of documents to insert\n\nReturns\n\nList of inserted documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nabstractmethod async select(table_name, conditions, fields=None, limit=None, offset=None, order_by=None)\n\nSelect documents from a table.\n\nParameters\n\ntable_name (str) – The table/collection name\n\nconditions (List[str]) – List of condition strings (already formatted by build_condition)\n\nfields (List[str] | None) – List of fields to return (None for all fields)\n\nlimit (int | None) – Maximum number of results\n\noffset (int | None) – Number of results to skip\n\norder_by (List[tuple[str, str]] | None) – List of (field, direction) tuples for ordering\n\nReturns\n\nList of matching documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nabstractmethod async count(table_name, conditions)\n\nCount documents matching conditions.\n\nParameters\n\ntable_name (str) – The table/collection name\n\nconditions (List[str]) – List of condition strings\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\nabstractmethod async update(table_name, conditions, data)\n\nUpdate documents matching conditions.\n\nParameters\n\ntable_name (str) – The table/collection name\n\nconditions (List[str]) – List of condition strings\n\ndata (Dict[str, Any]) – The fields to update\n\nReturns\n\nList of updated documents\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nabstractmethod async delete(table_name, conditions)\n\nDelete documents matching conditions.\n\nParameters\n\ntable_name (str) – The table/collection name\n\nconditions (List[str]) – List of condition strings\n\nReturns\n\nNumber of deleted documents\n\nReturn type\n\nint\n\n\n\nabstractmethod async drop_table(table_name, if_exists=True)\n\nDrop a table/collection.\n\nParameters\n\ntable_name (str) – The table/collection name to drop\n\nif_exists (bool) – Whether to use IF EXISTS clause to avoid errors if table doesn’t exist\n\n\n\nabstractmethod async execute_raw(query, params=None)\n\nExecute a raw query.\n\nParameters\n\nquery (str) – The raw query string\n\nparams (Dict[str, Any] | None) – Optional query parameters\n\nReturns\n\nQuery result (backend-specific)\n\nReturn type\n\nAny\n\n\n\nabstractmethod build_condition(field, operator, value)\n\nBuild a condition string for the backend’s query language.\n\nParameters\n\nfield (str) – The field name\n\noperator (str) – The operator (=, !=, >, <, >=, <=, in, contains, etc.)\n\nvalue (Any) – The value to compare against\n\nReturns\n\nA condition string in the backend’s query language\n\nReturn type\n\nstr\n\n\n\nabstractmethod get_field_type(field)\n\nGet the database field type for a SurrealEngine field.\n\nParameters\n\nfield (Any) – A SurrealEngine field instance\n\nReturns\n\nThe corresponding database field type\n\nReturn type\n\nstr\n\n\n\nabstractmethod format_value(value, field_type=None)\n\nFormat a value for the backend’s query language.\n\nParameters\n\nvalue (Any) – The value to format\n\nfield_type (str | None) – Optional field type hint\n\nReturns\n\nThe formatted value\n\nReturn type\n\nAny\n\n\n\nabstractmethod async begin_transaction()\n\nBegin a transaction.\n\nReturns\n\nTransaction object (backend-specific)\n\nReturn type\n\nAny\n\n\n\nabstractmethod async commit_transaction(transaction)\n\nCommit a transaction.\n\nParameters\n\ntransaction (Any) – The transaction object\n\n\n\nabstractmethod async rollback_transaction(transaction)\n\nRollback a transaction.\n\nParameters\n\ntransaction (Any) – The transaction object\n\n\n\nsupports_transactions()\n\nCheck if the backend supports transactions.\n\nReturns\n\nTrue if transactions are supported, False otherwise\n\nReturn type\n\nbool\n\n\n\nsupports_references()\n\nCheck if the backend supports references/foreign keys.\n\nReturns\n\nTrue if references are supported, False otherwise\n\nReturn type\n\nbool\n\n\n\nsupports_graph_relations()\n\nCheck if the backend supports graph-style relations.\n\nReturns\n\nTrue if graph relations are supported, False otherwise\n\nReturn type\n\nbool\n\n\n\nsupports_direct_record_access()\n\nCheck if the backend supports direct record access syntax.\n\nReturns\n\nTrue if direct record access is supported, False otherwise\n\nReturn type\n\nbool\n\n\n\nsupports_explain()\n\nCheck if the backend supports EXPLAIN queries.\n\nReturns\n\nTrue if EXPLAIN is supported, False otherwise\n\nReturn type\n\nbool\n\n\n\nsupports_indexes()\n\nCheck if the backend supports indexes.\n\nReturns\n\nTrue if indexes are supported, False otherwise\n\nReturn type\n\nbool\n\n\n\nsupports_full_text_search()\n\nCheck if the backend supports full-text search.\n\nReturns\n\nTrue if full-text search is supported, False otherwise\n\nReturn type\n\nbool\n\n\n\nsupports_bulk_operations()\n\nCheck if the backend supports bulk insert/update/delete operations.\n\nReturns\n\nTrue if bulk operations are supported, False otherwise\n\nReturn type\n\nbool\n\n\n\nget_optimized_methods()\n\nGet backend-specific optimization methods.\n\nReturns\n\nDictionary mapping operation names to backend-specific implementations\n\nReturn type\n\nDict[str, str]\n\n\n\nsupports_schemas()\n\nCheck if this backend supports strict schemas.\n\nReturns\n\nTrue if schemas are supported\n\nReturn type\n\nbool\n\n\n\nget_capabilities()\n\nGet backend capabilities.\n\nReturns\n\nDictionary of capability flags\n\nReturn type\n\nDict[str, bool]\n\n\n\nasync create_relation(from_table, from_id, relation_name, to_table, to_id, attributes=None)\n\nCreate a relation between two documents.\n\nParameters\n\nfrom_table (str) – Source table name\n\nfrom_id (str) – Source document ID\n\nrelation_name (str) – Name of the relation\n\nto_table (str) – Target table name\n\nto_id (str) – Target document ID\n\nattributes (Dict[str, Any] | None) – Optional attributes for the relation\n\nReturns\n\nThe created relation record or None\n\nRaises\n\nNotImplementedError – If backend doesn’t support graph relations\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nasync delete_relation(from_table, from_id, relation_name, to_table=None, to_id=None)\n\nDelete relations.\n\nParameters\n\nfrom_table (str) – Source table name\n\nfrom_id (str) – Source document ID\n\nrelation_name (str) – Name of the relation\n\nto_table (str | None) – Target table name (optional)\n\nto_id (str | None) – Target document ID (optional)\n\nReturns\n\nNumber of relations deleted\n\nRaises\n\nNotImplementedError – If backend doesn’t support graph relations\n\nReturn type\n\nint\n\n\n\nasync query_relations(from_table, from_id, relation_name, direction='out')\n\nQuery relations from a document.\n\nParameters\n\nfrom_table (str) – Source table name\n\nfrom_id (str) – Source document ID\n\nrelation_name (str) – Name of the relation\n\ndirection (str) – Direction of relations (‘out’, ‘in’, ‘both’)\n\nReturns\n\nList of related documents\n\nRaises\n\nNotImplementedError – If backend doesn’t support graph relations\n\nReturn type\n\nList[Dict[str, Any]]"},{"objectID":"Home","href":"api/backends.html#backend-registry","title":"Backends API > Backend Registry","text":"Backend Registry\n\nRegistry system for managing available backends."},{"objectID":"Home","href":"api/backends.html#schema-management","title":"Backends API > Schema Management","text":"Schema Management\n\nSchema definition and management for different backends.\n\n\n\n\n\n\n\nquantumengine.schema.get_document_classes(module_name)\n\nGet all Document classes defined in a module.\n\nParameters\n\nmodule_name (str) – The name of the module to search\n\nReturns\n\nA list of Document classes defined in the module\n\nReturn type\n\nList[Type[Document]]\n\n\n\nasync quantumengine.schema.create_tables_from_module(module_name, connection=None, schemafull=True)\n\nCreate tables for all Document classes in a module asynchronously.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nconnection (Any | None) – Optional connection to use\n\nschemafull (bool) – Whether to create SCHEMAFULL tables (default: True)\n\n\n\nquantumengine.schema.create_tables_from_module_sync(module_name, connection=None, schemafull=True)\n\nCreate tables for all Document classes in a module synchronously.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nconnection (Any | None) – Optional connection to use\n\nschemafull (bool) – Whether to create SCHEMAFULL tables (default: True)\n\n\n\nquantumengine.schema.generate_schema_statements(document_class, schemafull=True)\n\nGenerate SurrealDB schema statements for a Document class.\n\nThis function generates DEFINE TABLE and DEFINE FIELD statements for a Document class\nwithout executing them. This is useful for generating schema migration scripts.\n\nParameters\n\ndocument_class (Type[Document]) – The Document class to generate statements for\n\nschemafull (bool) – Whether to generate SCHEMAFULL tables (default: True)\n\nReturns\n\nA list of SurrealDB schema statements\n\nReturn type\n\nList[str]\n\n\n\nquantumengine.schema.generate_schema_statements_from_module(module_name, schemafull=True)\n\nGenerate SurrealDB schema statements for all Document classes in a module.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nschemafull (bool) – Whether to generate SCHEMAFULL tables (default: True)\n\nReturns\n\nA dictionary mapping class names to lists of SurrealDB schema statements\n\nReturn type\n\nDict[str, List[str]]\n\n\n\nquantumengine.schema.generate_drop_statements(document_class)\n\nGenerate SurrealDB DROP statements for a Document class.\n\nThis function generates REMOVE TABLE and REMOVE FIELD/INDEX statements for a Document class.\nUseful for generating down migration scripts.\n\nParameters\n\ndocument_class (Type[Document]) – The Document class to generate drop statements for\n\nReturns\n\nA list of SurrealDB drop statements\n\nReturn type\n\nList[str]\n\n\n\nquantumengine.schema.generate_drop_statements_from_module(module_name)\n\nGenerate SurrealDB DROP statements for all Document classes in a module.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nReturns\n\nA dictionary mapping class names to lists of SurrealDB drop statements\n\nReturn type\n\nDict[str, List[str]]\n\n\n\nquantumengine.schema.generate_migration_statements(old_document_class, new_document_class, schemafull=True)\n\nGenerate migration statements between two versions of a Document class.\n\nParameters\n\nold_document_class (Type[Document]) – The old version of the Document class\n\nnew_document_class (Type[Document]) – The new version of the Document class\n\nschemafull (bool) – Whether to generate statements for SCHEMAFULL tables\n\nReturns\n\nA dictionary with ‘up’ and ‘down’ migration statements\n\nReturn type\n\nDict[str, List[str]]\n\n\n\nasync quantumengine.schema.drop_tables_from_module(module_name, connection=None)\n\nDrop tables for all Document classes in a module asynchronously.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nconnection (Any | None) – Optional connection to use\n\n\n\nquantumengine.schema.drop_tables_from_module_sync(module_name, connection=None)\n\nDrop tables for all Document classes in a module synchronously.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nconnection (Any | None) – Optional connection to use"},{"objectID":"Home","href":"api/backends.html#schemaless-operations","title":"Backends API > Schemaless Operations","text":"Schemaless Operations\n\nSupport for schemaless document operations.\n\n\n\n\n\n\n\nclass quantumengine.schemaless.SchemalessQuerySet(table_name, connection)\n\nBases: BaseQuerySet\n\nQuerySet for schemaless operations.\n\nThis class provides a query builder for tables without a predefined schema.\nIt extends BaseQuerySet to provide methods for querying and manipulating\ndocuments in a schemaless manner.\n\n\n\n\n\ntable_name\n\nThe name of the table to query\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\n__init__(table_name, connection)\n\nInitialize a new SchemalessQuerySet.\n\nParameters\n\ntable_name (str) – The name of the table to query\n\nconnection (Any) – The database connection to use for queries\n\n\n\nasync all()\n\nExecute the query and return all results asynchronously.\n\nThis method builds and executes the query, then processes the results\nbased on whether a matching document class is found. If a matching\ndocument class is found, the results are converted to instances of that\nclass. Otherwise, they are converted to SimpleNamespace objects.\n\nReturns\n\nList of results, either document instances or SimpleNamespace objects\n\nReturn type\n\nList[Any]\n\n\n\nall_sync()\n\nExecute the query and return all results synchronously.\n\nThis method builds and executes the query, then processes the results\nbased on whether a matching document class is found. If a matching\ndocument class is found, the results are converted to instances of that\nclass. Otherwise, they are converted to SimpleNamespace objects.\n\nReturns\n\nList of results, either document instances or SimpleNamespace objects\n\nReturn type\n\nList[Any]\n\n\n\nasync get(**kwargs)\n\nGet a single document matching the query asynchronously.\n\nThis method provides special handling for ID-based lookups, using the\ndirect select method with RecordID. For non-ID lookups, it falls back\nto the base class implementation.\n\nParameters\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nThe matching document\n\nRaises\n\nDoesNotExist – If no matching document is found\n\nMultipleObjectsReturned – If multiple matching documents are found\n\nReturn type\n\nAny\n\n\n\nget_sync(**kwargs)\n\nGet a single document matching the query synchronously.\n\nThis method provides special handling for ID-based lookups, using the\ndirect select method with RecordID. For non-ID lookups, it falls back\nto the base class implementation.\n\nParameters\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nThe matching document\n\nRaises\n\nDoesNotExist – If no matching document is found\n\nMultipleObjectsReturned – If multiple matching documents are found\n\nReturn type\n\nAny\n\n\n\nasync bulk_create(documents, batch_size=1000, return_documents=True)\n\nCreate multiple documents in a single operation asynchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally return the created documents.\n\nParameters\n\ndocuments (List[Dict[str, Any]]) – List of dictionaries representing documents to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[Any] | int\n\n\n\nbulk_create_sync(documents, batch_size=1000, return_documents=True)\n\nCreate multiple documents in a single operation synchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally return the created documents.\n\nParameters\n\ndocuments (List[Dict[str, Any]]) – List of dictionaries representing documents to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[Any] | int\n\n\n\nclass quantumengine.schemaless.SchemalessTable(name, connection)\n\nBases: object\n\nDynamic table accessor.\n\nThis class provides access to a specific table in the database without\nrequiring a predefined schema. It allows querying the table using the\nobjects property or by calling the instance directly with filters.\n\n\n\n\n\nname\n\nThe name of the table\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\n__init__(name, connection)\n\nInitialize a new SchemalessTable.\n\nParameters\n\nname (str) – The name of the table\n\nconnection (Any) – The database connection to use for queries\n\n\n\nasync relate(from_id, relation, to_id, **attrs)\n\nCreate a relation between two records asynchronously.\n\nThis method creates a relation between two records in the database.\nIt constructs a RELATE query with the given relation name and attributes.\n\nParameters\n\nfrom_id (str | RecordID) – The ID of the record to create the relation from\n\nrelation (str) – The name of the relation\n\nto_id (str | RecordID) – The ID of the record to create the relation to\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nReturn type\n\nAny | None\n\n\n\nrelate_sync(from_id, relation, to_id, **attrs)\n\nCreate a relation between two records synchronously.\n\nThis method creates a relation between two records in the database.\nIt constructs a RELATE query with the given relation name and attributes.\n\nParameters\n\nfrom_id (str | RecordID) – The ID of the record to create the relation from\n\nrelation (str) – The name of the relation\n\nto_id (str | RecordID) – The ID of the record to create the relation to\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nReturn type\n\nAny | None\n\n\n\nasync get_related(from_id, relation, target_table=None, **filters)\n\nGet related records asynchronously.\n\nThis method retrieves records related to the given record through\nthe specified relation. It can return either the target records or\nthe relation records themselves.\n\nParameters\n\nfrom_id (str | RecordID) – The ID of the record to get related records for\n\nrelation (str) – The name of the relation\n\ntarget_table (str | None) – The name of the target table (optional)\n\n**filters (Any) – Filters to apply to the related records\n\nReturns\n\nList of related records or relation records\n\nReturn type\n\nList[Any]\n\n\n\nget_related_sync(from_id, relation, target_table=None, **filters)\n\nGet related records synchronously.\n\nThis method retrieves records related to the given record through\nthe specified relation. It can return either the target records or\nthe relation records themselves.\n\nParameters\n\nfrom_id (str | RecordID) – The ID of the record to get related records for\n\nrelation (str) – The name of the relation\n\ntarget_table (str | None) – The name of the target table (optional)\n\n**filters (Any) – Filters to apply to the related records\n\nReturns\n\nList of related records or relation records\n\nReturn type\n\nList[Any]\n\n\n\nasync update_relation(from_id, relation, to_id, **attrs)\n\nUpdate an existing relation asynchronously.\n\nThis method updates an existing relation between two records in the database.\nIf the relation doesn’t exist, it creates it.\n\nParameters\n\nfrom_id (str | RecordID) – The ID of the record the relation is from\n\nrelation (str) – The name of the relation\n\nto_id (str | RecordID) – The ID of the record the relation is to\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nReturn type\n\nAny | None\n\n\n\nupdate_relation_sync(from_id, relation, to_id, **attrs)\n\nUpdate an existing relation synchronously.\n\nThis method updates an existing relation between two records in the database.\nIf the relation doesn’t exist, it creates it.\n\nParameters\n\nfrom_id (str | RecordID) – The ID of the record the relation is from\n\nrelation (str) – The name of the relation\n\nto_id (str | RecordID) – The ID of the record the relation is to\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nReturn type\n\nAny | None\n\n\n\nasync delete_relation(from_id, relation, to_id=None)\n\nDelete a relation asynchronously.\n\nThis method deletes a relation between two records in the database.\nIf to_id is not provided, it deletes all relations from from_id.\n\nParameters\n\nfrom_id (str | RecordID) – The ID of the record the relation is from\n\nrelation (str) – The name of the relation\n\nto_id (str | RecordID | None) – The ID of the record the relation is to (optional)\n\nReturns\n\nNumber of deleted relations\n\nReturn type\n\nint\n\n\n\ndelete_relation_sync(from_id, relation, to_id=None)\n\nDelete a relation synchronously.\n\nThis method deletes a relation between two records in the database.\nIf to_id is not provided, it deletes all relations from from_id.\n\nParameters\n\nfrom_id (str | RecordID) – The ID of the record the relation is from\n\nrelation (str) – The name of the relation\n\nto_id (str | RecordID | None) – The ID of the record the relation is to (optional)\n\nReturns\n\nNumber of deleted relations\n\nReturn type\n\nint\n\n\n\nasync create_index(index_name, fields, unique=False, search=False, analyzer=None, comment=None)\n\nCreate an index on this table asynchronously.\n\nParameters\n\nindex_name (str) – Name of the index\n\nfields (List[str]) – List of field names to include in the index\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\ncomment (str | None) – Optional comment for the index\n\n\n\ncreate_index_sync(index_name, fields, unique=False, search=False, analyzer=None, comment=None)\n\nCreate an index on this table synchronously.\n\nParameters\n\nindex_name (str) – Name of the index\n\nfields (List[str]) – List of field names to include in the index\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\ncomment (str | None) – Optional comment for the index\n\n\n\nproperty objects: SchemalessQuerySet\n\nGet a query set for this table.\n\nReturns\n\nA SchemalessQuerySet for querying this table\n\n\n\nasync __call__(limit=None, start=None, page=None, **kwargs)\n\nQuery the table with filters asynchronously.\n\nThis method allows calling the table instance directly with filters\nto query the table. It supports pagination through limit and start parameters\nor the page parameter. It returns the results as SimpleNamespace objects\nif they aren’t already Document instances.\n\nParameters\n\nlimit (int | None) – Maximum number of results to return (for pagination)\n\nstart (int | None) – Number of results to skip (for pagination)\n\npage (tuple | None) – Tuple of (page_number, page_size) for pagination\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nList of results, either document instances or SimpleNamespace objects\n\nReturn type\n\nList[Any]\n\n\n\ncall_sync(limit=None, start=None, page=None, **kwargs)\n\nQuery the table with filters synchronously.\n\nThis method allows calling the table synchronously with filters\nto query the table. It supports pagination through limit and start parameters\nor the page parameter. It returns the results as SimpleNamespace objects\nif they aren’t already Document instances.\n\nParameters\n\nlimit (int | None) – Maximum number of results to return (for pagination)\n\nstart (int | None) – Number of results to skip (for pagination)\n\npage (tuple | None) – Tuple of (page_number, page_size) for pagination\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nList of results, either document instances or SimpleNamespace objects\n\nReturn type\n\nList[Any]\n\n\n\nasync transaction(coroutines)\n\nExecute multiple operations in a transaction asynchronously.\n\nThis method executes a list of coroutines within a transaction,\ncommitting the transaction if all operations succeed or canceling\nit if any operation fails.\n\nParameters\n\ncoroutines (List[Callable]) – List of coroutines to execute in the transaction\n\nReturns\n\nList of results from the coroutines\n\nRaises\n\nException – If any operation in the transaction fails\n\nReturn type\n\nList[Any]\n\n\n\ntransaction_sync(callables)\n\nExecute multiple operations in a transaction synchronously.\n\nThis method executes a list of callables within a transaction,\ncommitting the transaction if all operations succeed or canceling\nit if any operation fails.\n\nParameters\n\ncallables (List[Callable]) – List of callables to execute in the transaction\n\nReturns\n\nList of results from the callables\n\nRaises\n\nException – If any operation in the transaction fails\n\nReturn type\n\nList[Any]\n\n\n\nasync bulk_create(documents, batch_size=1000, return_documents=True)\n\nCreate multiple documents in a single operation asynchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally return the created documents.\n\nParameters\n\ndocuments (List[Dict[str, Any]]) – List of dictionaries representing documents to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[Any] | int\n\n\n\nbulk_create_sync(documents, batch_size=1000, return_documents=True)\n\nCreate multiple documents in a single operation synchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally return the created documents.\n\nParameters\n\ndocuments (List[Dict[str, Any]]) – List of dictionaries representing documents to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[Any] | int\n\n\n\nclass quantumengine.schemaless.SurrealEngine(connection)\n\nBases: object\n\nDynamic database accessor.\n\nThis class provides dynamic access to tables in the database without\nrequiring predefined schemas. It allows accessing tables as attributes\nof the instance.\n\n\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\nis_async\n\nWhether the connection is asynchronous\n\n\n\n__init__(connection)\n\nInitialize a new SurrealEngine.\n\nParameters\n\nconnection (Any) – The database connection to use for queries\n\n\n\n__getattr__(name)\n\nGet a table accessor for the given table name.\n\nThis method allows accessing tables as attributes of the instance.\n\nParameters\n\nname (str) – The name of the table\n\nReturns\n\nA SchemalessTable for accessing the table\n\nReturn type\n\nSchemalessTable"},{"objectID":"Home","href":"api/backends.html#data-grid-api","title":"Backends API > Data Grid API","text":"Data Grid API\n\nHigh-level API for data grid operations across backends.\n\n\n\n\n\nDataGrid Query Helpers for QuantumEngine - Efficient database querying for grid data\n\n\n\nclass quantumengine.datagrid_api.DataGridQueryBuilder(document_class)\n\nBases: object\n\nBuild efficient SurrealDB queries for DataGrid endpoints\n\n\n\n__init__(document_class)\n\n\n\n\n\napply_filters(filters)\n\nApply field filters to the queryset\n\nParameters\n\nfilters (Dict[str, Any]) – Dictionary of field->value filters\n\n\n\napply_search(search, search_fields)\n\nApply text search across multiple fields using contains operator\n\nParameters\n\nsearch (str) – Search term\n\nsearch_fields (List[str]) – List of fields to search in\n\n\n\napply_sorting(sort_field=None, sort_order='asc')\n\nApply sorting to the queryset\n\nParameters\n\nsort_field (str | None) – Field to sort by\n\nsort_order (str) – ‘asc’ or ‘desc’\n\n\n\nasync get_paginated_data(offset, limit)\n\nGet paginated data with total count\n\nParameters\n\noffset (int) – Number of records to skip\n\nlimit (int) – Number of records to return\n\nReturns\n\nTuple of (total_count, paginated_results)\n\n\n\nget_paginated_data_sync(offset, limit)\n\nSynchronous version of get_paginated_data\n\n\n\n\n\nasync quantumengine.datagrid_api.get_grid_data(document_class, request_args, search_fields, custom_filters=None, default_sort=None)\n\nGet paginated grid data using efficient SurrealDB queries\n\nParameters\n\ndocument_class – SurrealEngine document class\n\nrequest_args (Dict[str, Any]) – Request parameters (limit, offset, search, etc.)\n\nsearch_fields (List[str]) – List of fields to search in\n\ncustom_filters (Dict[str, str] | None) – Custom field filters from request\n\ndefault_sort (str | None) – Default sorting field\n\nReturns\n\ntotal, “rows”: rows} for BootstrapTable format\n\nReturn type\n\n{“total”\n\n\n\nquantumengine.datagrid_api.get_grid_data_sync(document_class, request_args, search_fields, custom_filters=None, default_sort=None)\n\nSynchronous version of get_grid_data\n\n\n\n\n\nquantumengine.datagrid_api.parse_datatables_params(request_args)\n\nConvert DataTables parameters to standard offset/limit format\n\n\n\n\n\nquantumengine.datagrid_api.format_datatables_response(total, rows, draw)\n\nFormat response for DataTables\n\n"},{"objectID":"Home","href":"api/backends.html#materialized-views","title":"Backends API > Materialized Views","text":"Materialized Views\n\nSupport for materialized views and computed documents.\n\n\n\n\n\nMaterialized views for SurrealEngine.\n\nThis module provides support for materialized views in SurrealEngine.\nMaterialized views are precomputed views of data that can be used to\nimprove query performance for frequently accessed aggregated data.\n\n\n\nclass quantumengine.materialized_view.Aggregation(field=None)\n\nBases: object\n\nBase class for aggregation functions.\n\nThis class represents an aggregation function that can be used in a materialized view.\nSubclasses should implement the __str__ method to return the SurrealQL representation\nof the aggregation function.\n\n\n\n\n\n__init__(field=None)\n\nInitialize a new Aggregation.\n\nParameters\n\nfield (str) – The field to aggregate (optional)\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the aggregation function.\n\n\n\n\n\nclass quantumengine.materialized_view.Count(field=None)\n\nBases: Aggregation\n\nCount aggregation function.\n\nThis class represents the count() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the count function.\n\n\n\n\n\nclass quantumengine.materialized_view.Mean(field=None)\n\nBases: Aggregation\n\nMean aggregation function.\n\nThis class represents the math::mean() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the mean function.\n\n\n\n\n\nclass quantumengine.materialized_view.Sum(field=None)\n\nBases: Aggregation\n\nSum aggregation function.\n\nThis class represents the math::sum() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the sum function.\n\n\n\n\n\nclass quantumengine.materialized_view.Min(field=None)\n\nBases: Aggregation\n\nMin aggregation function.\n\nThis class represents the math::min() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the min function.\n\n\n\n\n\nclass quantumengine.materialized_view.Max(field=None)\n\nBases: Aggregation\n\nMax aggregation function.\n\nThis class represents the math::max() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the max function.\n\n\n\n\n\nclass quantumengine.materialized_view.ArrayCollect(field=None)\n\nBases: Aggregation\n\nArray collect aggregation function.\n\nThis class represents the array::collect() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the array collect function.\n\n\n\n\n\nclass quantumengine.materialized_view.Median(field=None)\n\nBases: Aggregation\n\nMedian aggregation function.\n\nThis class represents the math::median() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the median function.\n\n\n\n\n\nclass quantumengine.materialized_view.StdDev(field=None)\n\nBases: Aggregation\n\nStandard deviation aggregation function.\n\nThis class represents the math::stddev() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the standard deviation function.\n\n\n\n\n\nclass quantumengine.materialized_view.Variance(field=None)\n\nBases: Aggregation\n\nVariance aggregation function.\n\nThis class represents the math::variance() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the variance function.\n\n\n\n\n\nclass quantumengine.materialized_view.Percentile(field=None, percentile=50)\n\nBases: Aggregation\n\nPercentile aggregation function.\n\nThis class represents the math::percentile() aggregation function in SurrealQL.\n\n\n\n\n\n__init__(field=None, percentile=50)\n\nInitialize a new Percentile.\n\nParameters\n\nfield (str) – The field to aggregate (optional)\n\npercentile (float) – The percentile to calculate (default: 50)\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the percentile function.\n\n\n\n\n\nclass quantumengine.materialized_view.Distinct(field=None)\n\nBases: Aggregation\n\nDistinct aggregation function.\n\nThis class represents the array::distinct() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the distinct function.\n\n\n\n\n\nclass quantumengine.materialized_view.GroupConcat(field=None, separator=', ')\n\nBases: Aggregation\n\nGroup concatenation aggregation function.\n\nThis class represents a custom aggregation function that concatenates values\nwith a separator.\n\n\n\n\n\n__init__(field=None, separator=', ')\n\nInitialize a new GroupConcat.\n\nParameters\n\nfield (str) – The field to aggregate (optional)\n\nseparator (str) – The separator to use (default: “, “)\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the group concat function.\n\n\n\n\n\nclass quantumengine.materialized_view.MaterializedView(name, query, refresh_interval=None, document_class=None, aggregations=None, select_fields=None)\n\nBases: object\n\nMaterialized view for SurrealDB.\n\nThis class represents a materialized view in SurrealDB, which is a\nprecomputed view of data that can be used to improve query performance\nfor frequently accessed aggregated data.\n\n\n\n\n\nname\n\nThe name of the materialized view\n\n\n\nquery\n\nThe query that defines the materialized view\n\n\n\nrefresh_interval\n\nThe interval at which the view is refreshed\n\n\n\ndocument_class\n\nThe document class that the view is based on\n\n\n\naggregations\n\nDictionary of field names and aggregation functions\n\n\n\nselect_fields\n\nList of fields to select (if None, selects all fields)\n\n\n\n__init__(name, query, refresh_interval=None, document_class=None, aggregations=None, select_fields=None)\n\nInitialize a new MaterializedView.\n\nParameters\n\nname (str) – The name of the materialized view\n\nquery (QuerySet) – The query that defines the materialized view\n\nrefresh_interval (str) – The interval at which the view is refreshed (e.g., “1h”, “30m”)\n\ndocument_class (Type['Document']) – The document class that the view is based on\n\naggregations (Dict[str, Aggregation]) – Dictionary of field names and aggregation functions\n\nselect_fields (List[str]) – List of fields to select (if None, selects all fields)\n\n\n\nasync create(connection=None)\n\nCreate the materialized view in the database.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\ncreate_sync(connection=None)\n\nCreate the materialized view in the database synchronously.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\nasync drop(connection=None)\n\nDrop the materialized view from the database.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\ndrop_sync(connection=None)\n\nDrop the materialized view from the database synchronously.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\nasync refresh(connection=None)\n\nManually refresh the materialized view.\n\nNote: SurrealDB materialized views are automatically updated when underlying data changes.\nThis method might not work as expected.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\nrefresh_sync(connection=None)\n\nManually refresh the materialized view.\n\nNote: SurrealDB materialized views are automatically updated when underlying data changes.\nThis method might not work as expected.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\nproperty objects: QuerySet\n\nGet a QuerySet for querying the materialized view.\n\nReturns\n\nA QuerySet for querying the materialized view\n\n\n\nasync execute_raw_query(connection=None)\n\nExecute a raw query against the materialized view.\n\nThis is a workaround for the “no decoder for tag” error that can occur\nwhen querying materialized views using the objects property.\n\nParameters\n\nconnection – The database connection to use (optional)\n\nReturns\n\nThe query results\n\n\n\nexecute_raw_query_sync(connection=None)\n\nExecute a raw query against the materialized view synchronously.\n\nThis is a workaround for the “no decoder for tag” error that can occur\nwhen querying materialized views using the objects property.\n\nParameters\n\nconnection – The database connection to use (optional)\n\nReturns\n\nThe query results\n\n\n\n\n\nMaterialized documents for QuantumORM.\n\nMaterializedDocument provides a Document-like interface for creating and querying\nmaterialized views across different backends (SurrealDB, ClickHouse).\n\nExample\n\nclass DailySalesSummary(MaterializedDocument):\n\nclass Meta:\n\nsource = SalesDocument\nbackend = ‘clickhouse’\n\n# Dimensions (grouping fields)\ndate = DateField(source=’date_collected’, transform=ToDate)\nseller_name = LowCardinalityField(source=’seller_name’)\n\n# Metrics (aggregation fields)\ntotal_sales = DecimalField(aggregate=Sum(‘offer_price’))\ntransaction_count = IntField(aggregate=Count())\navg_price = DecimalField(aggregate=Avg(‘offer_price’))\n\n\n\nclass quantumengine.materialized_document.AggregateFunction(field=None)\n\nBases: object\n\nBase class for aggregate functions.\n\n\n\n\n\n__init__(field=None)\n\n\n\n\n\n__str__()\n\nReturn the string representation for the backend.\n\n\n\n\n\nclass quantumengine.materialized_document.Count(field=None)\n\nBases: AggregateFunction\n\nCount aggregation.\n\n\n\n\n\nclass quantumengine.materialized_document.Sum(field=None)\n\nBases: AggregateFunction\n\nSum aggregation.\n\n\n\n\n\nclass quantumengine.materialized_document.Avg(field=None)\n\nBases: AggregateFunction\n\nAverage aggregation.\n\n\n\n\n\nclass quantumengine.materialized_document.Min(field=None)\n\nBases: AggregateFunction\n\nMinimum aggregation.\n\n\n\n\n\nclass quantumengine.materialized_document.Max(field=None)\n\nBases: AggregateFunction\n\nMaximum aggregation.\n\n\n\n\n\nclass quantumengine.materialized_document.CountDistinct(field=None)\n\nBases: AggregateFunction\n\nCount distinct aggregation.\n\n\n\n\n\nclass quantumengine.materialized_document.Variance(field=None)\n\nBases: AggregateFunction\n\nVariance aggregation.\n\n\n\n\n\nclass quantumengine.materialized_document.StdDev(field=None)\n\nBases: AggregateFunction\n\nStandard deviation aggregation.\n\n\n\n\n\nclass quantumengine.materialized_document.FieldTransform(field)\n\nBases: object\n\nBase class for field transformations.\n\n\n\n\n\n__init__(field)\n\n\n\n\n\n__str__()\n\nReturn the string representation for the backend.\n\n\n\n\n\nclass quantumengine.materialized_document.ToDate(field)\n\nBases: FieldTransform\n\nConvert to date (ClickHouse-specific).\n\n\n\n\n\nclass quantumengine.materialized_document.ToYearMonth(field)\n\nBases: FieldTransform\n\nConvert to YYYYMM format (ClickHouse-specific).\n\n\n\n\n\nclass quantumengine.materialized_document.MaterializedField(source=None, aggregate=None, transform=None, **kwargs)\n\nBases: Field\n\nField for materialized documents with aggregation support.\n\n\n\n\n\n__init__(source=None, aggregate=None, transform=None, **kwargs)\n\nInitialize a materialized field.\n\nParameters\n\nsource (str | None) – Source field name from the base document\n\naggregate (AggregateFunction | None) – Aggregation function to apply\n\ntransform (FieldTransform | Callable | None) – Transformation to apply to the source field\n\n**kwargs – Additional field arguments\n\n\n\nclass quantumengine.materialized_document.MaterializedDocumentMetaclass(name, bases, attrs)\n\nBases: DocumentMetaclass\n\nMetaclass for MaterializedDocument classes.\n\n\n\n\n\nstatic __new__(mcs, name, bases, attrs)\n\nCreate a new MaterializedDocument class.\n\n\n\n\n\nclass quantumengine.materialized_document.MaterializedDocument(**values)\n\nBases: Document\n\nBase class for materialized documents (views).\n\nMaterializedDocument provides a Document-like interface for creating\nand querying materialized views across different backends.\n\n\n\n\n\nasync classmethod create_view()\n\nCreate the materialized view in the database.\n\n\n\n\n\nasync classmethod drop_view()\n\nDrop the materialized view from the database.\n\n\n\n\n\nasync classmethod refresh_view()\n\nRefresh the materialized view (backend-specific behavior).\n\n\n\n\n\nasync save(**kwargs)\n\nMaterializedDocuments are read-only.\n\n\n\nasync delete()\n\nMaterializedDocuments are read-only."},{"objectID":"Home","href":"api/backends.html#backend-utilities","title":"Backends API > Backend Utilities","text":"Backend Utilities"},{"objectID":"Home","href":"api/backends.html#connection-pooling","title":"Backends API > Connection Pooling","text":"Connection Pooling\n\nConnection pool management for efficient database connections."},{"objectID":"Home","href":"api/backends.html#backend-detection","title":"Backends API > Backend Detection","text":"Backend Detection\n\nUtilities for detecting and validating backend configurations."},{"objectID":"Home","href":"api/backends.html#backend-specific-features","title":"Backends API > Backend-Specific Features","text":"Backend-Specific Features"},{"objectID":"Home","href":"api/backends.html#surrealdb-features","title":"Backends API > SurrealDB Features","text":"SurrealDB Features\n\nSurrealDB-specific functionality and optimizations."},{"objectID":"Home","href":"api/backends.html#clickhouse-features","title":"Backends API > ClickHouse Features","text":"ClickHouse Features\n\nClickHouse-specific functionality and optimizations."},{"objectID":"Home","href":"api/backends.html#migration-support","title":"Backends API > Migration Support","text":"Migration Support\n\nTools for migrating data between backends."},{"objectID":"Home","href":"api/backends.html#performance-monitoring","title":"Backends API > Performance Monitoring","text":"Performance Monitoring\n\nBackend performance monitoring and metrics."},{"objectID":"Home","href":"api/backends.html#exception-handling","title":"Backends API > Exception Handling","text":"Exception Handling\n\nBackend-specific exception handling and error management.\n\n\n\nclass quantumengine.exceptions.ConnectionError\n\nBases: QuantumEngineError\n\nRaised when a connection to the database cannot be established.\n\nThis exception is raised when there is an issue connecting to the SurrealDB server,\nsuch as network errors, authentication failures, or server unavailability."},{"objectID":"Home","href":"api/backends.html#see-also","title":"Backends API > See Also","text":"See Also\n\n/backends/index - Comprehensive backends guide\n\n/query/index - Query system documentation\n\n/fields/index - Field types and backend compatibility\n\n/exceptions/index - Exception handling guide"},{"objectID":"QuantumEngine Documentation","href":"README.html#quantumengine-documentation","title":"QuantumEngine Documentation","text":"QuantumEngine Documentation\n\nThis directory contains the Sphinx documentation for QuantumEngine."},{"objectID":"QuantumEngine Documentation","href":"README.html#building-the-documentation","title":"QuantumEngine Documentation > Building the Documentation","text":"Building the Documentation"},{"objectID":"QuantumEngine Documentation","href":"README.html#prerequisites","title":"QuantumEngine Documentation > Prerequisites","text":"Prerequisites\n\nInstall the documentation dependencies:"},{"objectID":"QuantumEngine Documentation","href":"README.html#build-html-documentation","title":"QuantumEngine Documentation > Build HTML Documentation","text":"Build HTML Documentation"},{"objectID":"QuantumEngine Documentation","href":"README.html#live-reload-development","title":"QuantumEngine Documentation > Live Reload Development","text":"Live Reload Development\n\nFor live reload during development:\n\nThe documentation will be available at http://127.0.0.1:8000 and will automatically rebuild when you save changes."},{"objectID":"QuantumEngine Documentation","href":"README.html#other-build-targets","title":"QuantumEngine Documentation > Other Build Targets","text":"Other Build Targets"},{"objectID":"QuantumEngine Documentation","href":"README.html#documentation-structure","title":"QuantumEngine Documentation > Documentation Structure","text":"Documentation Structure\n\nindex.rst - Main landing page\n\ninstallation.rst - Installation guide\n\nquickstart.rst - Quick start tutorial\n\ntutorial.rst - Comprehensive tutorial\n\napi/ - Auto-generated API documentation\n\nbackends/ - Backend-specific documentation\n\nfields/ - Field type documentation\n\nqueries/ - Query system documentation\n\nexamples/ - Example code and use cases\n\ncontributing.rst - Contribution guidelines\n\nchangelog.rst - Version history"},{"objectID":"QuantumEngine Documentation","href":"README.html#theme-and-styling","title":"QuantumEngine Documentation > Theme and Styling","text":"Theme and Styling\n\nThe documentation uses the ansys_sphinx_theme with custom styling in _static/custom.css. The theme provides:\n\nResponsive design\n\nDark/light mode support\n\nCode syntax highlighting\n\nCopy button for code blocks\n\nNavigation breadcrumbs\n\nGitHub integration"},{"objectID":"QuantumEngine Documentation","href":"README.html#writing-documentation","title":"QuantumEngine Documentation > Writing Documentation","text":"Writing Documentation"},{"objectID":"QuantumEngine Documentation","href":"README.html#restructuredtext-rst","title":"QuantumEngine Documentation > RestructuredText (RST)","text":"RestructuredText (RST)\n\nMost documentation files use RST format. Key syntax:"},{"objectID":"QuantumEngine Documentation","href":"README.html#markdown-support","title":"QuantumEngine Documentation > Markdown Support","text":"Markdown Support\n\nSome files can use Markdown format (configured with MyST parser):\n\nThis is a note admonition."},{"objectID":"QuantumEngine Documentation","href":"README.html#contributing-to-documentation","title":"QuantumEngine Documentation > Contributing to Documentation","text":"Contributing to Documentation\n\nCheck for typos and grammatical errors\n\nEnsure code examples are working and up-to-date\n\nAdd examples for new features\n\nUpdate API documentation when adding new classes/methods\n\nTest documentation builds locally before submitting PRs"},{"objectID":"QuantumEngine Documentation","href":"README.html#deployment","title":"QuantumEngine Documentation > Deployment","text":"Deployment\n\nDocumentation is automatically built and deployed using GitHub Actions when changes are pushed to the main branch."},{"objectID":"Home","href":"exceptions/index.html#exceptions","title":"Exceptions","text":"Exceptions\n\nQuantumEngine provides a comprehensive exception hierarchy for handling errors across different database backends and operations.\n\nTable of Contents\n\nOverview\n\nException Hierarchy\n\nCore Exceptions\n\nBase Exception\n\nValidationError\n\nDatabaseError\n\nField Validation Exceptions\n\nFieldValidationError\n\nDocument Validation Exceptions\n\nDocumentValidationError\n\nDatabase Operation Exceptions\n\nDoesNotExist\n\nMultipleObjectsReturned\n\nConnection Exceptions\n\nConnectionError\n\nQuery Exceptions\n\nQueryError\n\nBackend-Specific Exceptions\n\nSurrealDBError\n\nClickHouseError\n\nConfiguration Exceptions\n\nBackendConfigurationError\n\nTransaction Exceptions\n\nTransactionError\n\nError Handling Best Practices\n\nSpecific Exception Handling\n\nLogging Exceptions\n\nGraceful Degradation\n\nCustom Exceptions\n\nException Context\n\nTesting Exceptions\n\nException Middleware\n\nSee Also"},{"objectID":"Home","href":"exceptions/index.html#overview","title":"Exceptions > Overview","text":"Overview\n\nQuantumEngine’s exception system provides:\n\nConsistent error handling across different backends\n\nSpecific exception types for different error categories\n\nDetailed error information for debugging and logging\n\nBackend-specific exceptions for specialized error handling\n\nValidation exceptions for field and document validation"},{"objectID":"Home","href":"exceptions/index.html#exception-hierarchy","title":"Exceptions > Exception Hierarchy","text":"Exception Hierarchy\n\nAll QuantumEngine exceptions inherit from the base QuantumEngineException class:"},{"objectID":"Home","href":"exceptions/index.html#core-exceptions","title":"Exceptions > Core Exceptions","text":"Core Exceptions"},{"objectID":"Home","href":"exceptions/index.html#base-exception","title":"Exceptions > Base Exception","text":"Base Exception"},{"objectID":"Home","href":"exceptions/index.html#validationerror","title":"Exceptions > ValidationError","text":"ValidationError\n\nRaised when data validation fails:"},{"objectID":"Home","href":"exceptions/index.html#databaseerror","title":"Exceptions > DatabaseError","text":"DatabaseError\n\nRaised for database-related errors:"},{"objectID":"Home","href":"exceptions/index.html#field-validation-exceptions","title":"Exceptions > Field Validation Exceptions","text":"Field Validation Exceptions"},{"objectID":"Home","href":"exceptions/index.html#fieldvalidationerror","title":"Exceptions > FieldValidationError","text":"FieldValidationError\n\nRaised when individual field validation fails:\n\nCommon field validation errors:"},{"objectID":"Home","href":"exceptions/index.html#document-validation-exceptions","title":"Exceptions > Document Validation Exceptions","text":"Document Validation Exceptions"},{"objectID":"Home","href":"exceptions/index.html#documentvalidationerror","title":"Exceptions > DocumentValidationError","text":"DocumentValidationError\n\nRaised when document-level validation fails:"},{"objectID":"Home","href":"exceptions/index.html#database-operation-exceptions","title":"Exceptions > Database Operation Exceptions","text":"Database Operation Exceptions"},{"objectID":"Home","href":"exceptions/index.html#doesnotexist","title":"Exceptions > DoesNotExist","text":"DoesNotExist\n\nRaised when querying for a non-existent object:"},{"objectID":"Home","href":"exceptions/index.html#multipleobjectsreturned","title":"Exceptions > MultipleObjectsReturned","text":"MultipleObjectsReturned\n\nRaised when get() returns multiple objects:"},{"objectID":"Home","href":"exceptions/index.html#connection-exceptions","title":"Exceptions > Connection Exceptions","text":"Connection Exceptions"},{"objectID":"Home","href":"exceptions/index.html#connectionerror","title":"Exceptions > ConnectionError","text":"ConnectionError\n\nRaised when database connection fails:"},{"objectID":"Home","href":"exceptions/index.html#query-exceptions","title":"Exceptions > Query Exceptions","text":"Query Exceptions"},{"objectID":"Home","href":"exceptions/index.html#queryerror","title":"Exceptions > QueryError","text":"QueryError\n\nRaised when query execution fails:"},{"objectID":"Home","href":"exceptions/index.html#backend-specific-exceptions","title":"Exceptions > Backend-Specific Exceptions","text":"Backend-Specific Exceptions"},{"objectID":"Home","href":"exceptions/index.html#surrealdberror","title":"Exceptions > SurrealDBError","text":"SurrealDBError\n\nSpecific to SurrealDB backend operations:"},{"objectID":"Home","href":"exceptions/index.html#clickhouseerror","title":"Exceptions > ClickHouseError","text":"ClickHouseError\n\nSpecific to ClickHouse backend operations:"},{"objectID":"Home","href":"exceptions/index.html#configuration-exceptions","title":"Exceptions > Configuration Exceptions","text":"Configuration Exceptions"},{"objectID":"Home","href":"exceptions/index.html#backendconfigurationerror","title":"Exceptions > BackendConfigurationError","text":"BackendConfigurationError\n\nRaised when backend configuration is invalid:"},{"objectID":"Home","href":"exceptions/index.html#transaction-exceptions","title":"Exceptions > Transaction Exceptions","text":"Transaction Exceptions"},{"objectID":"Home","href":"exceptions/index.html#transactionerror","title":"Exceptions > TransactionError","text":"TransactionError\n\nRaised when transaction operations fail:"},{"objectID":"Home","href":"exceptions/index.html#error-handling-best-practices","title":"Exceptions > Error Handling Best Practices","text":"Error Handling Best Practices"},{"objectID":"Home","href":"exceptions/index.html#specific-exception-handling","title":"Exceptions > Specific Exception Handling","text":"Specific Exception Handling\n\nCatch specific exceptions rather than generic ones:"},{"objectID":"Home","href":"exceptions/index.html#logging-exceptions","title":"Exceptions > Logging Exceptions","text":"Logging Exceptions\n\nLog exceptions with context for debugging:"},{"objectID":"Home","href":"exceptions/index.html#graceful-degradation","title":"Exceptions > Graceful Degradation","text":"Graceful Degradation\n\nHandle exceptions gracefully in production:"},{"objectID":"Home","href":"exceptions/index.html#custom-exceptions","title":"Exceptions > Custom Exceptions","text":"Custom Exceptions\n\nCreate application-specific exceptions:"},{"objectID":"Home","href":"exceptions/index.html#exception-context","title":"Exceptions > Exception Context","text":"Exception Context\n\nExceptions provide context for debugging:"},{"objectID":"Home","href":"exceptions/index.html#testing-exceptions","title":"Exceptions > Testing Exceptions","text":"Testing Exceptions\n\nTest exception handling in your code:"},{"objectID":"Home","href":"exceptions/index.html#exception-middleware","title":"Exceptions > Exception Middleware","text":"Exception Middleware\n\nHandle exceptions at the application level:"},{"objectID":"Home","href":"exceptions/index.html#see-also","title":"Exceptions > See Also","text":"See Also\n\n/api/exceptions - Complete exceptions API reference\n\n/fields/index - Field validation and exceptions\n\n/query/index - Query exceptions and error handling\n\n/backends/index - Backend-specific exception handling"},{"objectID":"Home","href":"index.html#quantumengine-documentation","title":"QuantumEngine Documentation","text":"QuantumEngine Documentation\n\nA powerful, multi-backend Object-Document Mapper (ODM) for Python\n\nQuantumEngine provides a unified API for working with both transactional and analytical databases. Supporting SurrealDB (graph/document) and ClickHouse (columnar analytical) with a single, consistent interface."},{"objectID":"Home","href":"index.html#key-features","title":"QuantumEngine Documentation > Key Features","text":"Key Features\n\n✨ Multi-Backend Architecture: SurrealDB + ClickHouse support\n🔒 Type-Safe Field System: 15+ field types with validation\n🔍 Advanced Query System: Q objects, QueryExpressions, and filtering\n🔗 Relationship Management: Graph relations and references\n📊 Schema Management: SCHEMAFULL and SCHEMALESS table support\n⚡ Async/Sync APIs: Complete async/await support with sync alternatives\n🔌 Modular Installation: Install only the backends you need"},{"objectID":"Home","href":"index.html#installation","title":"QuantumEngine Documentation > Installation","text":"Installation\n\nQuantumEngine uses a modular installation system - install only the backends you need:"},{"objectID":"Home","href":"index.html#quick-start","title":"QuantumEngine Documentation > Quick Start","text":"Quick Start"},{"objectID":"Home","href":"index.html#table-of-contents","title":"QuantumEngine Documentation > Table of Contents","text":"Table of Contents\n\n\n\n"},{"objectID":"Home","href":"index.html#indices-and-tables","title":"QuantumEngine Documentation > Indices and tables","text":"Indices and tables\n\ngenindex\n\nmodindex\n\nsearch"},{"objectID":"Installation Guide","href":"installation.html#installation-guide","title":"Installation Guide","text":"Installation Guide\n\nQuantumEngine uses a modular installation system that allows you to install only the backends you need, keeping your environment lightweight and efficient."},{"objectID":"Installation Guide","href":"installation.html#installation-options","title":"Installation Guide > Installation Options","text":"Installation Options"},{"objectID":"Installation Guide","href":"installation.html#core-package-minimal","title":"Installation Guide > Core Package (Minimal)","text":"Core Package (Minimal)\n\nIncludes: Core ORM functionality, field types, query building\nSize: ~5MB\nUse Case: When you want to use only specific backends or aren’t sure which backends you’ll need"},{"objectID":"Installation Guide","href":"installation.html#backend-specific-installations","title":"Installation Guide > Backend-Specific Installations","text":"Backend-Specific Installations"},{"objectID":"Installation Guide","href":"installation.html#clickhouse-only","title":"Installation Guide > ClickHouse Only","text":"ClickHouse Only\n\nIncludes: Core + ClickHouse backend + clickhouse-connect\nUse Case: Data analytics, time-series data, high-performance aggregations"},{"objectID":"Installation Guide","href":"installation.html#surrealdb-only","title":"Installation Guide > SurrealDB Only","text":"SurrealDB Only\n\nIncludes: Core + SurrealDB backend + surrealdb package\nUse Case: Graph databases, document storage, real-time applications"},{"objectID":"Installation Guide","href":"installation.html#multiple-backends","title":"Installation Guide > Multiple Backends","text":"Multiple Backends\n\nIncludes: Core + both backends\nUse Case: Multi-database applications, data pipeline systems"},{"objectID":"Installation Guide","href":"installation.html#development-installation","title":"Installation Guide > Development Installation","text":"Development Installation\n\nIncludes: Core + testing tools (pytest, mypy, black, ruff)\nUse Case: Contributing to QuantumEngine or extensive development"},{"objectID":"Installation Guide","href":"installation.html#complete-installation","title":"Installation Guide > Complete Installation","text":"Complete Installation\n\nIncludes: Everything (all backends + development tools)\nUse Case: Full-featured development environment"},{"objectID":"Installation Guide","href":"installation.html#installation-size-comparison","title":"Installation Guide > Installation Size Comparison","text":"Installation Size Comparison\n\n\n\n\n\n\n\n\n\nInstallation Type\n\nDownload Size\n\nDisk Size\n\nDependencies\n\nquantumengine\n\n~1MB\n\n~5MB\n\n1 (typing-extensions)\n\nquantumengine[clickhouse]\n\n~15MB\n\n~45MB\n\n+clickhouse-connect\n\nquantumengine[surrealdb]\n\n~8MB\n\n~25MB\n\n+surrealdb\n\nquantumengine[all]\n\n~20MB\n\n~65MB\n\nAll backends"},{"objectID":"Installation Guide","href":"installation.html#checking-available-backends","title":"Installation Guide > Checking Available Backends","text":"Checking Available Backends\n\nYou can check which backends are available in your environment:"},{"objectID":"Installation Guide","href":"installation.html#troubleshooting","title":"Installation Guide > Troubleshooting","text":"Troubleshooting"},{"objectID":"Installation Guide","href":"installation.html#missing-backend-dependencies","title":"Installation Guide > Missing Backend Dependencies","text":"Missing Backend Dependencies\n\nIf you see an error like:\n\nSolution: Install the backend-specific package:"},{"objectID":"Installation Guide","href":"installation.html#import-errors","title":"Installation Guide > Import Errors","text":"Import Errors\n\nIf you get import errors for specific backends:"},{"objectID":"Installation Guide","href":"installation.html#version-conflicts","title":"Installation Guide > Version Conflicts","text":"Version Conflicts\n\nIf you experience dependency conflicts:"},{"objectID":"Installation Guide","href":"installation.html#docker-installation","title":"Installation Guide > Docker Installation","text":"Docker Installation\n\nFor containerized deployments, you can use the modular installation in your Dockerfile:"},{"objectID":"Installation Guide","href":"installation.html#recommended-installation-strategies","title":"Installation Guide > Recommended Installation Strategies","text":"Recommended Installation Strategies"},{"objectID":"Installation Guide","href":"installation.html#for-microservices","title":"Installation Guide > For Microservices","text":"For Microservices"},{"objectID":"Installation Guide","href":"installation.html#for-data-pipelines","title":"Installation Guide > For Data Pipelines","text":"For Data Pipelines"},{"objectID":"Installation Guide","href":"installation.html#for-development","title":"Installation Guide > For Development","text":"For Development"},{"objectID":"Installation Guide","href":"installation.html#for-production","title":"Installation Guide > For Production","text":"For Production\n\nThe modular installation system ensures you only install what you need while maintaining full compatibility across all backends when required."},{"objectID":"Tutorial","href":"tutorial.html#tutorial","title":"Tutorial","text":"Tutorial\n\nThis tutorial will guide you through QuantumEngine’s advanced features step by step.\n\nThis tutorial assumes you’ve completed the quickstart guide."},{"objectID":"Tutorial","href":"tutorial.html#advanced-field-types","title":"Tutorial > Advanced Field Types","text":"Advanced Field Types\n\nQuantumEngine provides specialized field types for different use cases:"},{"objectID":"Tutorial","href":"tutorial.html#clickhouse-specific-fields","title":"Tutorial > ClickHouse-Specific Fields","text":"ClickHouse-Specific Fields"},{"objectID":"Tutorial","href":"tutorial.html#schema-management","title":"Tutorial > Schema Management","text":"Schema Management\n\nQuantumEngine supports both strict and flexible schemas:"},{"objectID":"Tutorial","href":"tutorial.html#schemafull-vs-schemaless","title":"Tutorial > SCHEMAFULL vs SCHEMALESS","text":"SCHEMAFULL vs SCHEMALESS"},{"objectID":"Tutorial","href":"tutorial.html#index-management","title":"Tutorial > Index Management","text":"Index Management"},{"objectID":"Tutorial","href":"tutorial.html#relationships-surrealdb","title":"Tutorial > Relationships (SurrealDB)","text":"Relationships (SurrealDB)\n\nQuantumEngine supports rich relationship modeling in SurrealDB:"},{"objectID":"Tutorial","href":"tutorial.html#document-references","title":"Tutorial > Document References","text":"Document References"},{"objectID":"Tutorial","href":"tutorial.html#graph-relations","title":"Tutorial > Graph Relations","text":"Graph Relations"},{"objectID":"Tutorial","href":"tutorial.html#relation-documents","title":"Tutorial > Relation Documents","text":"Relation Documents"},{"objectID":"Tutorial","href":"tutorial.html#advanced-querying","title":"Tutorial > Advanced Querying","text":"Advanced Querying"},{"objectID":"Tutorial","href":"tutorial.html#complex-query-building","title":"Tutorial > Complex Query Building","text":"Complex Query Building"},{"objectID":"Tutorial","href":"tutorial.html#aggregations","title":"Tutorial > Aggregations","text":"Aggregations"},{"objectID":"Tutorial","href":"tutorial.html#performance-optimization","title":"Tutorial > Performance Optimization","text":"Performance Optimization"},{"objectID":"Tutorial","href":"tutorial.html#direct-record-access","title":"Tutorial > Direct Record Access","text":"Direct Record Access"},{"objectID":"Tutorial","href":"tutorial.html#query-analysis","title":"Tutorial > Query Analysis","text":"Query Analysis"},{"objectID":"Tutorial","href":"tutorial.html#bulk-operations","title":"Tutorial > Bulk Operations","text":"Bulk Operations"},{"objectID":"Tutorial","href":"tutorial.html#connection-management","title":"Tutorial > Connection Management","text":"Connection Management"},{"objectID":"Tutorial","href":"tutorial.html#multiple-named-connections","title":"Tutorial > Multiple Named Connections","text":"Multiple Named Connections"},{"objectID":"Tutorial","href":"tutorial.html#connection-pooling","title":"Tutorial > Connection Pooling","text":"Connection Pooling"},{"objectID":"Tutorial","href":"tutorial.html#asyncsync-api","title":"Tutorial > Async/Sync API","text":"Async/Sync API"},{"objectID":"Tutorial","href":"tutorial.html#synchronous-operations","title":"Tutorial > Synchronous Operations","text":"Synchronous Operations"},{"objectID":"Tutorial","href":"tutorial.html#migration-and-schema-evolution","title":"Tutorial > Migration and Schema Evolution","text":"Migration and Schema Evolution"},{"objectID":"Tutorial","href":"tutorial.html#generating-migrations","title":"Tutorial > Generating Migrations","text":"Generating Migrations"},{"objectID":"Tutorial","href":"tutorial.html#drop-table-operations","title":"Tutorial > Drop Table Operations","text":"Drop Table Operations"},{"objectID":"Tutorial","href":"tutorial.html#best-practices","title":"Tutorial > Best Practices","text":"Best Practices\n\nUse appropriate backends: SurrealDB for transactional data, ClickHouse for analytics\n\nLeverage modular installation: Only install backends you need\n\nUse LowCardinalityField for enum-like values in ClickHouse\n\nIndex frequently queried fields\n\nUse Q objects for complex queries\n\nHandle backend availability gracefully\n\nUse connection pooling for high-traffic applications"},{"objectID":"Tutorial","href":"tutorial.html#next-steps","title":"Tutorial > Next Steps","text":"Next Steps\n\nExplore the api/index for detailed API documentation\n\nCheck out examples/index for real-world usage patterns\n\nLearn about specific backends/index features\n\nContribute to the project via contributing"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API Reference","text":"API Reference\n\nThis section contains the complete API documentation for QuantumEngine."},{"objectID":"Home","href":"api/index.html#core-classes","title":"API Reference > Core Classes","text":"Core Classes\n\n\n\nQuantumEngine: Multi-backend Object-Document Mapper with both sync and async support\n\n\n\nclass quantumengine.SurrealEngine(connection)\n\nBases: object\n\nDynamic database accessor.\n\nThis class provides dynamic access to tables in the database without\nrequiring predefined schemas. It allows accessing tables as attributes\nof the instance.\n\n\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\nis_async\n\nWhether the connection is asynchronous\n\n\n\n__getattr__(name)\n\nGet a table accessor for the given table name.\n\nThis method allows accessing tables as attributes of the instance.\n\nParameters\n\nname (str) – The name of the table\n\nReturns\n\nA SchemalessTable for accessing the table\n\nReturn type\n\nSchemalessTable\n\n\n\n__init__(connection)\n\nInitialize a new SurrealEngine.\n\nParameters\n\nconnection (Any) – The database connection to use for queries\n\n\n\nclass quantumengine.SurrealEngineAsyncConnection(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False, use_pool=False, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nBases: object\n\nAsynchronous connection manager for SurrealDB.\n\nThis class manages the asynchronous connection to a SurrealDB database, providing methods\nfor connecting, disconnecting, and executing transactions. It also provides\naccess to the database through the db property.\n\n\n\n\n\nurl\n\nThe URL of the SurrealDB server\n\n\n\nnamespace\n\nThe namespace to use\n\n\n\ndatabase\n\nThe database to use\n\n\n\nusername\n\nThe username for authentication\n\n\n\npassword\n\nThe password for authentication\n\n\n\nclient\n\nThe SurrealDB async client instance or ConnectionPoolClient\n\n\n\nuse_pool\n\nWhether to use a connection pool\n\n\n\npool\n\nThe connection pool if use_pool is True\n\n\n\npool_size\n\nThe size of the connection pool\n\n\n\nmax_idle_time\n\nMaximum time in seconds a connection can be idle before being closed\n\n\n\nasync __aenter__()\n\nEnter the async context manager.\n\nReturns\n\nThe connection instance\n\nReturn type\n\nSurrealEngineAsyncConnection\n\n\n\nasync __aexit__(exc_type, exc_val, exc_tb)\n\nExit the async context manager.\n\nParameters\n\nexc_type (Type[BaseException] | None) – The exception type, if an exception was raised\n\nexc_val (BaseException | None) – The exception value, if an exception was raised\n\nexc_tb (Any | None) – The exception traceback, if an exception was raised\n\n\n\n__init__(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False, use_pool=False, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True)\n\nInitialize a new SurrealEngineAsyncConnection.\n\nParameters\n\nurl (str | None) – The URL of the SurrealDB server\n\nnamespace (str | None) – The namespace to use\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\nname (str | None) – The name to register this connection under in the registry\n\nmake_default (bool) – Whether to set this connection as the default\n\nuse_pool (bool) – Whether to use a connection pool\n\npool_size (int) – The size of the connection pool\n\nmax_idle_time (int) – Maximum time in seconds a connection can be idle before being closed\n\nconnect_timeout (int) – Timeout in seconds for establishing a connection\n\noperation_timeout (int) – Timeout in seconds for operations\n\nretry_limit (int) – Maximum number of retries for failed operations\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\nvalidate_on_borrow (bool) – Whether to validate connections when borrowing from the pool\n\n\n\nasync connect()\n\nConnect to the database.\n\nThis method creates a new client if one doesn’t exist. If use_pool is True,\nit creates a connection pool and a ConnectionPoolClient. Otherwise, it creates\na direct connection to the database.\n\nReturns\n\nThe SurrealDB client instance or ConnectionPoolClient\n\nReturn type\n\nAny\n\n\n\nproperty db: SurrealEngine\n\nGet dynamic table accessor.\n\nReturns\n\nA SurrealEngine instance for accessing tables dynamically\n\n\n\nasync disconnect()\n\nDisconnect from the database.\n\nThis method closes the client connection if one exists. If use_pool is True,\nit closes the connection pool.\n\n\n\n\n\nasync transaction(coroutines)\n\nExecute multiple operations in a transaction.\n\nThis method executes a list of coroutines within a transaction,\ncommitting the transaction if all operations succeed or canceling\nit if any operation fails.\n\nParameters\n\ncoroutines (list) – List of coroutines to execute in the transaction\n\nReturns\n\nList of results from the coroutines\n\nRaises\n\nException – If any operation in the transaction fails\n\nReturn type\n\nlist\n\n\n\nclass quantumengine.SurrealEngineSyncConnection(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False)\n\nBases: object\n\nSynchronous connection manager for SurrealDB.\n\nThis class manages the synchronous connection to a SurrealDB database, providing methods\nfor connecting, disconnecting, and executing transactions. It also provides\naccess to the database through the db property.\n\n\n\n\n\nurl\n\nThe URL of the SurrealDB server\n\n\n\nnamespace\n\nThe namespace to use\n\n\n\ndatabase\n\nThe database to use\n\n\n\nusername\n\nThe username for authentication\n\n\n\npassword\n\nThe password for authentication\n\n\n\nclient\n\nThe SurrealDB sync client instance\n\n\n\n__enter__()\n\nEnter the sync context manager.\n\nReturns\n\nThe connection instance\n\nReturn type\n\nSurrealEngineSyncConnection\n\n\n\n__exit__(exc_type, exc_val, exc_tb)\n\nExit the sync context manager.\n\nParameters\n\nexc_type (Type[BaseException] | None) – The exception type, if an exception was raised\n\nexc_val (BaseException | None) – The exception value, if an exception was raised\n\nexc_tb (Any | None) – The exception traceback, if an exception was raised\n\n\n\n__init__(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False)\n\nInitialize a new SurrealEngineSyncConnection.\n\nParameters\n\nurl (str | None) – The URL of the SurrealDB server\n\nnamespace (str | None) – The namespace to use\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\nname (str | None) – The name to register this connection under in the registry\n\nmake_default (bool) – Whether to set this connection as the default\n\n\n\nconnect()\n\nConnect to the database.\n\nThis method creates a new client if one doesn’t exist, signs in if\ncredentials are provided, and sets the namespace and database.\n\nReturns\n\nThe SurrealDB client instance\n\nReturn type\n\nAny\n\n\n\nproperty db: SurrealEngine\n\nGet dynamic table accessor.\n\nReturns\n\nA SurrealEngine instance for accessing tables dynamically\n\n\n\ndisconnect()\n\nDisconnect from the database.\n\nThis method closes the client connection if one exists.\n\n\n\n\n\ntransaction(callables)\n\nExecute multiple operations in a transaction.\n\nThis method executes a list of callables within a transaction,\ncommitting the transaction if all operations succeed or canceling\nit if any operation fails.\n\nParameters\n\ncallables (list) – List of callables to execute in the transaction\n\nReturns\n\nList of results from the callables\n\nRaises\n\nException – If any operation in the transaction fails\n\nReturn type\n\nlist\n\n\n\nquantumengine.SurrealEngineConnection\n\nalias of SurrealEngineAsyncConnection\n\n\n\nclass quantumengine.BaseSurrealEngineConnection(*args, **kwargs)\n\nBases: Protocol\n\nProtocol defining the interface for SurrealDB connections.\n\nThis protocol defines the common interface that both synchronous and\nasynchronous connections must implement.\n\n\n\n__init__(*args, **kwargs)\n\n\n\n\n\nproperty db: SurrealEngine\n\nGet dynamic table accessor.\n\n\n\nurl: str | None\n\n\n\n\n\nnamespace: str | None\n\n\n\n\n\ndatabase: str | None\n\n\n\n\n\nusername: str | None\n\n\n\n\n\npassword: str | None\n\n\n\n\n\nclient: Any\n\n\n\n\n\nquantumengine.create_connection(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False, async_mode=True, use_pool=False, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True, auto_connect=False, backend='surrealdb', **backend_kwargs)\n\nFactory function to create a connection for the specified backend.\n\nParameters\n\nurl (str | None) – The URL of the database server (for SurrealDB) or host (for ClickHouse)\n\nnamespace (str | None) – The namespace to use (SurrealDB only)\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\nname (str | None) – The name to register this connection under in the registry\n\nmake_default (bool) – Whether to set this connection as the default\n\nasync_mode (bool) – Whether to create an async or sync connection (SurrealDB only)\n\nuse_pool (bool) – Whether to use a connection pool (SurrealDB async_mode only)\n\npool_size (int) – The size of the connection pool\n\nmax_idle_time (int) – Maximum time in seconds a connection can be idle before being closed\n\nconnect_timeout (int) – Timeout in seconds for establishing a connection\n\noperation_timeout (int) – Timeout in seconds for operations\n\nretry_limit (int) – Maximum number of retries for failed operations\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\nvalidate_on_borrow (bool) – Whether to validate connections when borrowing from the pool\n\nauto_connect (bool) – Whether to automatically connect the connection\n\nbackend (str) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\n**backend_kwargs – Additional backend-specific connection parameters\n\nReturns\n\nA connection instance for the specified backend\n\nReturn type\n\nAny\n\nExamples\n\nSurrealDB connection (default):\n\nClickHouse connection:\n\n\n\nclass quantumengine.ConnectionRegistry\n\nBases: object\n\nGlobal connection registry for multi-backend support.\n\nThis class provides a centralized registry for managing database connections\nfor multiple backends (SurrealDB, ClickHouse, etc.). It allows setting default\nconnections per backend and registering named connections that can be retrieved\nthroughout the application.\n\n\n\n_default_async_connection\n\nThe default async connection to use when none is specified (legacy)\n\nType\n\nquantumengine.connection.SurrealEngineAsyncConnection | None\n\n\n\n_default_sync_connection\n\nThe default sync connection to use when none is specified (legacy)\n\nType\n\nquantumengine.connection.SurrealEngineSyncConnection | None\n\n\n\n_async_connections\n\nDictionary of named async connections (legacy)\n\nType\n\nDict[str, quantumengine.connection.SurrealEngineAsyncConnection]\n\n\n\n_sync_connections\n\nDictionary of named sync connections (legacy)\n\nType\n\nDict[str, quantumengine.connection.SurrealEngineSyncConnection]\n\n\n\n_backend_connections\n\nDictionary of backend -> {connection_name -> connection}\n\nType\n\nDict[str, Dict[str, Any]]\n\n\n\n_default_backend_connections\n\nDictionary of backend -> default_connection\n\nType\n\nDict[str, Any]\n\n\n\nclassmethod add_async_connection(name, connection)\n\nAdd a named async connection to the registry.\n\nParameters\n\nname (str) – The name to register the connection under\n\nconnection (SurrealEngineAsyncConnection) – The async connection to register\n\n\n\nclassmethod add_connection(name, connection)\n\nAdd a named connection to the registry based on its type.\n\nParameters\n\nname (str) – The name to register the connection under\n\nconnection (SurrealEngineAsyncConnection | SurrealEngineSyncConnection) – The connection to register\n\n\n\nclassmethod add_sync_connection(name, connection)\n\nAdd a named sync connection to the registry.\n\nParameters\n\nname (str) – The name to register the connection under\n\nconnection (SurrealEngineSyncConnection) – The sync connection to register\n\n\n\nclassmethod get_async_connection(name)\n\nGet a named async connection from the registry.\n\nParameters\n\nname (str) – The name of the async connection to retrieve\n\nReturns\n\nThe requested async connection\n\nRaises\n\nKeyError – If no async connection with the given name exists\n\nReturn type\n\nSurrealEngineAsyncConnection\n\n\n\nclassmethod get_connection(name, async_mode=True)\n\nGet a named connection from the registry based on the mode.\n\nParameters\n\nname (str) – The name of the connection to retrieve\n\nasync_mode (bool) – Whether to get an async or sync connection\n\nReturns\n\nThe requested connection of the requested type\n\nRaises\n\nKeyError – If no connection of the requested type with the given name exists\n\nReturn type\n\nSurrealEngineAsyncConnection | SurrealEngineSyncConnection\n\n\n\nclassmethod get_connection_by_backend(name, backend='surrealdb')\n\nGet a named connection for a specific backend.\n\nParameters\n\nname (str) – The name of the connection\n\nbackend (str) – The backend type\n\nReturns\n\nThe requested connection\n\nRaises\n\nValueError – If the connection is not found\n\nReturn type\n\nAny\n\n\n\nclassmethod get_default_async_connection()\n\nGet the default async connection.\n\nReturns\n\nThe default async connection\n\nRaises\n\nRuntimeError – If no default async connection has been set\n\nReturn type\n\nSurrealEngineAsyncConnection\n\n\n\nclassmethod get_default_connection(backend='surrealdb')\n\nGet the default connection for a backend.\n\nParameters\n\nbackend (str) – The backend type\n\nReturns\n\nThe default connection for the backend\n\nRaises\n\nValueError – If no default connection is set for the backend\n\nReturn type\n\nAny\n\n\n\nclassmethod get_default_sync_connection()\n\nGet the default sync connection.\n\nReturns\n\nThe default sync connection\n\nRaises\n\nRuntimeError – If no default sync connection has been set\n\nReturn type\n\nSurrealEngineSyncConnection\n\n\n\nclassmethod get_sync_connection(name)\n\nGet a named sync connection from the registry.\n\nParameters\n\nname (str) – The name of the sync connection to retrieve\n\nReturns\n\nThe requested sync connection\n\nRaises\n\nKeyError – If no sync connection with the given name exists\n\nReturn type\n\nSurrealEngineSyncConnection\n\n\n\nclassmethod list_backends()\n\nList all registered backends.\n\nReturns\n\nList of backend names\n\nReturn type\n\nList[str]\n\n\n\nclassmethod list_connections(backend)\n\nList all connections for a backend.\n\nParameters\n\nbackend (str) – The backend type\n\nReturns\n\nList of connection names for the backend\n\nReturn type\n\nList[str]\n\n\n\nclassmethod register(name, connection, backend='surrealdb')\n\nRegister a connection for a specific backend.\n\nParameters\n\nname (str) – The name to register the connection under\n\nconnection (Any) – The connection object\n\nbackend (str) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\n\n\nclassmethod set_default(backend, connection_name)\n\nSet the default connection for a backend.\n\nParameters\n\nbackend (str) – The backend type\n\nconnection_name (str) – The name of the connection to set as default\n\n\n\nclassmethod set_default_async_connection(connection)\n\nSet the default async connection.\n\nParameters\n\nconnection (SurrealEngineAsyncConnection) – The async connection to set as default\n\n\n\nclassmethod set_default_connection(connection)\n\nSet the default connection based on its type.\n\nParameters\n\nconnection (SurrealEngineAsyncConnection | SurrealEngineSyncConnection) – The connection to set as default\n\n\n\nclassmethod set_default_sync_connection(connection)\n\nSet the default sync connection.\n\nParameters\n\nconnection (SurrealEngineSyncConnection) – The sync connection to set as default\n\n\n\nclass quantumengine.Document(**values)\n\nBases: object\n\nBase class for all documents.\n\nThis class provides the foundation for all document models in the ORM.\nIt includes methods for CRUD operations, validation, and serialization.\n\nThe Document class uses a Meta inner class to configure behavior:\n\nExample\n\n>>> class User(Document):\n...     username = StringField(required=True)\n...     email = EmailField(required=True)\n...     age = IntField(min_value=0)\n...\n...     class Meta:\n...         collection = \"users\"          # Collection/table name\n...         backend = \"surrealdb\"         # Backend to use\n...         indexes = [                   # Index definitions\n...             {\"name\": \"idx_username\", \"fields\": [\"username\"], \"unique\": True},\n...             {\"name\": \"idx_email\", \"fields\": [\"email\"], \"unique\": True}\n...         ]\n...         strict = True                 # Strict field validation\n\nMeta Options:\n\ncollection (str): The name of the collection/table in the database.\n\nDefaults to the lowercase class name.\n\ntable_name (str): Alternative to ‘collection’, used by some backends.\n\nDefaults to the value of ‘collection’.\n\nbackend (str): The database backend to use (“surrealdb” or “clickhouse”).\n\nDefaults to “surrealdb”.\n\nindexes (list): List of index definitions. Each index is a dict with:\n\nname (str): Index name\n\nfields (list): List of field names to index\n\nunique (bool): Whether the index is unique (optional)\n\ntype (str): Index type for backend-specific indexes (optional)\n\nid_field (str): Name of the ID field. Defaults to “id”.\n\nstrict (bool): Whether to raise errors for unknown fields.\n\nDefaults to True.\n\n\n\n\n\nobjects\n\nQuerySetDescriptor for querying documents of this class\n\n\n\n_data\n\nDictionary of field values\n\n\n\n_changed_fields\n\nList of field names that have been changed\n\n\n\n_fields\n\nDictionary of fields for this document class (class attribute)\n\n\n\n_fields_ordered\n\nList of field names in order of definition (class attribute)\n\n\n\n_meta\n\nDictionary of metadata for this document class (class attribute)\n\n\n\n__getattr__(name)\n\nGet a field value.\n\nThis method is called when an attribute is not found through normal lookup.\nIt checks if the attribute is a field and returns its value if it is.\n\nParameters\n\nname (str) – Name of the attribute to get\n\nReturns\n\nThe field value\n\nRaises\n\nAttributeError – If the attribute is not a field\n\nReturn type\n\nAny\n\n\n\n__init__(**values)\n\nInitialize a new Document.\n\nParameters\n\n**values (Any) – Field values to set on the document\n\nRaises\n\nAttributeError – If strict mode is enabled and an unknown field is provided\n\n\n\n__setattr__(name, value)\n\nSet a field value.\n\nThis method is called when an attribute is set. It checks if the attribute\nis a field and validates the value if it is.\n\nParameters\n\nname (str) – Name of the attribute to set\n\nvalue (Any) – Value to set\n\n\n\nasync classmethod bulk_create(documents, batch_size=1000, validate=True, return_documents=True, connection=None)\n\nCreate multiple documents in batches.\n\nParameters\n\ndocuments (List[Any]) – List of documents to create\n\nbatch_size (int) – Number of documents per batch\n\nvalidate (bool) – Whether to validate documents before creation\n\nreturn_documents (bool) – Whether to return created documents\n\nReturns\n\nList of created documents if return_documents=True, else count of created documents\n\nReturn type\n\nList[Any] | int\n\n\n\nclassmethod bulk_create_sync(documents, batch_size=1000, validate=True, return_documents=True, connection=None)\n\nCreate multiple documents in a single operation synchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally validate the\ndocuments and return the created documents.\n\nParameters\n\ndocuments (List[Any]) – List of Document instances to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nvalidate (bool) – Whether to validate documents (default: True)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[Any] | int\n\n\n\nasync classmethod create_index(index_name, fields, unique=False, search=False, analyzer=None, comment=None, connection=None)\n\nCreate an index on the document’s collection asynchronously.\n\nParameters\n\nindex_name (str) – Name of the index\n\nfields (List[str]) – List of field names to include in the index\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\ncomment (str | None) – Optional comment for the index\n\nconnection (Any | None) – Optional connection to use\n\n\n\nclassmethod create_index_sync(index_name, fields, unique=False, search=False, analyzer=None, comment=None, connection=None)\n\nCreate an index on the document’s collection synchronously.\n\nParameters\n\nindex_name (str) – Name of the index\n\nfields (List[str]) – List of field names to include in the index\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\ncomment (str | None) – Optional comment for the index\n\nconnection (Any | None) – Optional connection to use\n\n\n\nasync classmethod create_indexes(connection=None)\n\nCreate all indexes defined for this document class asynchronously.\n\nThis method creates indexes defined in the Meta class and also creates\nindexes for fields marked as indexed.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\n\n\nclassmethod create_indexes_sync(connection=None)\n\nCreate all indexes defined for this document class synchronously.\n\nThis method creates indexes defined in the Meta class and also creates\nindexes for fields marked as indexed.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\n\n\nclassmethod create_materialized_view(name, query, refresh_interval=None, aggregations=None, select_fields=None, **kwargs)\n\nCreate a materialized view based on a query.\n\nThis method creates a materialized view in SurrealDB based on a query.\nMaterialized views are precomputed views of data that can be used to\nimprove query performance for frequently accessed aggregated data.\n\nParameters\n\nname (str) – The name of the materialized view\n\nquery (QuerySet) – The query that defines the materialized view\n\nrefresh_interval (str) – The interval at which the view is refreshed (e.g., “1h”, “30m”)\n\naggregations – Dictionary of field names and aggregation functions\n\nselect_fields – List of fields to select (if None, selects all fields)\n\n**kwargs – Additional keyword arguments to pass to the MaterializedView constructor\n\nReturns\n\nA MaterializedView instance\n\n\n\nasync classmethod create_table(connection=None, schemafull=True)\n\nCreate the table for this document class asynchronously.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\nschemafull (bool) – Whether to create a SCHEMAFULL table (default: True)\n\n\n\nclassmethod create_table_sync(connection=None, schemafull=True)\n\nCreate the table for this document class synchronously.\n\n\n\n\n\nasync delete(connection=None)\n\nDelete the document from the database asynchronously.\n\nThis method deletes the document from the database.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nTrue if the document was deleted\n\nRaises\n\nValueError – If the document doesn’t have an ID\n\nReturn type\n\nbool\n\n\n\nasync delete_relation_to(relation_name, target_instance=None, connection=None)\n\nDelete a relation to another document asynchronously.\n\nThis method deletes a relation from this document to another document.\nIf target_instance is not provided, it deletes all relations with the\nspecified name from this document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any | None) – The document instance the relation is to (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nNumber of deleted relations\n\nReturn type\n\nint\n\n\n\ndelete_relation_to_sync(relation_name, target_instance=None, connection=None)\n\nDelete a relation to another document synchronously.\n\nThis method deletes a relation from this document to another document.\nIf target_instance is not provided, it deletes all relations with the\nspecified name from this document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any | None) – The document instance the relation is to (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nNumber of deleted relations\n\nReturn type\n\nint\n\n\n\ndelete_sync(connection=None)\n\nDelete the document from the database synchronously.\n\nThis method deletes the document from the database.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nTrue if the document was deleted\n\nRaises\n\nValueError – If the document doesn’t have an ID\n\nReturn type\n\nbool\n\n\n\nasync classmethod drop_table(connection=None, if_exists=True)\n\nDrop the table for this document class asynchronously.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\nif_exists (bool) – Whether to use IF EXISTS clause to avoid errors if table doesn’t exist\n\n\n\nclassmethod drop_table_sync(connection=None, if_exists=True)\n\nDrop the table for this document class synchronously.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\nif_exists (bool) – Whether to use IF EXISTS clause to avoid errors if table doesn’t exist\n\n\n\nasync fetch_relation(relation_name, target_document=None, relation_document=None, connection=None, **filters)\n\nFetch related documents asynchronously.\n\nThis method fetches documents related to this document through\nthe specified relation.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_document (Type | None) – The document class of the target documents (optional)\n\nrelation_document (Type | None) – The document class representing the relation (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\n**filters (Any) – Filters to apply to the related documents\n\nReturns\n\nList of related documents, relation documents, or relation records\n\nReturn type\n\nList[Any]\n\n\n\nfetch_relation_sync(relation_name, target_document=None, relation_document=None, connection=None, **filters)\n\nFetch related documents synchronously.\n\nThis method fetches documents related to this document through\nthe specified relation.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_document (Type | None) – The document class of the target documents (optional)\n\nrelation_document (Type | None) – The document class representing the relation (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\n**filters (Any) – Filters to apply to the related documents\n\nReturns\n\nList of related documents, relation documents, or relation records\n\nReturn type\n\nList[Any]\n\n\n\nclassmethod from_db(data, dereference=False)\n\nCreate a document instance from database data.\n\nParameters\n\ndata (Any) – Data from the database (dictionary, string, RecordID, etc.)\n\ndereference (bool) – Whether to dereference references (default: False)\n\nReturns\n\nA new document instance\n\nReturn type\n\nDocument\n\n\n\nasync classmethod get(id, dereference=False, dereference_depth=1, **kwargs)\n\nGet a document by ID with optional dereferencing using FETCH.\n\nThis method retrieves a document by ID and optionally resolves references\nusing SurrealDB’s FETCH clause for efficient reference resolution.\n\nParameters\n\nid (str | int | RecordID) – The ID of the document to retrieve\n\ndereference (bool) – Whether to resolve references (default: False)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\n**kwargs (Any) – Additional arguments to pass to the get method\n\nReturns\n\nThe document instance with optionally resolved references\n\nReturn type\n\nT\n\n\n\nclassmethod get_sync(id, dereference=False, dereference_depth=1, **kwargs)\n\nGet a document by ID with optional dereferencing synchronously using FETCH.\n\nThis method retrieves a document by ID and optionally resolves references\nusing SurrealDB’s FETCH clause for efficient reference resolution.\n\nParameters\n\nid (str | int | RecordID) – The ID of the document to retrieve\n\ndereference (bool) – Whether to resolve references (default: False)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\n**kwargs (Any) – Additional arguments to pass to the get method\n\nReturns\n\nThe document instance with optionally resolved references\n\nReturn type\n\nT\n\n\n\nproperty id: str | int | RecordID | None\n\nGet the document ID.\n\nReturns\n\nThe document ID (string, RecordID, or None)\n\n\n\nobjects\n\nDescriptor that provides QuerySet access through Document.objects.\n\nThis class is a descriptor that provides access to a QuerySet through\nthe Document.objects attribute. It allows querying documents of a specific\ndocument class using the Document.objects attribute.\n\n\n\nowner\n\nThe document class that owns this descriptor\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\nasync refresh(connection=None)\n\nRefresh the document from the database asynchronously.\n\nThis method refreshes the document’s data from the database.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nThe refreshed document instance\n\nRaises\n\nValueError – If the document doesn’t have an ID\n\nReturn type\n\nDocument\n\n\n\nrefresh_sync(connection=None)\n\nRefresh the document from the database synchronously.\n\nThis method refreshes the document’s data from the database.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nThe refreshed document instance\n\nRaises\n\nValueError – If the document doesn’t have an ID\n\nReturn type\n\nDocument\n\n\n\nasync relate_to(relation_name, target_instance, connection=None, **attrs)\n\nCreate a relation to another document asynchronously.\n\nThis method creates a relation from this document to another document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any) – The document instance to relate to\n\nconnection (Any | None) – The database connection to use (optional)\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nReturn type\n\nAny | None\n\n\n\nrelate_to_sync(relation_name, target_instance, connection=None, **attrs)\n\nCreate a relation to another document synchronously.\n\nThis method creates a relation from this document to another document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any) – The document instance to relate to\n\nconnection (Any | None) – The database connection to use (optional)\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nReturn type\n\nAny | None\n\n\n\nclassmethod relates(relation_name)\n\nGet a RelationQuerySet for a specific relation.\n\nThis method returns a function that creates a RelationQuerySet for\nthe specified relation name. The function can be called with an\noptional connection parameter.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\nReturns\n\nFunction that creates a RelationQuerySet\n\nReturn type\n\ncallable\n\n\n\nasync resolve_references(depth=1)\n\nResolve all references in this document using FETCH.\n\nThis method uses SurrealDB’s FETCH clause to efficiently resolve references\ninstead of making individual queries for each reference.\n\nParameters\n\ndepth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nThe document instance with resolved references\n\nReturn type\n\nDocument\n\n\n\nresolve_references_sync(depth=1)\n\nResolve all references in this document synchronously using FETCH.\n\nThis method uses SurrealDB’s FETCH clause to efficiently resolve references\ninstead of making individual queries for each reference.\n\nParameters\n\ndepth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nThe document instance with resolved references\n\nReturn type\n\nDocument\n\n\n\nasync resolve_relation(relation_name, target_document_class=None, relation_document=None, connection=None)\n\nResolve related documents from a relation fetch result asynchronously.\n\nThis method resolves related documents from a relation fetch result.\nIt fetches the relation data and then resolves each related document.\n\nParameters\n\nrelation_name (str) – Name of the relation to resolve\n\ntarget_document_class (Type | None) – Class of the target document (optional)\n\nrelation_document (Type | None) – The document class representing the relation (optional)\n\nconnection (Any | None) – Database connection to use (optional)\n\nReturns\n\nList of resolved document instances\n\nReturn type\n\nList[Any]\n\n\n\nresolve_relation_sync(relation_name, target_document_class=None, relation_document=None, connection=None)\n\nResolve related documents from a relation fetch result synchronously.\n\nThis method resolves related documents from a relation fetch result.\nIt fetches the relation data and then resolves each related document.\n\nParameters\n\nrelation_name (str) – Name of the relation to resolve\n\ntarget_document_class (Type | None) – Class of the target document (optional)\n\nrelation_document (Type | None) – The document class representing the relation (optional)\n\nconnection (Any | None) – Database connection to use (optional)\n\nReturns\n\nList of resolved document instances\n\nReturn type\n\nList[Any]\n\n\n\nasync save(connection=None)\n\nSave the document to the database asynchronously.\n\nThis method saves the document to the database, either creating\na new document or updating an existing one based on whether the\ndocument has an ID.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional, deprecated for multi-backend)\n\nReturns\n\nThe saved document instance\n\nRaises\n\nValidationError – If the document fails validation\n\nReturn type\n\nT\n\n\n\nsave_sync(connection=None)\n\nSave the document to the database synchronously.\n\nThis method saves the document to the database, either creating\na new document or updating an existing one based on whether the\ndocument has an ID.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nThe saved document instance\n\nRaises\n\nValidationError – If the document fails validation\n\nReturn type\n\nT\n\n\n\nclassmethod to_dataclass()\n\nConvert the document class to a dataclass.\n\nThis method creates a dataclass based on the document’s fields.\nIt uses the field names, types, and whether they are required.\nRequired fields have no default value, making them required during initialization.\nNon-required fields use None as default if they don’t define one.\nA __post_init__ method is added to validate all fields after initialization.\n\nReturns\n\nA dataclass type based on the document’s fields\n\n\n\nto_db()\n\nConvert the document to a database-friendly dictionary.\n\nThis method converts the document to a dictionary suitable for\nstorage in the database. It applies field-specific conversions\nand includes only non-None values unless the field is required.\n\nReturns\n\nDictionary of field values for the database\n\nReturn type\n\nDict[str, str | int | float | bool | None | Dict[str, Any] | List[Any]]\n\n\n\nto_dict()\n\nConvert the document to a dictionary.\n\nThis method converts the document to a dictionary containing all\nfield values including the document ID. It ensures that RecordID\nobjects are properly converted to strings for JSON serialization.\nIt also recursively converts embedded documents to dictionaries.\n\nReturns\n\nDictionary of field values including ID\n\nReturn type\n\nDict[str, str | int | float | bool | None | Dict[str, Any] | List[Any]]\n\n\n\nasync traverse_path(path_spec, target_document=None, connection=None, **filters)\n\nTraverse a path in the graph asynchronously.\n\nThis method traverses a path in the graph starting from this document.\nThe path_spec is a string like “->[watched]->->[acted_in]->” which describes\na path through the graph.\n\nParameters\n\npath_spec (str) – String describing the path to traverse\n\ntarget_document (Type | None) – The document class to return instances of (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\n**filters (Any) – Filters to apply to the results\n\nReturns\n\nList of documents or path results\n\nRaises\n\nValueError – If the document is not saved\n\nReturn type\n\nList[Any]\n\n\n\ntraverse_path_sync(path_spec, target_document=None, connection=None, **filters)\n\nTraverse a path in the graph synchronously.\n\nThis method traverses a path in the graph starting from this document.\nThe path_spec is a string like “->[watched]->->[acted_in]->” which describes\na path through the graph.\n\nParameters\n\npath_spec (str) – String describing the path to traverse\n\ntarget_document (Type | None) – The document class to return instances of (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\n**filters (Any) – Filters to apply to the results\n\nReturns\n\nList of documents or path results\n\nRaises\n\nValueError – If the document is not saved\n\nReturn type\n\nList[Any]\n\n\n\nasync update_relation_to(relation_name, target_instance, connection=None, **attrs)\n\nUpdate a relation to another document asynchronously.\n\nThis method updates a relation from this document to another document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any) – The document instance the relation is to\n\nconnection (Any | None) – The database connection to use (optional)\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nReturn type\n\nAny | None\n\n\n\nupdate_relation_to_sync(relation_name, target_instance, connection=None, **attrs)\n\nUpdate a relation to another document synchronously.\n\nThis method updates a relation from this document to another document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any) – The document instance the relation is to\n\nconnection (Any | None) – The database connection to use (optional)\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nReturn type\n\nAny | None\n\n\n\nvalidate()\n\nValidate all fields.\n\nThis method validates all fields in the document against their\nvalidation rules.\n\nRaises\n\nValidationError – If a field fails validation\n\n\n\nclass quantumengine.RelationDocument(**values)\n\nBases: Document\n\nA Document that represents a relationship between two documents.\n\nRelationDocuments should be used to model relationships with additional attributes.\nThey can be used with Document.relates(), Document.fetch_relation(), and Document.resolve_relation().\n\n\n\n\n\nclass Meta\n\nBases: object\n\nMeta options for RelationDocument.\n\n\n\nabstract = True\n\n\n\n\n\nasync classmethod create_relation(from_instance, to_instance, **attrs)\n\nCreate a relation between two instances asynchronously.\n\nThis method creates a relation between two document instances and\nreturns a RelationDocument instance representing the relationship.\n\nParameters\n\nfrom_instance (Any) – The instance to create the relation from\n\nto_instance (Any) – The instance to create the relation to\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nA RelationDocument instance representing the relationship\n\nRaises\n\nValueError – If either instance is not saved\n\nReturn type\n\nRelationDocument\n\n\n\nclassmethod create_relation_sync(from_instance, to_instance, **attrs)\n\nCreate a relation between two instances synchronously.\n\nThis method creates a relation between two document instances and\nreturns a RelationDocument instance representing the relationship.\n\nParameters\n\nfrom_instance (Any) – The instance to create the relation from\n\nto_instance (Any) – The instance to create the relation to\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nA RelationDocument instance representing the relationship\n\nRaises\n\nValueError – If either instance is not saved\n\nReturn type\n\nRelationDocument\n\n\n\nclassmethod find_by_in_document(in_doc, **additional_filters)\n\nQuery RelationDocument by in_document field.\n\nParameters\n\nin_doc – The document instance or ID to filter by\n\n**additional_filters – Additional filters to apply\n\nReturns\n\nQuerySet filtered by in_document\n\n\n\nclassmethod find_by_in_document_sync(in_doc, **additional_filters)\n\nQuery RelationDocument by in_document field synchronously.\n\nParameters\n\nin_doc – The document instance or ID to filter by\n\n**additional_filters – Additional filters to apply\n\nReturns\n\nQuerySet filtered by in_document\n\n\n\nclassmethod get_relation_name()\n\nGet the name of the relation.\n\nBy default, this is the lowercase name of the class.\nOverride this method to customize the relation name.\n\nReturns\n\nThe name of the relation\n\nReturn type\n\nstr\n\n\n\nclassmethod relates(from_document=None, to_document=None)\n\nGet a RelationQuerySet for this relation.\n\nThis method returns a function that creates a RelationQuerySet for\nthis relation. The function can be called with an optional connection parameter.\n\nParameters\n\nfrom_document (Type | None) – The document class the relation is from (optional)\n\nto_document (Type | None) – The document class the relation is to (optional)\n\nReturns\n\nFunction that creates a RelationQuerySet\n\nReturn type\n\ncallable\n\n\n\nasync resolve_out(connection=None)\n\nResolve the out_document field asynchronously.\n\nThis method resolves the out_document field if it’s currently just an ID reference.\nIf the out_document is already a document instance, it returns it directly.\n\nParameters\n\nconnection – Database connection to use (optional)\n\nReturns\n\nThe resolved out_document instance\n\n\n\nresolve_out_sync(connection=None)\n\nResolve the out_document field synchronously.\n\nThis method resolves the out_document field if it’s currently just an ID reference.\nIf the out_document is already a document instance, it returns it directly.\n\nParameters\n\nconnection – Database connection to use (optional)\n\nReturns\n\nThe resolved out_document instance\n\n\n\nexception quantumengine.DoesNotExist\n\nBases: QuantumEngineError\n\nRaised when a document does not exist in the database.\n\nThis exception is raised when attempting to retrieve a document that\ndoes not exist in the database, such as when using the get() method\nwith a query that matches no documents.\n\n\n\nexception quantumengine.MultipleObjectsReturned\n\nBases: QuantumEngineError\n\nRaised when multiple documents are returned when only one was expected.\n\nThis exception is raised when a query that is expected to return a single\ndocument returns multiple documents, such as when using the get() method\nwith a query that matches multiple documents.\n\n\n\nexception quantumengine.ValidationError(message, errors=None, field_name=None)\n\nBases: QuantumEngineError\n\nRaised when document validation fails.\n\nThis exception is raised when a document fails validation, such as when\na required field is missing or a field value is of the wrong type.\n\n\n\n\n\nerrors\n\nDictionary of validation errors by field\n\n\n\nfield_name\n\nName of the field that failed validation, if applicable\n\n\n\n__init__(message, errors=None, field_name=None)\n\nInitialize a ValidationError.\n\nParameters\n\nmessage (str) – The error message\n\nerrors (Dict[str, Any] | None) – Dictionary of validation errors by field\n\nfield_name (str | None) – Name of the field that failed validation, if applicable\n\n\n\nclass quantumengine.Field(required=False, default=None, db_field=None, define_schema=False, indexed=False, unique=False, search=False, analyzer=None, index_with=None, materialized=None, indexes=None, help_text=None)\n\nBases: Generic[T]\n\nBase class for all field types.\n\nThis class provides the foundation for all field types in the document model.\nIt includes methods for validation and conversion between Python and database\nrepresentations.\n\n\n\n\n\nrequired\n\nWhether the field is required\n\n\n\ndefault\n\nDefault value for the field\n\n\n\nname\n\nName of the field (set during document class creation)\n\n\n\ndb_field\n\nName of the field in the database\n\n\n\nowner_document\n\nThe document class that owns this field\n\n\n\ndefine_schema\n\nWhether to define this field in the schema (even for SCHEMALESS tables)\n\n\n\n__init__(required=False, default=None, db_field=None, define_schema=False, indexed=False, unique=False, search=False, analyzer=None, index_with=None, materialized=None, indexes=None, help_text=None)\n\nInitialize a new Field.\n\nParameters\n\nrequired (bool) – Whether the field is required\n\ndefault (Any) – Default value for the field\n\ndb_field (str | None) – Name of the field in the database (defaults to the field name)\n\ndefine_schema (bool) – Whether to define this field in the schema (even for SCHEMALESS tables)\n\nindexed (bool) – Whether the field should be indexed\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\nindex_with (List[str] | None) – List of other field names to include in the index\n\nmaterialized (str | None) – ClickHouse materialized column expression\n\nhelp_text (str | None) – Human-readable description of what this field represents\n\nindexes (List[Dict[str, Any]] | None) – List of index specifications for advanced indexing\n\n\n\nfrom_db(value, backend=None)\n\nConvert database value to Python representation.\n\nThis method converts a value from the database to a Python value.\nSubclasses should override this method to provide type-specific conversion.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nbackend (str | None) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nT\n\n\n\nto_db(value, backend=None)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a representation that can be\nstored in the database. Subclasses should override this method to\nprovide type-specific conversion.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nbackend (str | None) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate the field value.\n\nThis method checks if the value is valid for this field type.\nSubclasses should override this method to provide type-specific validation.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValueError – If the value is invalid\n\nReturn type\n\nT\n\n\n\nclass quantumengine.StringField(min_length=None, max_length=None, regex=None, choices=None, **kwargs)\n\nBases: Field[str]\n\nString field type.\n\nThis field type stores string values and provides validation for\nminimum length, maximum length, and regex pattern matching.\n\n\n\n\n\nmin_length\n\nMinimum length of the string\n\n\n\nmax_length\n\nMaximum length of the string\n\n\n\nregex\n\nRegular expression pattern to match\n\n\n\n__init__(min_length=None, max_length=None, regex=None, choices=None, **kwargs)\n\nInitialize a new StringField.\n\nParameters\n\nmin_length (int | None) – Minimum length of the string\n\nmax_length (int | None) – Maximum length of the string\n\nregex (str | None) – Regular expression pattern to match\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the string value.\n\nThis method checks if the value is a valid string and meets the\nconstraints for minimum length, maximum length, and regex pattern.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated string value\n\nRaises\n\nTypeError – If the value is not a string\n\nValueError – If the value does not meet the constraints\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.NumberField(min_value=None, max_value=None, **kwargs)\n\nBases: Field[int | float]\n\nBase class for numeric fields.\n\nThis field type is the base class for all numeric field types.\nIt provides validation for minimum and maximum values.\n\n\n\n\n\nmin_value\n\nMinimum allowed value\n\n\n\nmax_value\n\nMaximum allowed value\n\n\n\n__init__(min_value=None, max_value=None, **kwargs)\n\nInitialize a new NumberField.\n\nParameters\n\nmin_value (int | float | None) – Minimum allowed value\n\nmax_value (int | float | None) – Maximum allowed value\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the numeric value.\n\nThis method checks if the value is a valid number and meets the\nconstraints for minimum and maximum values.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated numeric value\n\nRaises\n\nTypeError – If the value is not a number\n\nValueError – If the value does not meet the constraints\n\nReturn type\n\nint | float\n\n\n\nclass quantumengine.IntField(**kwargs)\n\nBases: NumberField\n\nInteger field type.\n\nThis field type stores integer values and provides validation\nto ensure the value is an integer.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new IntField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nto_db(value, backend=None)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to an integer for storage in the database.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe integer value for the database\n\nReturn type\n\nint | None\n\n\n\nvalidate(value)\n\nValidate the integer value.\n\nThis method checks if the value is a valid integer.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated integer value\n\nRaises\n\nTypeError – If the value is not an integer\n\nReturn type\n\nint\n\n\n\nclass quantumengine.FloatField(**kwargs)\n\nBases: NumberField\n\nFloat field type.\n\nThis field type stores floating-point values and provides validation\nto ensure the value can be converted to a float.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new FloatField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the float value.\n\nThis method checks if the value can be converted to a float.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated float value\n\nRaises\n\nTypeError – If the value cannot be converted to a float\n\nReturn type\n\nfloat\n\n\n\nclass quantumengine.BooleanField(**kwargs)\n\nBases: Field[bool]\n\nBoolean field type.\n\nThis field type stores boolean values and provides validation\nto ensure the value is a boolean.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new BooleanField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the boolean value.\n\nThis method checks if the value is a valid boolean.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated boolean value\n\nRaises\n\nTypeError – If the value is not a boolean\n\nReturn type\n\nbool\n\n\n\nclass quantumengine.DateTimeField(**kwargs)\n\nBases: Field[datetime]\n\nDateTime field type.\n\nThis field type stores datetime values and provides validation and\nconversion between Python datetime objects and SurrealDB datetime format.\n\nSurrealDB v2.0.0+ requires datetime values to have a d prefix or be cast\nas <datetime>. This field handles the conversion automatically, so you can\nuse standard Python datetime objects in your code.\n\nExample\n\n>>> class Event(Document):\n...     created_at = DateTimeField(default=datetime.datetime.now)\n...     scheduled_for = DateTimeField()\n>>>\n>>> # Python datetime objects are automatically converted to SurrealDB format\n>>> event = Event(scheduled_for=datetime.datetime.now() + datetime.timedelta(days=7))\n>>> await event.save()\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new DateTimeField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the datetime value.\n\nThis method checks if the value is a valid datetime or can be\nconverted to a datetime from an ISO format string.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated datetime value\n\nRaises\n\nTypeError – If the value cannot be converted to a datetime\n\nReturn type\n\ndatetime\n\n\n\nclass quantumengine.ListField(field_type=None, **kwargs)\n\nBases: Field\n\nList field type.\n\nThis field type stores lists of values and provides validation and\nconversion for the items in the list. The items can be of a specific\nfield type, which is used to validate and convert each item.\n\n\n\n\n\nfield_type\n\nThe field type for items in the list\n\n\n\n__init__(field_type=None, **kwargs)\n\nInitialize a new ListField.\n\nParameters\n\nfield_type (Field | None) – The field type for items in the list\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database list to Python representation.\n\nThis method converts a database list to a Python representation by\nconverting each item using the field_type if provided.\n\nParameters\n\nvalue (List[Any] | None) – The database list to convert\n\nReturns\n\nThe Python representation of the list\n\nReturn type\n\nList[Any] | None\n\n\n\nto_db(value, backend=None)\n\nConvert Python list to database representation.\n\nThis method converts a Python list to a database representation by\nconverting each item using the field_type if provided. For ClickHouse,\nlists are converted to JSON strings.\n\nParameters\n\nvalue (List[Any] | None) – The Python list to convert\n\nbackend (str | None) – The backend name for backend-specific serialization\n\nReturns\n\nThe database representation of the list\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate the list value.\n\nThis method checks if the value is a valid list and validates each\nitem in the list using the field_type if provided.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated list value\n\nRaises\n\nTypeError – If the value is not a list\n\nValueError – If an item in the list fails validation\n\nReturn type\n\nList[Any] | None\n\n\n\nclass quantumengine.DictField(field_type=None, **kwargs)\n\nBases: Field\n\nDict field type.\n\nThis field type stores dictionaries of values and provides validation and\nconversion for the values in the dictionary. The values can be of a specific\nfield type, which is used to validate and convert each value.\n\n\n\n\n\nfield_type\n\nThe field type for values in the dictionary\n\n\n\n__init__(field_type=None, **kwargs)\n\nInitialize a new DictField.\n\nParameters\n\nfield_type (Field | None) – The field type for values in the dictionary\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database dictionary to Python representation.\n\nThis method converts a database dictionary to a Python representation by\nconverting each value using the field_type if provided.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The database dictionary to convert\n\nReturns\n\nThe Python representation of the dictionary\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nto_db(value, backend=None)\n\nConvert Python dictionary to database representation.\n\nThis method converts a Python dictionary to a database representation by\nconverting each value using the field_type if provided. For ClickHouse,\ndictionaries are converted to JSON strings.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The Python dictionary to convert\n\nbackend (str | None) – The backend name for backend-specific serialization\n\nReturns\n\nThe database representation of the dictionary\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate the dictionary value.\n\nThis method checks if the value is a valid dictionary and validates each\nvalue in the dictionary using the field_type if provided.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated dictionary value\n\nRaises\n\nTypeError – If the value is not a dictionary\n\nValueError – If a value in the dictionary fails validation\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nclass quantumengine.ReferenceField(document_type, **kwargs)\n\nBases: Field\n\nReference to another document.\n\nThis field type stores references to other documents in the database.\nIt can accept a document instance, an ID string, or a dictionary with an ID.\n\n\n\n\n\ndocument_type\n\nThe type of document being referenced\n\n\n\n__init__(document_type, **kwargs)\n\nInitialize a new ReferenceField.\n\nParameters\n\ndocument_type (Type) – The type of document being referenced\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value, dereference=False)\n\nConvert database reference to Python representation.\n\nThis method converts a database reference to a Python representation.\nIf the value is already a resolved document (from FETCH), return it as is.\nIf dereference is False, it returns the string reference as is.\nIf dereference is True but value is still a string, fetch the referenced document.\n\nParameters\n\nvalue (Any) – The database reference to convert\n\ndereference (bool) – Whether to dereference the reference (default: False)\n\nReturns\n\nThe Python representation of the reference\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python reference to database representation.\n\nThis method converts a Python reference (document instance, ID string,\ndictionary with an ID, or RecordID object) to a database representation.\n\nParameters\n\nvalue (Any) – The Python reference to convert\n\nReturns\n\nThe database representation of the reference\n\nRaises\n\nValueError – If the referenced document is not saved\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the reference value.\n\nThis method checks if the value is a valid reference to another document.\nIt accepts a document instance, an ID string, a dictionary with an ID, or a RecordID object.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated reference value\n\nRaises\n\nTypeError – If the value is not a valid reference\n\nValueError – If the referenced document is not saved\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.RelationField(to_document, **kwargs)\n\nBases: Field\n\nField representing a relation between documents.\n\nThis field type stores relations between documents in the database.\nIt can accept a document instance, an ID string, or a dictionary with an ID.\n\n\n\n\n\nto_document\n\nThe type of document being related to\n\n\n\n__init__(to_document, **kwargs)\n\nInitialize a new RelationField.\n\nParameters\n\nto_document (Type) – The type of document being related to\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value, dereference=False)\n\nConvert database relation to Python representation.\n\nThis method converts a database relation to a Python representation.\nIf the value is already a resolved document (from FETCH), return it as is.\nIf dereference is False, it returns the string reference as is.\nIf dereference is True but value is still a string, fetch the related document.\n\nParameters\n\nvalue (Any) – The database relation to convert\n\ndereference (bool) – Whether to dereference the relation (default: False)\n\nReturns\n\nThe Python representation of the relation\n\nReturn type\n\nAny\n\n\n\nasync get_related_documents(instance)\n\nGet documents related through this relation field.\n\nThis method retrieves documents related to the given instance through\nthis relation field. It uses the RelationQuerySet to get related documents.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\nReturns\n\nList of related documents\n\nRaises\n\nValueError – If the instance is not saved\n\nReturn type\n\nList[Any]\n\n\n\nget_related_documents_sync(instance)\n\nGet documents related through this relation field synchronously.\n\nThis method retrieves documents related to the given instance through\nthis relation field. It uses the RelationQuerySet to get related documents.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\nReturns\n\nList of related documents\n\nRaises\n\nValueError – If the instance is not saved\n\nReturn type\n\nList[Any]\n\n\n\nto_db(value)\n\nConvert Python relation to database representation.\n\nThis method converts a Python relation (document instance, ID string,\nor dictionary with an ID) to a database representation.\n\nParameters\n\nvalue (Any) – The Python relation to convert\n\nReturns\n\nThe database representation of the relation\n\nRaises\n\nValueError – If the related document is not saved\n\nReturn type\n\nstr | None\n\n\n\nvalidate(value)\n\nValidate the relation value.\n\nThis method checks if the value is a valid relation to another document.\nIt accepts a document instance, an ID string, or a dictionary with an ID.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated relation value\n\nRaises\n\nTypeError – If the value is not a valid relation\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.GeometryField(required=False, **kwargs)\n\nBases: Field\n\nField for handling geometric data in SurrealDB.\n\nThis field validates and processes geometric data according to SurrealDB’s\ngeometry specification. It supports various geometry types including Point,\nLineString, Polygon, MultiPoint, MultiLineString, and MultiPolygon.\n\n\n\n\n\nrequired\n\nWhether the field is required. Defaults to False.\n\nType\n\nbool\n\nExample\n\n>>> class Location(Document):\n...     point = GeometryField()\n>>>\n>>> # Using GeometryPoint for precise coordinate handling\n>>> from quantumengine.geometry import GeometryPoint\n>>> loc = Location(point=GeometryPoint([-122.4194, 37.7749]))\n\n\n\n__init__(required=False, **kwargs)\n\nInitialize a GeometryField.\n\nParameters\n\nrequired (bool, optional) – Whether this field is required. Defaults to False.\n\n**kwargs – Additional field options to be passed to the parent Field class.\n\n\n\nvalidate(value)\n\nValidate geometry data.\n\nEnsures the geometry data follows SurrealDB’s expected format with proper structure\nand coordinates. Does not modify the numeric values to preserve SurrealDB’s\nnative geometry handling.\n\nParameters\n\nvalue – The geometry value to validate. Can be a GeometryPoint object or\na dict with ‘type’ and ‘coordinates’ fields.\n\nReturns\n\nThe validated geometry data.\n\nReturn type\n\ndict\n\nRaises\n\nValidationError – If the geometry data is invalid or improperly formatted.\n\n\n\nclass quantumengine.QuerySet(document_class, connection=None)\n\nBases: BaseQuerySet, Generic[T]\n\nQuery builder for SurrealDB with generic type safety.\n\nThis class provides a query builder for document classes with a predefined schema.\nIt extends BaseQuerySet to provide methods for querying and manipulating\ndocuments of a specific document class.\n\nType Parameters:\n\nT: The document class type that this QuerySet operates on\n\n\n\n\n\ndocument_class\n\nThe document class to query\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\n__init__(document_class, connection=None)\n\nInitialize a new QuerySet.\n\nParameters\n\ndocument_class (Type[T]) – The document class to query\n\nconnection (Any) – The database connection to use for queries (optional, will use document’s backend if None)\n\n\n\nasync all(dereference=False)\n\nExecute the query and return all results asynchronously.\n\nThis method builds and executes the query, then converts the results\nto instances of the document class. Includes automatic retry on transient failures.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\nReturns\n\nList of document instances\n\nReturn type\n\nList[T]\n\n\n\nall_sync(dereference=False)\n\nExecute the query and return all results synchronously.\n\nThis method builds and executes the query, then converts the results\nto instances of the document class. Includes automatic retry on transient failures.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\nReturns\n\nList of document instances\n\nReturn type\n\nList[T]\n\n\n\nasync bulk_create(documents, batch_size=1000, validate=True, return_documents=True)\n\nCreate multiple documents in a single operation asynchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally validate the\ndocuments and return the created documents.\n\nParameters\n\ndocuments (List[T]) – List of Document instances to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nvalidate (bool) – Whether to validate documents (default: True)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[T] | int\n\n\n\nbulk_create_sync(documents, batch_size=1000, validate=True, return_documents=True)\n\nCreate multiple documents in a single operation synchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally validate the\ndocuments and return the created documents.\n\nParameters\n\ndocuments (List[T]) – List of Document instances to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nvalidate (bool) – Whether to validate documents (default: True)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[T] | int\n\n\n\nasync count()\n\nCount documents matching the query asynchronously.\n\nThis method builds and executes a count query to count the number\nof documents matching the query. Includes automatic retry on transient failures.\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\ncount_sync()\n\nCount documents matching the query synchronously.\n\nThis method builds and executes a count query to count the number\nof documents matching the query. Includes automatic retry on transient failures.\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\nasync create(**kwargs)\n\nCreate a new document asynchronously.\n\nThis method creates a new document with the given field values.\nIncludes automatic retry on transient failures.\n\nParameters\n\n**kwargs (Any) – Field names and values for the new document\n\nReturns\n\nThe created document\n\nReturn type\n\nT\n\n\n\ncreate_sync(**kwargs)\n\nCreate a new document synchronously.\n\nThis method creates a new document with the given field values.\nIncludes automatic retry on transient failures.\n\nParameters\n\n**kwargs (Any) – Field names and values for the new document\n\nReturns\n\nThe created document\n\nReturn type\n\nT\n\n\n\nasync delete()\n\nDelete documents matching the query asynchronously with performance optimizations.\n\nThis method deletes documents matching the query.\nUses direct record access for bulk ID operations for better performance.\n\nReturns\n\nNumber of deleted documents\n\nReturn type\n\nint\n\n\n\ndelete_sync()\n\nDelete documents matching the query synchronously with performance optimizations.\n\nThis method deletes documents matching the query.\nUses direct record access for bulk ID operations for better performance.\n\nReturns\n\nNumber of deleted documents\n\nReturn type\n\nint\n\n\n\nasync explain()\n\nGet query execution plan for performance analysis.\n\nThis method appends EXPLAIN to the query to show how the database\nwill execute it, helping identify performance bottlenecks.\n\nReturns\n\nList of execution plan steps with details\n\nReturn type\n\nList[Dict[str, Any]]\n\nExample\n\nplan = await User.objects.filter(age__lt=18).explain()\nprint(f”Query will use: {plan[0][‘operation’]}”)\n\nRaises\n\nNotImplementedError – If backend doesn’t support EXPLAIN queries\n\n\n\nexplain_sync()\n\nGet query execution plan for performance analysis synchronously.\n\nReturns\n\nList of execution plan steps with details\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nasync get(dereference=False, **kwargs)\n\nGet a single document matching the query asynchronously.\n\nThis method applies filters and ensures that exactly one document is returned.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nThe matching document\n\nRaises\n\nDoesNotExist – If no matching document is found\n\nMultipleObjectsReturned – If multiple matching documents are found\n\nReturn type\n\nT\n\n\n\nget_sync(dereference=False, **kwargs)\n\nGet a single document matching the query synchronously.\n\nThis method applies filters and ensures that exactly one document is returned.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nThe matching document\n\nRaises\n\nDoesNotExist – If no matching document is found\n\nMultipleObjectsReturned – If multiple matching documents are found\n\nReturn type\n\nT\n\n\n\nasync join(field_name, target_fields=None, dereference=True, dereference_depth=1)\n\nPerform a JOIN-like operation on a reference field using FETCH.\n\nThis method performs a JOIN-like operation on a reference field by using\nSurrealDB’s FETCH clause to efficiently resolve references in a single query.\n\nParameters\n\nfield_name (str) – The name of the reference field to join on\n\ntarget_fields (List[str] | None) – Optional list of fields to select from the target document\n\ndereference (bool) – Whether to dereference references in the joined documents (default: True)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nList of documents with joined data\n\nRaises\n\nValueError – If the field is not a ReferenceField\n\nReturn type\n\nList[Any]\n\n\n\njoin_sync(field_name, target_fields=None, dereference=True, dereference_depth=1)\n\nPerform a JOIN-like operation on a reference field synchronously using FETCH.\n\nThis method performs a JOIN-like operation on a reference field by using\nSurrealDB’s FETCH clause to efficiently resolve references in a single query.\n\nParameters\n\nfield_name (str) – The name of the reference field to join on\n\ntarget_fields (List[str] | None) – Optional list of fields to select from the target document\n\ndereference (bool) – Whether to dereference references in the joined documents (default: True)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nList of documents with joined data\n\nRaises\n\nValueError – If the field is not a ReferenceField\n\nReturn type\n\nList[Any]\n\n\n\nsuggest_indexes()\n\nSuggest indexes based on current query patterns.\n\nAnalyzes the current query conditions and suggests optimal\nindexes that could improve performance.\n\nReturns\n\nList of suggested DEFINE INDEX statements\n\nReturn type\n\nList[str]\n\nExample\n\n>>> suggestions = User.objects.filter(age__lt=18, city=\"NYC\").suggest_indexes()\n>>> for suggestion in suggestions:\n...     print(f\"Consider: {suggestion}\")\n\n\n\nasync update(**kwargs)\n\nUpdate documents matching the query asynchronously with performance optimizations.\n\nThis method updates documents matching the query with the given field values.\nUses direct record access for bulk ID operations for better performance.\n\nParameters\n\n**kwargs (Any) – Field names and values to update\n\nReturns\n\nList of updated documents\n\nReturn type\n\nList[T]\n\n\n\nupdate_sync(**kwargs)\n\nUpdate documents matching the query synchronously with performance optimizations.\n\nThis method updates documents matching the query with the given field values.\nUses direct record access for bulk ID operations for better performance.\n\nParameters\n\n**kwargs (Any) – Field names and values to update\n\nReturns\n\nList of updated documents\n\nReturn type\n\nList[T]\n\n\n\nclass quantumengine.RelationQuerySet(from_document, connection, relation=None)\n\nBases: object\n\nQuery set specifically for graph relations.\n\nThis class provides methods for querying and manipulating graph relations\nbetween documents in the database. It allows creating, retrieving, updating,\nand deleting relations between documents.\n\n\n\n\n\nfrom_document\n\nThe document class the relation is from\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\nrelation\n\nThe name of the relation\n\n\n\nquery_parts\n\nList of query parts\n\n\n\n__init__(from_document, connection, relation=None)\n\nInitialize a new RelationQuerySet.\n\nParameters\n\nfrom_document (Type) – The document class the relation is from\n\nconnection (Any) – The database connection to use for queries\n\nrelation (str | None) – The name of the relation\n\n\n\nasync delete_relation(from_instance, to_instance=None)\n\nDelete a relation asynchronously.\n\nThis method deletes a relation between two document instances in the database.\nIf to_instance is not provided, it deletes all relations from from_instance.\n\nParameters\n\nfrom_instance (Any) – The instance the relation is from\n\nto_instance (Any | None) – The instance the relation is to (optional)\n\nReturns\n\nNumber of deleted relations\n\nRaises\n\nValueError – If from_instance is not saved, if to_instance is provided but not saved,\n    or if no relation name is specified\n\nReturn type\n\nint\n\n\n\ndelete_relation_sync(from_instance, to_instance=None)\n\nDelete a relation synchronously.\n\nThis method deletes a relation between two document instances in the database.\nIf to_instance is not provided, it deletes all relations from from_instance.\n\nParameters\n\nfrom_instance (Any) – The instance the relation is from\n\nto_instance (Any | None) – The instance the relation is to (optional)\n\nReturns\n\nNumber of deleted relations\n\nRaises\n\nValueError – If from_instance is not saved, if to_instance is provided but not saved,\n    or if no relation name is specified\n\nReturn type\n\nint\n\n\n\nasync get_related(instance, target_document=None, **filters)\n\nGet related documents asynchronously.\n\nThis method retrieves documents related to the given instance through\nthe specified relation. It can return either the target documents or\nthe relation records themselves.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\ntarget_document (Type | None) – The document class of the target documents (optional)\n\n**filters (Any) – Filters to apply to the related documents\n\nReturns\n\nList of related documents or relation records\n\nRaises\n\nValueError – If the instance is not saved or if no relation name is specified\n\nReturn type\n\nList[Any]\n\n\n\nget_related_sync(instance, target_document=None, **filters)\n\nGet related documents synchronously.\n\nThis method retrieves documents related to the given instance through\nthe specified relation. It can return either the target documents or\nthe relation records themselves.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\ntarget_document (Type | None) – The document class of the target documents (optional)\n\n**filters (Any) – Filters to apply to the related documents\n\nReturns\n\nList of related documents or relation records\n\nRaises\n\nValueError – If the instance is not saved or if no relation name is specified\n\nReturn type\n\nList[Any]\n\n\n\nasync relate(from_instance, to_instance, **attrs)\n\nCreate a relation between two instances asynchronously.\n\nThis method creates a relation between two document instances in the database.\nIt constructs a RELATE query with the given relation name and attributes.\n\nParameters\n\nfrom_instance (Any) – The instance to create the relation from\n\nto_instance (Any) – The instance to create the relation to\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nRaises\n\nValueError – If either instance is not saved or if no relation name is specified\n\nReturn type\n\nAny | None\n\n\n\nrelate_sync(from_instance, to_instance, **attrs)\n\nCreate a relation between two instances synchronously.\n\nThis method creates a relation between two document instances in the database.\nIt constructs a RELATE query with the given relation name and attributes.\n\nParameters\n\nfrom_instance (Any) – The instance to create the relation from\n\nto_instance (Any) – The instance to create the relation to\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nRaises\n\nValueError – If either instance is not saved or if no relation name is specified\n\nReturn type\n\nAny | None\n\n\n\nasync update_relation(from_instance, to_instance, **attrs)\n\nUpdate an existing relation asynchronously.\n\nThis method updates an existing relation between two document instances\nin the database. If the relation doesn’t exist, it creates it.\n\nParameters\n\nfrom_instance (Any) – The instance the relation is from\n\nto_instance (Any) – The instance the relation is to\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nRaises\n\nValueError – If either instance is not saved or if no relation name is specified\n\nReturn type\n\nAny | None\n\n\n\nupdate_relation_sync(from_instance, to_instance, **attrs)\n\nUpdate an existing relation synchronously.\n\nThis method updates an existing relation between two document instances\nin the database. If the relation doesn’t exist, it creates it.\n\nParameters\n\nfrom_instance (Any) – The instance the relation is from\n\nto_instance (Any) – The instance the relation is to\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nRaises\n\nValueError – If either instance is not saved or if no relation name is specified\n\nReturn type\n\nAny | None\n\n\n\nclass quantumengine.Q(**kwargs)\n\nBases: object\n\nQuery expression builder for complex queries.\n\nThis class allows building complex query expressions that can be used\nwith filter() and objects() methods.\n\nExample\n\n# Complex AND/OR queries\nquery = Q(age__gt=18) & Q(active=True)\nusers = User.objects.filter(query)\n\n# Complex queries with objects()\nquery = Q(department=”engineering”) | Q(department=”sales”)\nusers = User.objects(query)\n\n\n\n__and__(other)\n\nCombine with another Q object using AND.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a query expression.\n\nParameters\n\n**kwargs – Field filters to include in the query\n\n\n\n__invert__()\n\nNegate this query using NOT.\n\n\n\n\n\n__or__(other)\n\nCombine with another Q object using OR.\n\n\n\n\n\nclassmethod raw(query_string)\n\nCreate a raw query expression.\n\nParameters\n\nquery_string (str) – Raw SurrealQL WHERE clause\n\nReturns\n\nQ object with raw query\n\nReturn type\n\nQ\n\n\n\nto_conditions()\n\nConvert this Q object to a list of conditions.\n\nReturns\n\nList of (field, operator, value) tuples\n\nReturn type\n\nList[tuple]\n\n\n\nto_where_clause()\n\nConvert this Q object to a WHERE clause string.\n\nReturns\n\nWHERE clause string for SurrealQL\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.QueryExpression(where=None)\n\nBases: object\n\nHigher-level query expression that can include fetch, grouping, etc.\n\nThis class provides a more comprehensive query building interface\nthat includes not just WHERE conditions but also FETCH, GROUP BY, etc.\n\n\n\n\n\n__init__(where=None)\n\nInitialize a query expression.\n\nParameters\n\nwhere (Q | None) – Q object for WHERE clause conditions\n\n\n\napply_to_queryset(queryset)\n\nApply this expression to a queryset.\n\nParameters\n\nqueryset – BaseQuerySet to apply expression to\n\nReturns\n\nModified queryset\n\n\n\nfetch(*fields)\n\nAdd FETCH clause to resolve references.\n\nParameters\n\n*fields (str) – Field names to fetch\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\ngroup_by(*fields)\n\nAdd GROUP BY clause.\n\nParameters\n\n*fields (str) – Field names to group by\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\nlimit(value)\n\nAdd LIMIT clause.\n\nParameters\n\nvalue (int) – Maximum number of results\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\norder_by(field, direction='ASC')\n\nAdd ORDER BY clause.\n\nParameters\n\nfield (str) – Field name to order by\n\ndirection (str) – ‘ASC’ or ‘DESC’\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\nstart(value)\n\nAdd START clause for pagination.\n\nParameters\n\nvalue (int) – Number of results to skip\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\nclass quantumengine.DurationField(**kwargs)\n\nBases: Field\n\nDuration field type.\n\nThis field type stores durations of time and provides validation and\nconversion between Python timedelta objects and SurrealDB duration strings.\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new DurationField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python timedelta.\n\nThis method converts a SurrealDB duration string from the database to a\nPython timedelta object.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python timedelta object\n\nReturn type\n\ntimedelta | None\n\n\n\nto_db(value)\n\nConvert Python timedelta to database representation.\n\nThis method converts a Python timedelta object to a SurrealDB Duration object\nfor storage in the database.\n\nParameters\n\nvalue (Any) – The Python timedelta to convert\n\nReturns\n\nThe SurrealDB Duration object for the database\n\nReturn type\n\nAny | None\n\n\n\nvalidate(value)\n\nValidate the duration value.\n\nThis method checks if the value is a valid timedelta or can be\nconverted to a timedelta from a string.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated timedelta value\n\nRaises\n\nTypeError – If the value cannot be converted to a timedelta\n\nReturn type\n\ntimedelta | None\n\n\n\nclass quantumengine.OptionField(field_type, **kwargs)\n\nBases: Field\n\nOption field type.\n\nThis field type makes a field optional and guarantees it to be either\nNone or a value of the specified type.\n\n\n\n\n\nfield_type\n\nThe field type for the value when not None\n\n\n\n__init__(field_type, **kwargs)\n\nInitialize a new OptionField.\n\nParameters\n\nfield_type (Field) – The field type for the value when not None\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python representation.\n\nThis method converts a database value to a Python representation using\nthe field_type’s from_db method if the value is not None.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a database representation using\nthe field_type’s to_db method if the value is not None.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate the option value.\n\nThis method checks if the value is None or a valid value for the field_type.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValueError – If the value is not None and fails validation for field_type\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.LiteralField(allowed_values, **kwargs)\n\nBases: Field\n\nField for union/enum-like values.\n\nAllows a field to accept multiple different types or specific values,\nsimilar to a union or enum type in other languages.\n\nExample\n\nclass Product(Document):\n\nstatus = LiteralField([“active”, “discontinued”, “out_of_stock”])\nid_or_name = LiteralField([IntField(), StringField()])\n\n\n\n\n\n__init__(allowed_values, **kwargs)\n\nInitialize a new LiteralField.\n\nParameters\n\nallowed_values (List[Any]) – List of allowed values or field types\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database value to Python representation.\n\nThis method converts a database value to a Python representation by\nusing the appropriate field type if the value is not a literal.\n\nParameters\n\nvalue (Any) – The database value to convert\n\nReturns\n\nThe Python representation of the value\n\nReturn type\n\nAny\n\n\n\nto_db(value)\n\nConvert Python value to database representation.\n\nThis method converts a Python value to a database representation by\nusing the appropriate field type if the value is not a literal.\n\nParameters\n\nvalue (Any) – The Python value to convert\n\nReturns\n\nThe database representation of the value\n\nReturn type\n\nAny\n\n\n\nvalidate(value)\n\nValidate that the value is one of the allowed values or types.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated value\n\nRaises\n\nValidationError – If the value is not one of the allowed values or types\n\nReturn type\n\nAny\n\n\n\nclass quantumengine.RangeField(min_type, max_type=None, **kwargs)\n\nBases: Field\n\nField for storing ranges of values.\n\nThis field type stores ranges of values with minimum and maximum bounds.\nIt supports various types for the bounds, such as numbers, strings, and dates.\n\nExample\n\nclass PriceRange(Document):\n\nprice_range = RangeField(min_type=FloatField(), max_type=FloatField())\nage_range = RangeField(min_type=IntField(), max_type=IntField())\n\n\n\n\n\n__init__(min_type, max_type=None, **kwargs)\n\nInitialize a new RangeField.\n\nParameters\n\nmin_type (Field) – The field type for the minimum value\n\nmax_type (Field) – The field type for the maximum value (defaults to same as min_type)\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nfrom_db(value)\n\nConvert database range to Python representation.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The database range to convert\n\nReturns\n\nThe Python representation of the range\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nto_db(value)\n\nConvert Python range to database representation.\n\nParameters\n\nvalue (Dict[str, Any] | None) – The Python range to convert\n\nReturns\n\nThe database representation of the range\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nvalidate(value)\n\nValidate the range value.\n\nThis method checks if the value is a valid range with minimum and maximum\nvalues that can be validated by the respective field types.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated range value\n\nRaises\n\nValidationError – If the value is not a valid range\n\nReturn type\n\nDict[str, Any] | None\n\n\n\nclass quantumengine.SetField(field_type=None, **kwargs)\n\nBases: ListField\n\nSet field type.\n\nThis field type stores sets of unique values and provides validation and\nconversion for the items in the set. Values are automatically deduplicated.\n\nExample\n\nclass User(Document):\n\ntags = SetField(StringField())\n\n\n\n\n\nto_db(value, backend=None)\n\nConvert Python list to database representation with deduplication.\n\n\n\n\n\nvalidate(value)\n\nValidate the list value and ensure uniqueness.\n\nThis method checks if the value is a valid list and validates each\nitem in the list using the field_type if provided. It also ensures\nthat all items in the list are unique.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated and deduplicated list value\n\nReturn type\n\nList[Any] | None\n\n\n\nclass quantumengine.TimeSeriesField(**kwargs)\n\nBases: DateTimeField\n\nField for time series data.\n\nThis field type extends DateTimeField and adds support for time series data.\nIt can be used to store timestamps for time series data and supports\nadditional metadata for time series operations.\n\nExample\n\nclass SensorReading(Document):\n\ntimestamp = TimeSeriesField(index=True)\nvalue = FloatField()\n\nclass Meta:\n\ntime_series = True\ntime_field = “timestamp”\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new TimeSeriesField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the timestamp value.\n\nThis method checks if the value is a valid timestamp for time series data.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated timestamp value\n\nReturn type\n\ndatetime | None\n\n\n\nclass quantumengine.EmailField(**kwargs)\n\nBases: StringField\n\nEmail field type.\n\nThis field type stores email addresses and provides validation to ensure\nthe value is a valid email address.\n\nExample\n\n>>> class User(Document):\n...     email = EmailField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new EmailField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the email address.\n\nThis method checks if the value is a valid email address.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated email address\n\nRaises\n\nValueError – If the email address is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.URLField(**kwargs)\n\nBases: StringField\n\nURL field type.\n\nThis field type stores URLs and provides validation to ensure\nthe value is a valid URL.\n\nExample\n\n>>> class Website(Document):\n...     url = URLField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new URLField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the URL.\n\nThis method checks if the value is a valid URL.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated URL\n\nRaises\n\nValueError – If the URL is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.IPAddressField(ipv4_only=False, ipv6_only=False, version=None, **kwargs)\n\nBases: StringField\n\nIP address field type.\n\nThis field type stores IP addresses and provides validation to ensure\nthe value is a valid IPv4 or IPv6 address.\n\nExample\n\n>>> class Server(Document):\n...     ip_address = IPAddressField(required=True)\n...     ip_v4 = IPAddressField(ipv4_only=True)\n...     ip_v6 = IPAddressField(ipv6_only=True)\n\n\n\n\n\n__init__(ipv4_only=False, ipv6_only=False, version=None, **kwargs)\n\nInitialize a new IPAddressField.\n\nParameters\n\nipv4_only (bool) – Whether to only allow IPv4 addresses\n\nipv6_only (bool) – Whether to only allow IPv6 addresses\n\nversion (str) – IP version to validate (‘ipv4’, ‘ipv6’, or ‘both’)\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the IP address.\n\nThis method checks if the value is a valid IP address.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated IP address\n\nRaises\n\nValueError – If the IP address is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.SlugField(**kwargs)\n\nBases: StringField\n\nSlug field type.\n\nThis field type stores slugs (URL-friendly strings) and provides validation\nto ensure the value is a valid slug.\n\nExample\n\n>>> class Article(Document):\n...     slug = SlugField(required=True)\n\n\n\n\n\n__init__(**kwargs)\n\nInitialize a new SlugField.\n\nParameters\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the slug.\n\nThis method checks if the value is a valid slug.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated slug\n\nRaises\n\nValueError – If the slug is invalid\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.ChoiceField(choices, **kwargs)\n\nBases: Field\n\nChoice field type.\n\nThis field type stores values from a predefined set of choices and provides\nvalidation to ensure the value is one of the allowed choices.\n\nExample\n\n>>> class Product(Document):\n...     status = ChoiceField(choices=['active', 'inactive', 'discontinued'])\n\n\n\n\n\n__init__(choices, **kwargs)\n\nInitialize a new ChoiceField.\n\nParameters\n\nchoices (List[str | tuple]) – List of allowed choices. Each choice can be a string or a tuple\nof (value, display_name).\n\n**kwargs (Any) – Additional arguments to pass to the parent class\n\n\n\nvalidate(value)\n\nValidate the choice value.\n\nThis method checks if the value is one of the allowed choices.\n\nParameters\n\nvalue (Any) – The value to validate\n\nReturns\n\nThe validated choice value\n\nRaises\n\nValueError – If the value is not one of the allowed choices\n\nReturn type\n\nstr | None\n\n\n\nclass quantumengine.MaterializedView(name, query, refresh_interval=None, document_class=None, aggregations=None, select_fields=None)\n\nBases: object\n\nMaterialized view for SurrealDB.\n\nThis class represents a materialized view in SurrealDB, which is a\nprecomputed view of data that can be used to improve query performance\nfor frequently accessed aggregated data.\n\n\n\n\n\nname\n\nThe name of the materialized view\n\n\n\nquery\n\nThe query that defines the materialized view\n\n\n\nrefresh_interval\n\nThe interval at which the view is refreshed\n\n\n\ndocument_class\n\nThe document class that the view is based on\n\n\n\naggregations\n\nDictionary of field names and aggregation functions\n\n\n\nselect_fields\n\nList of fields to select (if None, selects all fields)\n\n\n\n__init__(name, query, refresh_interval=None, document_class=None, aggregations=None, select_fields=None)\n\nInitialize a new MaterializedView.\n\nParameters\n\nname (str) – The name of the materialized view\n\nquery (QuerySet) – The query that defines the materialized view\n\nrefresh_interval (str) – The interval at which the view is refreshed (e.g., “1h”, “30m”)\n\ndocument_class (Type['Document']) – The document class that the view is based on\n\naggregations (Dict[str, Aggregation]) – Dictionary of field names and aggregation functions\n\nselect_fields (List[str]) – List of fields to select (if None, selects all fields)\n\n\n\nasync create(connection=None)\n\nCreate the materialized view in the database.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\ncreate_sync(connection=None)\n\nCreate the materialized view in the database synchronously.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\nasync drop(connection=None)\n\nDrop the materialized view from the database.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\ndrop_sync(connection=None)\n\nDrop the materialized view from the database synchronously.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\nasync execute_raw_query(connection=None)\n\nExecute a raw query against the materialized view.\n\nThis is a workaround for the “no decoder for tag” error that can occur\nwhen querying materialized views using the objects property.\n\nParameters\n\nconnection – The database connection to use (optional)\n\nReturns\n\nThe query results\n\n\n\nexecute_raw_query_sync(connection=None)\n\nExecute a raw query against the materialized view synchronously.\n\nThis is a workaround for the “no decoder for tag” error that can occur\nwhen querying materialized views using the objects property.\n\nParameters\n\nconnection – The database connection to use (optional)\n\nReturns\n\nThe query results\n\n\n\nproperty objects: QuerySet\n\nGet a QuerySet for querying the materialized view.\n\nReturns\n\nA QuerySet for querying the materialized view\n\n\n\nasync refresh(connection=None)\n\nManually refresh the materialized view.\n\nNote: SurrealDB materialized views are automatically updated when underlying data changes.\nThis method might not work as expected.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\nrefresh_sync(connection=None)\n\nManually refresh the materialized view.\n\nNote: SurrealDB materialized views are automatically updated when underlying data changes.\nThis method might not work as expected.\n\nParameters\n\nconnection – The database connection to use (optional)\n\n\n\nclass quantumengine.MaterializedDocument(**values)\n\nBases: Document\n\nBase class for materialized documents (views).\n\nMaterializedDocument provides a Document-like interface for creating\nand querying materialized views across different backends.\n\n\n\n\n\nasync classmethod create_view()\n\nCreate the materialized view in the database.\n\n\n\n\n\nasync delete()\n\nMaterializedDocuments are read-only.\n\n\n\nasync classmethod drop_view()\n\nDrop the materialized view from the database.\n\n\n\n\n\nasync classmethod refresh_view()\n\nRefresh the materialized view (backend-specific behavior).\n\n\n\n\n\nasync save(**kwargs)\n\nMaterializedDocuments are read-only.\n\n\n\nclass quantumengine.MaterializedField(source=None, aggregate=None, transform=None, **kwargs)\n\nBases: Field\n\nField for materialized documents with aggregation support.\n\n\n\n\n\n__init__(source=None, aggregate=None, transform=None, **kwargs)\n\nInitialize a materialized field.\n\nParameters\n\nsource (str | None) – Source field name from the base document\n\naggregate (AggregateFunction | None) – Aggregation function to apply\n\ntransform (FieldTransform | Callable | None) – Transformation to apply to the source field\n\n**kwargs – Additional field arguments\n\n\n\nclass quantumengine.AggregationPipeline(query_set)\n\nBases: object\n\nPipeline for building and executing aggregation queries.\n\nThis class provides a fluent interface for building complex aggregation\npipelines with multiple stages, similar to MongoDB’s aggregation framework.\n\n\n\n\n\n__init__(query_set)\n\nInitialize a new AggregationPipeline.\n\nParameters\n\nquery_set (QuerySet) – The QuerySet to build the pipeline from\n\n\n\nbuild_query()\n\nBuild the SurrealQL query from the pipeline stages.\n\nReturns\n\nThe SurrealQL query string\n\n\n\nasync execute(connection=None)\n\nExecute the pipeline and return results.\n\nParameters\n\nconnection – Optional connection to use\n\nReturns\n\nThe query results\n\n\n\nexecute_sync(connection=None)\n\nExecute the pipeline synchronously.\n\nParameters\n\nconnection – Optional connection to use\n\nReturns\n\nThe query results\n\n\n\ngroup(by_fields=None, **aggregations)\n\nGroup by fields and apply aggregations.\n\nParameters\n\nby_fields – Field or list of fields to group by\n\n**aggregations – Named aggregation functions to apply\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nlimit(count)\n\nLimit number of results.\n\nParameters\n\ncount – Maximum number of results to return\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nproject(**fields)\n\nSelect or compute fields to include in output.\n\nParameters\n\n**fields – Field mappings for projection\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nskip(count)\n\nSkip number of results.\n\nParameters\n\ncount – Number of results to skip\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nsort(**fields)\n\nSort results by fields.\n\nParameters\n\n**fields – Field names and sort directions (‘ASC’ or ‘DESC’)\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nwith_index(index)\n\nUse the specified index for the query.\n\nParameters\n\nindex – Name of the index to use\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nclass quantumengine.Aggregation(field=None)\n\nBases: object\n\nBase class for aggregation functions.\n\nThis class represents an aggregation function that can be used in a materialized view.\nSubclasses should implement the __str__ method to return the SurrealQL representation\nof the aggregation function.\n\n\n\n\n\n__init__(field=None)\n\nInitialize a new Aggregation.\n\nParameters\n\nfield (str) – The field to aggregate (optional)\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the aggregation function.\n\n\n\n\n\nclass quantumengine.Count(field=None)\n\nBases: Aggregation\n\nCount aggregation function.\n\nThis class represents the count() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the count function.\n\n\n\n\n\nclass quantumengine.Mean(field=None)\n\nBases: Aggregation\n\nMean aggregation function.\n\nThis class represents the math::mean() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the mean function.\n\n\n\n\n\nclass quantumengine.Sum(field=None)\n\nBases: Aggregation\n\nSum aggregation function.\n\nThis class represents the math::sum() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the sum function.\n\n\n\n\n\nclass quantumengine.Min(field=None)\n\nBases: Aggregation\n\nMin aggregation function.\n\nThis class represents the math::min() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the min function.\n\n\n\n\n\nclass quantumengine.Max(field=None)\n\nBases: Aggregation\n\nMax aggregation function.\n\nThis class represents the math::max() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the max function.\n\n\n\n\n\nclass quantumengine.ArrayCollect(field=None)\n\nBases: Aggregation\n\nArray collect aggregation function.\n\nThis class represents the array::collect() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the array collect function.\n\n\n\n\n\nclass quantumengine.Median(field=None)\n\nBases: Aggregation\n\nMedian aggregation function.\n\nThis class represents the math::median() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the median function.\n\n\n\n\n\nclass quantumengine.StdDev(field=None)\n\nBases: Aggregation\n\nStandard deviation aggregation function.\n\nThis class represents the math::stddev() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the standard deviation function.\n\n\n\n\n\nclass quantumengine.Variance(field=None)\n\nBases: Aggregation\n\nVariance aggregation function.\n\nThis class represents the math::variance() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the variance function.\n\n\n\n\n\nclass quantumengine.Percentile(field=None, percentile=50)\n\nBases: Aggregation\n\nPercentile aggregation function.\n\nThis class represents the math::percentile() aggregation function in SurrealQL.\n\n\n\n\n\n__init__(field=None, percentile=50)\n\nInitialize a new Percentile.\n\nParameters\n\nfield (str) – The field to aggregate (optional)\n\npercentile (float) – The percentile to calculate (default: 50)\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the percentile function.\n\n\n\n\n\nclass quantumengine.Distinct(field=None)\n\nBases: Aggregation\n\nDistinct aggregation function.\n\nThis class represents the array::distinct() aggregation function in SurrealQL.\n\n\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the distinct function.\n\n\n\n\n\nclass quantumengine.GroupConcat(field=None, separator=', ')\n\nBases: Aggregation\n\nGroup concatenation aggregation function.\n\nThis class represents a custom aggregation function that concatenates values\nwith a separator.\n\n\n\n\n\n__init__(field=None, separator=', ')\n\nInitialize a new GroupConcat.\n\nParameters\n\nfield (str) – The field to aggregate (optional)\n\nseparator (str) – The separator to use (default: “, “)\n\n\n\n__str__()\n\nReturn the SurrealQL representation of the group concat function.\n\n\n\n\n\nquantumengine.get_document_classes(module_name)\n\nGet all Document classes defined in a module.\n\nParameters\n\nmodule_name (str) – The name of the module to search\n\nReturns\n\nA list of Document classes defined in the module\n\nReturn type\n\nList[Type[Document]]\n\n\n\nasync quantumengine.create_tables_from_module(module_name, connection=None, schemafull=True)\n\nCreate tables for all Document classes in a module asynchronously.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nconnection (Any | None) – Optional connection to use\n\nschemafull (bool) – Whether to create SCHEMAFULL tables (default: True)\n\n\n\nquantumengine.create_tables_from_module_sync(module_name, connection=None, schemafull=True)\n\nCreate tables for all Document classes in a module synchronously.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nconnection (Any | None) – Optional connection to use\n\nschemafull (bool) – Whether to create SCHEMAFULL tables (default: True)\n\n\n\nquantumengine.generate_schema_statements(document_class, schemafull=True)\n\nGenerate SurrealDB schema statements for a Document class.\n\nThis function generates DEFINE TABLE and DEFINE FIELD statements for a Document class\nwithout executing them. This is useful for generating schema migration scripts.\n\nParameters\n\ndocument_class (Type[Document]) – The Document class to generate statements for\n\nschemafull (bool) – Whether to generate SCHEMAFULL tables (default: True)\n\nReturns\n\nA list of SurrealDB schema statements\n\nReturn type\n\nList[str]\n\n\n\nquantumengine.generate_schema_statements_from_module(module_name, schemafull=True)\n\nGenerate SurrealDB schema statements for all Document classes in a module.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nschemafull (bool) – Whether to generate SCHEMAFULL tables (default: True)\n\nReturns\n\nA dictionary mapping class names to lists of SurrealDB schema statements\n\nReturn type\n\nDict[str, List[str]]\n\n\n\nquantumengine.generate_drop_statements(document_class)\n\nGenerate SurrealDB DROP statements for a Document class.\n\nThis function generates REMOVE TABLE and REMOVE FIELD/INDEX statements for a Document class.\nUseful for generating down migration scripts.\n\nParameters\n\ndocument_class (Type[Document]) – The Document class to generate drop statements for\n\nReturns\n\nA list of SurrealDB drop statements\n\nReturn type\n\nList[str]\n\n\n\nquantumengine.generate_drop_statements_from_module(module_name)\n\nGenerate SurrealDB DROP statements for all Document classes in a module.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nReturns\n\nA dictionary mapping class names to lists of SurrealDB drop statements\n\nReturn type\n\nDict[str, List[str]]\n\n\n\nquantumengine.generate_migration_statements(old_document_class, new_document_class, schemafull=True)\n\nGenerate migration statements between two versions of a Document class.\n\nParameters\n\nold_document_class (Type[Document]) – The old version of the Document class\n\nnew_document_class (Type[Document]) – The new version of the Document class\n\nschemafull (bool) – Whether to generate statements for SCHEMAFULL tables\n\nReturns\n\nA dictionary with ‘up’ and ‘down’ migration statements\n\nReturn type\n\nDict[str, List[str]]\n\n\n\nasync quantumengine.drop_tables_from_module(module_name, connection=None)\n\nDrop tables for all Document classes in a module asynchronously.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nconnection (Any | None) – Optional connection to use\n\n\n\nquantumengine.drop_tables_from_module_sync(module_name, connection=None)\n\nDrop tables for all Document classes in a module synchronously.\n\nParameters\n\nmodule_name (str) – The name of the module containing Document classes\n\nconnection (Any | None) – Optional connection to use\n\n\n\nclass quantumengine.DataGridQueryBuilder(document_class)\n\nBases: object\n\nBuild efficient SurrealDB queries for DataGrid endpoints\n\n\n\n__init__(document_class)\n\n\n\n\n\napply_filters(filters)\n\nApply field filters to the queryset\n\nParameters\n\nfilters (Dict[str, Any]) – Dictionary of field->value filters\n\n\n\napply_search(search, search_fields)\n\nApply text search across multiple fields using contains operator\n\nParameters\n\nsearch (str) – Search term\n\nsearch_fields (List[str]) – List of fields to search in\n\n\n\napply_sorting(sort_field=None, sort_order='asc')\n\nApply sorting to the queryset\n\nParameters\n\nsort_field (str | None) – Field to sort by\n\nsort_order (str) – ‘asc’ or ‘desc’\n\n\n\nasync get_paginated_data(offset, limit)\n\nGet paginated data with total count\n\nParameters\n\noffset (int) – Number of records to skip\n\nlimit (int) – Number of records to return\n\nReturns\n\nTuple of (total_count, paginated_results)\n\n\n\nget_paginated_data_sync(offset, limit)\n\nSynchronous version of get_paginated_data\n\n\n\n\n\nasync quantumengine.get_grid_data(document_class, request_args, search_fields, custom_filters=None, default_sort=None)\n\nGet paginated grid data using efficient SurrealDB queries\n\nParameters\n\ndocument_class – SurrealEngine document class\n\nrequest_args (Dict[str, Any]) – Request parameters (limit, offset, search, etc.)\n\nsearch_fields (List[str]) – List of fields to search in\n\ncustom_filters (Dict[str, str] | None) – Custom field filters from request\n\ndefault_sort (str | None) – Default sorting field\n\nReturns\n\ntotal, “rows”: rows} for BootstrapTable format\n\nReturn type\n\n{“total”\n\n\n\nquantumengine.get_grid_data_sync(document_class, request_args, search_fields, custom_filters=None, default_sort=None)\n\nSynchronous version of get_grid_data\n\n\n\n\n\nquantumengine.parse_datatables_params(request_args)\n\nConvert DataTables parameters to standard offset/limit format\n\n\n\n\n\nquantumengine.format_datatables_response(total, rows, draw)\n\nFormat response for DataTables\n\n"},{"objectID":"Home","href":"api/index.html#document","title":"API Reference > Document","text":"Document\n\n\n\nclass quantumengine.Document(**values)\n\nBases: object\n\nBase class for all documents.\n\nThis class provides the foundation for all document models in the ORM.\nIt includes methods for CRUD operations, validation, and serialization.\n\nThe Document class uses a Meta inner class to configure behavior:\n\nExample\n\n>>> class User(Document):\n...     username = StringField(required=True)\n...     email = EmailField(required=True)\n...     age = IntField(min_value=0)\n...\n...     class Meta:\n...         collection = \"users\"          # Collection/table name\n...         backend = \"surrealdb\"         # Backend to use\n...         indexes = [                   # Index definitions\n...             {\"name\": \"idx_username\", \"fields\": [\"username\"], \"unique\": True},\n...             {\"name\": \"idx_email\", \"fields\": [\"email\"], \"unique\": True}\n...         ]\n...         strict = True                 # Strict field validation\n\nMeta Options:\n\ncollection (str): The name of the collection/table in the database.\n\nDefaults to the lowercase class name.\n\ntable_name (str): Alternative to ‘collection’, used by some backends.\n\nDefaults to the value of ‘collection’.\n\nbackend (str): The database backend to use (“surrealdb” or “clickhouse”).\n\nDefaults to “surrealdb”.\n\nindexes (list): List of index definitions. Each index is a dict with:\n\nname (str): Index name\n\nfields (list): List of field names to index\n\nunique (bool): Whether the index is unique (optional)\n\ntype (str): Index type for backend-specific indexes (optional)\n\nid_field (str): Name of the ID field. Defaults to “id”.\n\nstrict (bool): Whether to raise errors for unknown fields.\n\nDefaults to True.\n\n\n\n\n\nobjects\n\nQuerySetDescriptor for querying documents of this class\n\n\n\n_data\n\nDictionary of field values\n\nType\n\nDict[str, Any]\n\n\n\n_changed_fields\n\nList of field names that have been changed\n\nType\n\nList[str]\n\n\n\n_fields\n\nDictionary of fields for this document class (class attribute)\n\n\n\n_fields_ordered\n\nList of field names in order of definition (class attribute)\n\n\n\n_meta\n\nDictionary of metadata for this document class (class attribute)\n\n\n\nobjects\n\nDescriptor that provides QuerySet access through Document.objects.\n\nThis class is a descriptor that provides access to a QuerySet through\nthe Document.objects attribute. It allows querying documents of a specific\ndocument class using the Document.objects attribute.\n\n\n\nowner\n\nThe document class that owns this descriptor\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\n__init__(**values)\n\nInitialize a new Document.\n\nParameters\n\n**values (Any) – Field values to set on the document\n\nRaises\n\nAttributeError – If strict mode is enabled and an unknown field is provided\n\n\n\n__getattr__(name)\n\nGet a field value.\n\nThis method is called when an attribute is not found through normal lookup.\nIt checks if the attribute is a field and returns its value if it is.\n\nParameters\n\nname (str) – Name of the attribute to get\n\nReturns\n\nThe field value\n\nRaises\n\nAttributeError – If the attribute is not a field\n\nReturn type\n\nAny\n\n\n\n__setattr__(name, value)\n\nSet a field value.\n\nThis method is called when an attribute is set. It checks if the attribute\nis a field and validates the value if it is.\n\nParameters\n\nname (str) – Name of the attribute to set\n\nvalue (Any) – Value to set\n\n\n\nproperty id: str | int | RecordID | None\n\nGet the document ID.\n\nReturns\n\nThe document ID (string, RecordID, or None)\n\n\n\nvalidate()\n\nValidate all fields.\n\nThis method validates all fields in the document against their\nvalidation rules.\n\nRaises\n\nValidationError – If a field fails validation\n\n\n\nto_dict()\n\nConvert the document to a dictionary.\n\nThis method converts the document to a dictionary containing all\nfield values including the document ID. It ensures that RecordID\nobjects are properly converted to strings for JSON serialization.\nIt also recursively converts embedded documents to dictionaries.\n\nReturns\n\nDictionary of field values including ID\n\nReturn type\n\nDict[str, str | int | float | bool | None | Dict[str, Any] | List[Any]]\n\n\n\nto_db()\n\nConvert the document to a database-friendly dictionary.\n\nThis method converts the document to a dictionary suitable for\nstorage in the database. It applies field-specific conversions\nand includes only non-None values unless the field is required.\n\nReturns\n\nDictionary of field values for the database\n\nReturn type\n\nDict[str, str | int | float | bool | None | Dict[str, Any] | List[Any]]\n\n\n\nclassmethod from_db(data, dereference=False)\n\nCreate a document instance from database data.\n\nParameters\n\ndata (Any) – Data from the database (dictionary, string, RecordID, etc.)\n\ndereference (bool) – Whether to dereference references (default: False)\n\nReturns\n\nA new document instance\n\nReturn type\n\nDocument\n\n\n\nasync resolve_references(depth=1)\n\nResolve all references in this document using FETCH.\n\nThis method uses SurrealDB’s FETCH clause to efficiently resolve references\ninstead of making individual queries for each reference.\n\nParameters\n\ndepth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nThe document instance with resolved references\n\nReturn type\n\nDocument\n\n\n\nresolve_references_sync(depth=1)\n\nResolve all references in this document synchronously using FETCH.\n\nThis method uses SurrealDB’s FETCH clause to efficiently resolve references\ninstead of making individual queries for each reference.\n\nParameters\n\ndepth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nThe document instance with resolved references\n\nReturn type\n\nDocument\n\n\n\nasync classmethod get(id, dereference=False, dereference_depth=1, **kwargs)\n\nGet a document by ID with optional dereferencing using FETCH.\n\nThis method retrieves a document by ID and optionally resolves references\nusing SurrealDB’s FETCH clause for efficient reference resolution.\n\nParameters\n\nid (str | int | RecordID) – The ID of the document to retrieve\n\ndereference (bool) – Whether to resolve references (default: False)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\n**kwargs (Any) – Additional arguments to pass to the get method\n\nReturns\n\nThe document instance with optionally resolved references\n\nReturn type\n\nT\n\n\n\nclassmethod get_sync(id, dereference=False, dereference_depth=1, **kwargs)\n\nGet a document by ID with optional dereferencing synchronously using FETCH.\n\nThis method retrieves a document by ID and optionally resolves references\nusing SurrealDB’s FETCH clause for efficient reference resolution.\n\nParameters\n\nid (str | int | RecordID) – The ID of the document to retrieve\n\ndereference (bool) – Whether to resolve references (default: False)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\n**kwargs (Any) – Additional arguments to pass to the get method\n\nReturns\n\nThe document instance with optionally resolved references\n\nReturn type\n\nT\n\n\n\nasync save(connection=None)\n\nSave the document to the database asynchronously.\n\nThis method saves the document to the database, either creating\na new document or updating an existing one based on whether the\ndocument has an ID.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional, deprecated for multi-backend)\n\nReturns\n\nThe saved document instance\n\nRaises\n\nValidationError – If the document fails validation\n\nReturn type\n\nT\n\n\n\nsave_sync(connection=None)\n\nSave the document to the database synchronously.\n\nThis method saves the document to the database, either creating\na new document or updating an existing one based on whether the\ndocument has an ID.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nThe saved document instance\n\nRaises\n\nValidationError – If the document fails validation\n\nReturn type\n\nT\n\n\n\nasync delete(connection=None)\n\nDelete the document from the database asynchronously.\n\nThis method deletes the document from the database.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nTrue if the document was deleted\n\nRaises\n\nValueError – If the document doesn’t have an ID\n\nReturn type\n\nbool\n\n\n\ndelete_sync(connection=None)\n\nDelete the document from the database synchronously.\n\nThis method deletes the document from the database.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nTrue if the document was deleted\n\nRaises\n\nValueError – If the document doesn’t have an ID\n\nReturn type\n\nbool\n\n\n\nasync refresh(connection=None)\n\nRefresh the document from the database asynchronously.\n\nThis method refreshes the document’s data from the database.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nThe refreshed document instance\n\nRaises\n\nValueError – If the document doesn’t have an ID\n\nReturn type\n\nDocument\n\n\n\nrefresh_sync(connection=None)\n\nRefresh the document from the database synchronously.\n\nThis method refreshes the document’s data from the database.\n\nParameters\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nThe refreshed document instance\n\nRaises\n\nValueError – If the document doesn’t have an ID\n\nReturn type\n\nDocument\n\n\n\nclassmethod relates(relation_name)\n\nGet a RelationQuerySet for a specific relation.\n\nThis method returns a function that creates a RelationQuerySet for\nthe specified relation name. The function can be called with an\noptional connection parameter.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\nReturns\n\nFunction that creates a RelationQuerySet\n\nReturn type\n\ncallable\n\n\n\nasync fetch_relation(relation_name, target_document=None, relation_document=None, connection=None, **filters)\n\nFetch related documents asynchronously.\n\nThis method fetches documents related to this document through\nthe specified relation.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_document (Type | None) – The document class of the target documents (optional)\n\nrelation_document (Type | None) – The document class representing the relation (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\n**filters (Any) – Filters to apply to the related documents\n\nReturns\n\nList of related documents, relation documents, or relation records\n\nReturn type\n\nList[Any]\n\n\n\nfetch_relation_sync(relation_name, target_document=None, relation_document=None, connection=None, **filters)\n\nFetch related documents synchronously.\n\nThis method fetches documents related to this document through\nthe specified relation.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_document (Type | None) – The document class of the target documents (optional)\n\nrelation_document (Type | None) – The document class representing the relation (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\n**filters (Any) – Filters to apply to the related documents\n\nReturns\n\nList of related documents, relation documents, or relation records\n\nReturn type\n\nList[Any]\n\n\n\nasync resolve_relation(relation_name, target_document_class=None, relation_document=None, connection=None)\n\nResolve related documents from a relation fetch result asynchronously.\n\nThis method resolves related documents from a relation fetch result.\nIt fetches the relation data and then resolves each related document.\n\nParameters\n\nrelation_name (str) – Name of the relation to resolve\n\ntarget_document_class (Type | None) – Class of the target document (optional)\n\nrelation_document (Type | None) – The document class representing the relation (optional)\n\nconnection (Any | None) – Database connection to use (optional)\n\nReturns\n\nList of resolved document instances\n\nReturn type\n\nList[Any]\n\n\n\nresolve_relation_sync(relation_name, target_document_class=None, relation_document=None, connection=None)\n\nResolve related documents from a relation fetch result synchronously.\n\nThis method resolves related documents from a relation fetch result.\nIt fetches the relation data and then resolves each related document.\n\nParameters\n\nrelation_name (str) – Name of the relation to resolve\n\ntarget_document_class (Type | None) – Class of the target document (optional)\n\nrelation_document (Type | None) – The document class representing the relation (optional)\n\nconnection (Any | None) – Database connection to use (optional)\n\nReturns\n\nList of resolved document instances\n\nReturn type\n\nList[Any]\n\n\n\nasync relate_to(relation_name, target_instance, connection=None, **attrs)\n\nCreate a relation to another document asynchronously.\n\nThis method creates a relation from this document to another document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any) – The document instance to relate to\n\nconnection (Any | None) – The database connection to use (optional)\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nReturn type\n\nAny | None\n\n\n\nrelate_to_sync(relation_name, target_instance, connection=None, **attrs)\n\nCreate a relation to another document synchronously.\n\nThis method creates a relation from this document to another document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any) – The document instance to relate to\n\nconnection (Any | None) – The database connection to use (optional)\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nReturn type\n\nAny | None\n\n\n\nasync update_relation_to(relation_name, target_instance, connection=None, **attrs)\n\nUpdate a relation to another document asynchronously.\n\nThis method updates a relation from this document to another document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any) – The document instance the relation is to\n\nconnection (Any | None) – The database connection to use (optional)\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nReturn type\n\nAny | None\n\n\n\nupdate_relation_to_sync(relation_name, target_instance, connection=None, **attrs)\n\nUpdate a relation to another document synchronously.\n\nThis method updates a relation from this document to another document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any) – The document instance the relation is to\n\nconnection (Any | None) – The database connection to use (optional)\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nReturn type\n\nAny | None\n\n\n\nasync delete_relation_to(relation_name, target_instance=None, connection=None)\n\nDelete a relation to another document asynchronously.\n\nThis method deletes a relation from this document to another document.\nIf target_instance is not provided, it deletes all relations with the\nspecified name from this document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any | None) – The document instance the relation is to (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nNumber of deleted relations\n\nReturn type\n\nint\n\n\n\ndelete_relation_to_sync(relation_name, target_instance=None, connection=None)\n\nDelete a relation to another document synchronously.\n\nThis method deletes a relation from this document to another document.\nIf target_instance is not provided, it deletes all relations with the\nspecified name from this document.\n\nParameters\n\nrelation_name (str) – Name of the relation\n\ntarget_instance (Any | None) – The document instance the relation is to (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nNumber of deleted relations\n\nReturn type\n\nint\n\n\n\nasync traverse_path(path_spec, target_document=None, connection=None, **filters)\n\nTraverse a path in the graph asynchronously.\n\nThis method traverses a path in the graph starting from this document.\nThe path_spec is a string like “->[watched]->->[acted_in]->” which describes\na path through the graph.\n\nParameters\n\npath_spec (str) – String describing the path to traverse\n\ntarget_document (Type | None) – The document class to return instances of (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\n**filters (Any) – Filters to apply to the results\n\nReturns\n\nList of documents or path results\n\nRaises\n\nValueError – If the document is not saved\n\nReturn type\n\nList[Any]\n\n\n\ntraverse_path_sync(path_spec, target_document=None, connection=None, **filters)\n\nTraverse a path in the graph synchronously.\n\nThis method traverses a path in the graph starting from this document.\nThe path_spec is a string like “->[watched]->->[acted_in]->” which describes\na path through the graph.\n\nParameters\n\npath_spec (str) – String describing the path to traverse\n\ntarget_document (Type | None) – The document class to return instances of (optional)\n\nconnection (Any | None) – The database connection to use (optional)\n\n**filters (Any) – Filters to apply to the results\n\nReturns\n\nList of documents or path results\n\nRaises\n\nValueError – If the document is not saved\n\nReturn type\n\nList[Any]\n\n\n\nasync classmethod bulk_create(documents, batch_size=1000, validate=True, return_documents=True, connection=None)\n\nCreate multiple documents in batches.\n\nParameters\n\ndocuments (List[Any]) – List of documents to create\n\nbatch_size (int) – Number of documents per batch\n\nvalidate (bool) – Whether to validate documents before creation\n\nreturn_documents (bool) – Whether to return created documents\n\nReturns\n\nList of created documents if return_documents=True, else count of created documents\n\nReturn type\n\nList[Any] | int\n\n\n\nclassmethod bulk_create_sync(documents, batch_size=1000, validate=True, return_documents=True, connection=None)\n\nCreate multiple documents in a single operation synchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally validate the\ndocuments and return the created documents.\n\nParameters\n\ndocuments (List[Any]) – List of Document instances to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nvalidate (bool) – Whether to validate documents (default: True)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nconnection (Any | None) – The database connection to use (optional)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[Any] | int\n\n\n\nasync classmethod create_index(index_name, fields, unique=False, search=False, analyzer=None, comment=None, connection=None)\n\nCreate an index on the document’s collection asynchronously.\n\nParameters\n\nindex_name (str) – Name of the index\n\nfields (List[str]) – List of field names to include in the index\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\ncomment (str | None) – Optional comment for the index\n\nconnection (Any | None) – Optional connection to use\n\n\n\nclassmethod create_index_sync(index_name, fields, unique=False, search=False, analyzer=None, comment=None, connection=None)\n\nCreate an index on the document’s collection synchronously.\n\nParameters\n\nindex_name (str) – Name of the index\n\nfields (List[str]) – List of field names to include in the index\n\nunique (bool) – Whether the index should enforce uniqueness\n\nsearch (bool) – Whether the index is a search index\n\nanalyzer (str | None) – Analyzer to use for search indexes\n\ncomment (str | None) – Optional comment for the index\n\nconnection (Any | None) – Optional connection to use\n\n\n\nasync classmethod create_indexes(connection=None)\n\nCreate all indexes defined for this document class asynchronously.\n\nThis method creates indexes defined in the Meta class and also creates\nindexes for fields marked as indexed.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\n\n\nclassmethod create_indexes_sync(connection=None)\n\nCreate all indexes defined for this document class synchronously.\n\nThis method creates indexes defined in the Meta class and also creates\nindexes for fields marked as indexed.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\n\n\nasync classmethod create_table(connection=None, schemafull=True)\n\nCreate the table for this document class asynchronously.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\nschemafull (bool) – Whether to create a SCHEMAFULL table (default: True)\n\n\n\nclassmethod create_table_sync(connection=None, schemafull=True)\n\nCreate the table for this document class synchronously.\n\n\n\n\n\nasync classmethod drop_table(connection=None, if_exists=True)\n\nDrop the table for this document class asynchronously.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\nif_exists (bool) – Whether to use IF EXISTS clause to avoid errors if table doesn’t exist\n\n\n\nclassmethod drop_table_sync(connection=None, if_exists=True)\n\nDrop the table for this document class synchronously.\n\nParameters\n\nconnection (Any | None) – Optional connection to use\n\nif_exists (bool) – Whether to use IF EXISTS clause to avoid errors if table doesn’t exist\n\n\n\nclassmethod to_dataclass()\n\nConvert the document class to a dataclass.\n\nThis method creates a dataclass based on the document’s fields.\nIt uses the field names, types, and whether they are required.\nRequired fields have no default value, making them required during initialization.\nNon-required fields use None as default if they don’t define one.\nA __post_init__ method is added to validate all fields after initialization.\n\nReturns\n\nA dataclass type based on the document’s fields\n\n\n\nclassmethod create_materialized_view(name, query, refresh_interval=None, aggregations=None, select_fields=None, **kwargs)\n\nCreate a materialized view based on a query.\n\nThis method creates a materialized view in SurrealDB based on a query.\nMaterialized views are precomputed views of data that can be used to\nimprove query performance for frequently accessed aggregated data.\n\nParameters\n\nname (str) – The name of the materialized view\n\nquery (QuerySet) – The query that defines the materialized view\n\nrefresh_interval (str) – The interval at which the view is refreshed (e.g., “1h”, “30m”)\n\naggregations – Dictionary of field names and aggregation functions\n\nselect_fields – List of fields to select (if None, selects all fields)\n\n**kwargs – Additional keyword arguments to pass to the MaterializedView constructor\n\nReturns\n\nA MaterializedView instance"},{"objectID":"Home","href":"api/index.html#connection","title":"API Reference > Connection","text":"Connection\n\n\n\nquantumengine.create_connection(url=None, namespace=None, database=None, username=None, password=None, name=None, make_default=False, async_mode=True, use_pool=False, pool_size=10, max_idle_time=60, connect_timeout=30, operation_timeout=30, retry_limit=3, retry_delay=1.0, retry_backoff=2.0, validate_on_borrow=True, auto_connect=False, backend='surrealdb', **backend_kwargs)\n\nFactory function to create a connection for the specified backend.\n\nParameters\n\nurl (str | None) – The URL of the database server (for SurrealDB) or host (for ClickHouse)\n\nnamespace (str | None) – The namespace to use (SurrealDB only)\n\ndatabase (str | None) – The database to use\n\nusername (str | None) – The username for authentication\n\npassword (str | None) – The password for authentication\n\nname (str | None) – The name to register this connection under in the registry\n\nmake_default (bool) – Whether to set this connection as the default\n\nasync_mode (bool) – Whether to create an async or sync connection (SurrealDB only)\n\nuse_pool (bool) – Whether to use a connection pool (SurrealDB async_mode only)\n\npool_size (int) – The size of the connection pool\n\nmax_idle_time (int) – Maximum time in seconds a connection can be idle before being closed\n\nconnect_timeout (int) – Timeout in seconds for establishing a connection\n\noperation_timeout (int) – Timeout in seconds for operations\n\nretry_limit (int) – Maximum number of retries for failed operations\n\nretry_delay (float) – Initial delay in seconds between retries\n\nretry_backoff (float) – Backoff multiplier for retry delay\n\nvalidate_on_borrow (bool) – Whether to validate connections when borrowing from the pool\n\nauto_connect (bool) – Whether to automatically connect the connection\n\nbackend (str) – The backend type (‘surrealdb’, ‘clickhouse’, etc.)\n\n**backend_kwargs – Additional backend-specific connection parameters\n\nReturns\n\nA connection instance for the specified backend\n\nReturn type\n\nAny\n\nExamples\n\nSurrealDB connection (default):\n\nClickHouse connection:"},{"objectID":"Home","href":"api/index.html#fields","title":"API Reference > Fields","text":"Fields\n\n"},{"objectID":"Home","href":"api/index.html#backends","title":"API Reference > Backends","text":"Backends\n\n"},{"objectID":"Home","href":"api/index.html#query-system","title":"API Reference > Query System","text":"Query System\n\n"},{"objectID":"Home","href":"api/index.html#exceptions","title":"API Reference > Exceptions","text":"Exceptions\n\n"},{"objectID":"Quick Start Guide","href":"quickstart.html#quick-start-guide","title":"Quick Start Guide","text":"Quick Start Guide\n\nThis guide will get you up and running with QuantumEngine in just a few minutes."},{"objectID":"Quick Start Guide","href":"quickstart.html#installation","title":"Quick Start Guide > Installation","text":"Installation\n\nInstall QuantumEngine with the backend you need:"},{"objectID":"Quick Start Guide","href":"quickstart.html#basic-example","title":"Quick Start Guide > Basic Example","text":"Basic Example\n\nHere’s a simple example using SurrealDB:"},{"objectID":"Quick Start Guide","href":"quickstart.html#multi-backend-example","title":"Quick Start Guide > Multi-Backend Example","text":"Multi-Backend Example\n\nQuantumEngine’s real power comes from using multiple backends:"},{"objectID":"Quick Start Guide","href":"quickstart.html#field-types","title":"Quick Start Guide > Field Types","text":"Field Types\n\nQuantumEngine supports many field types:"},{"objectID":"Quick Start Guide","href":"quickstart.html#querying","title":"Quick Start Guide > Querying","text":"Querying\n\nQuantumEngine provides powerful querying capabilities:"},{"objectID":"Quick Start Guide","href":"quickstart.html#error-handling","title":"Quick Start Guide > Error Handling","text":"Error Handling\n\nHandle missing backends gracefully:"},{"objectID":"Quick Start Guide","href":"quickstart.html#next-steps","title":"Quick Start Guide > Next Steps","text":"Next Steps\n\nNow that you have the basics working:\n\nExplore the Tutorial: Learn about advanced features like relationships and schema management\n\nCheck the API Reference: Detailed documentation for all classes and methods\n\nBrowse Examples: See real-world usage patterns in the examples section\n\nJoin the Community: Get help and share your experiences on GitHub Discussions\n\nMake sure you have SurrealDB or ClickHouse running locally for the examples to work.\nSee the installation guide for database setup instructions."},{"objectID":"Home","href":"api/exceptions.html#exceptions-api","title":"Exceptions API","text":"Exceptions API\n\nThis section provides the complete API reference for QuantumEngine’s exception system.\n\nTable of Contents\n\nCore Exceptions Module\n\nBase Exception Classes\n\nQuantumEngineException\n\nValidation Exceptions\n\nValidationError\n\nFieldValidationError\n\nDocumentValidationError\n\nDatabase Exceptions\n\nDatabaseError\n\nConnectionError\n\nQueryError\n\nTransactionError\n\nBackend-Specific Exceptions\n\nBackendError\n\nSurrealDBError\n\nClickHouseError\n\nDocument Exceptions\n\nDocumentError\n\nDoesNotExist\n\nMultipleObjectsReturned\n\nDocumentIntegrityError\n\nConfiguration Exceptions\n\nConfigurationError\n\nBackendConfigurationError\n\nFieldConfigurationError\n\nField-Specific Exceptions\n\nStringFieldError\n\nNumberFieldError\n\nDateTimeFieldError\n\nReferenceFieldError\n\nListFieldError\n\nDictFieldError\n\nQuery-Specific Exceptions\n\nFilterError\n\nLookupError\n\nAggregationError\n\nRelationError\n\nSchema Exceptions\n\nSchemaError\n\nMigrationError\n\nIndexError\n\nSecurity Exceptions\n\nSecurityError\n\nPermissionError\n\nAuthenticationError\n\nPerformance Exceptions\n\nPerformanceError\n\nTimeoutError\n\nResourceError\n\nSerialization Exceptions\n\nSerializationError\n\nDeserializationError\n\nEncodingError\n\nException Utilities\n\nException Helpers\n\nException Decorators\n\nCustom Exception Base Classes\n\nApplicationError\n\nBusinessLogicError\n\nException Context Management\n\nExceptionContext\n\nErrorBoundary\n\nException Reporting\n\nExceptionReporter\n\nExceptionMetrics\n\nSee Also"},{"objectID":"Home","href":"api/exceptions.html#core-exceptions-module","title":"Exceptions API > Core Exceptions Module","text":"Core Exceptions Module\n\n\n\nExceptions for QuantumEngine.\n\nThis module contains custom exceptions used throughout the QuantumEngine package.\n\n\n\nexception quantumengine.exceptions.QuantumEngineError\n\nBases: Exception\n\nBase exception class for QuantumEngine.\n\nAll other exceptions in the package inherit from this class.\n\n\n\nexception quantumengine.exceptions.ConnectionError\n\nBases: QuantumEngineError\n\nRaised when a connection to the database cannot be established.\n\nThis exception is raised when there is an issue connecting to the SurrealDB server,\nsuch as network errors, authentication failures, or server unavailability.\n\n\n\nexception quantumengine.exceptions.ValidationError(message, errors=None, field_name=None)\n\nBases: QuantumEngineError\n\nRaised when document validation fails.\n\nThis exception is raised when a document fails validation, such as when\na required field is missing or a field value is of the wrong type.\n\n\n\n\n\nerrors\n\nDictionary of validation errors by field\n\n\n\nfield_name\n\nName of the field that failed validation, if applicable\n\n\n\n__init__(message, errors=None, field_name=None)\n\nInitialize a ValidationError.\n\nParameters\n\nmessage (str) – The error message\n\nerrors (Dict[str, Any] | None) – Dictionary of validation errors by field\n\nfield_name (str | None) – Name of the field that failed validation, if applicable\n\n\n\nexception quantumengine.exceptions.DoesNotExist\n\nBases: QuantumEngineError\n\nRaised when a document does not exist in the database.\n\nThis exception is raised when attempting to retrieve a document that\ndoes not exist in the database, such as when using the get() method\nwith a query that matches no documents.\n\n\n\nexception quantumengine.exceptions.MultipleObjectsReturned\n\nBases: QuantumEngineError\n\nRaised when multiple documents are returned when only one was expected.\n\nThis exception is raised when a query that is expected to return a single\ndocument returns multiple documents, such as when using the get() method\nwith a query that matches multiple documents.\n\n\n\nexception quantumengine.exceptions.OperationError\n\nBases: QuantumEngineError\n\nRaised when a database operation fails.\n\nThis exception is raised when a database operation fails, such as when\nattempting to create a document with an invalid schema or when a query\nfails due to a syntax error.\n\n\n\nexception quantumengine.exceptions.InvalidQueryError\n\nBases: QuantumEngineError\n\nRaised when a query is invalid.\n\nThis exception is raised when a query is invalid, such as when using\nan unsupported operator or when a query is malformed."},{"objectID":"Home","href":"api/exceptions.html#base-exception-classes","title":"Exceptions API > Base Exception Classes","text":"Base Exception Classes"},{"objectID":"Home","href":"api/exceptions.html#quantumengineexception","title":"Exceptions API > QuantumEngineException","text":"QuantumEngineException\n\nBase exception class for all QuantumEngine exceptions."},{"objectID":"Home","href":"api/exceptions.html#validation-exceptions","title":"Exceptions API > Validation Exceptions","text":"Validation Exceptions"},{"objectID":"Home","href":"api/exceptions.html#validationerror","title":"Exceptions API > ValidationError","text":"ValidationError\n\nBase class for validation-related exceptions.\n\n\n\nclass quantumengine.exceptions.ValidationError(message, errors=None, field_name=None)\n\nBases: QuantumEngineError\n\nRaised when document validation fails.\n\nThis exception is raised when a document fails validation, such as when\na required field is missing or a field value is of the wrong type.\n\n\n\n\n\nerrors\n\nDictionary of validation errors by field\n\n\n\nfield_name\n\nName of the field that failed validation, if applicable\n\n\n\n__init__(message, errors=None, field_name=None)\n\nInitialize a ValidationError.\n\nParameters\n\nmessage (str) – The error message\n\nerrors (Dict[str, Any] | None) – Dictionary of validation errors by field\n\nfield_name (str | None) – Name of the field that failed validation, if applicable"},{"objectID":"Home","href":"api/exceptions.html#fieldvalidationerror","title":"Exceptions API > FieldValidationError","text":"FieldValidationError\n\nRaised when field validation fails."},{"objectID":"Home","href":"api/exceptions.html#documentvalidationerror","title":"Exceptions API > DocumentValidationError","text":"DocumentValidationError\n\nRaised when document-level validation fails."},{"objectID":"Home","href":"api/exceptions.html#database-exceptions","title":"Exceptions API > Database Exceptions","text":"Database Exceptions"},{"objectID":"Home","href":"api/exceptions.html#databaseerror","title":"Exceptions API > DatabaseError","text":"DatabaseError\n\nBase class for database-related exceptions."},{"objectID":"Home","href":"api/exceptions.html#connectionerror","title":"Exceptions API > ConnectionError","text":"ConnectionError\n\nRaised when database connection fails.\n\n\n\nclass quantumengine.exceptions.ConnectionError\n\nBases: QuantumEngineError\n\nRaised when a connection to the database cannot be established.\n\nThis exception is raised when there is an issue connecting to the SurrealDB server,\nsuch as network errors, authentication failures, or server unavailability."},{"objectID":"Home","href":"api/exceptions.html#queryerror","title":"Exceptions API > QueryError","text":"QueryError\n\nRaised when query execution fails."},{"objectID":"Home","href":"api/exceptions.html#transactionerror","title":"Exceptions API > TransactionError","text":"TransactionError\n\nRaised when transaction operations fail."},{"objectID":"Home","href":"api/exceptions.html#backend-specific-exceptions","title":"Exceptions API > Backend-Specific Exceptions","text":"Backend-Specific Exceptions"},{"objectID":"Home","href":"api/exceptions.html#backenderror","title":"Exceptions API > BackendError","text":"BackendError\n\nBase class for backend-specific exceptions."},{"objectID":"Home","href":"api/exceptions.html#surrealdberror","title":"Exceptions API > SurrealDBError","text":"SurrealDBError\n\nSurrealDB-specific exception."},{"objectID":"Home","href":"api/exceptions.html#clickhouseerror","title":"Exceptions API > ClickHouseError","text":"ClickHouseError\n\nClickHouse-specific exception."},{"objectID":"Home","href":"api/exceptions.html#document-exceptions","title":"Exceptions API > Document Exceptions","text":"Document Exceptions"},{"objectID":"Home","href":"api/exceptions.html#documenterror","title":"Exceptions API > DocumentError","text":"DocumentError\n\nBase class for document-related exceptions."},{"objectID":"Home","href":"api/exceptions.html#doesnotexist","title":"Exceptions API > DoesNotExist","text":"DoesNotExist\n\nRaised when querying for a non-existent object.\n\n\n\nclass quantumengine.exceptions.DoesNotExist\n\nBases: QuantumEngineError\n\nRaised when a document does not exist in the database.\n\nThis exception is raised when attempting to retrieve a document that\ndoes not exist in the database, such as when using the get() method\nwith a query that matches no documents."},{"objectID":"Home","href":"api/exceptions.html#multipleobjectsreturned","title":"Exceptions API > MultipleObjectsReturned","text":"MultipleObjectsReturned\n\nRaised when get() returns multiple objects.\n\n\n\nclass quantumengine.exceptions.MultipleObjectsReturned\n\nBases: QuantumEngineError\n\nRaised when multiple documents are returned when only one was expected.\n\nThis exception is raised when a query that is expected to return a single\ndocument returns multiple documents, such as when using the get() method\nwith a query that matches multiple documents."},{"objectID":"Home","href":"api/exceptions.html#documentintegrityerror","title":"Exceptions API > DocumentIntegrityError","text":"DocumentIntegrityError\n\nRaised when document integrity constraints are violated."},{"objectID":"Home","href":"api/exceptions.html#configuration-exceptions","title":"Exceptions API > Configuration Exceptions","text":"Configuration Exceptions"},{"objectID":"Home","href":"api/exceptions.html#configurationerror","title":"Exceptions API > ConfigurationError","text":"ConfigurationError\n\nBase class for configuration-related exceptions."},{"objectID":"Home","href":"api/exceptions.html#backendconfigurationerror","title":"Exceptions API > BackendConfigurationError","text":"BackendConfigurationError\n\nRaised when backend configuration is invalid."},{"objectID":"Home","href":"api/exceptions.html#fieldconfigurationerror","title":"Exceptions API > FieldConfigurationError","text":"FieldConfigurationError\n\nRaised when field configuration is invalid."},{"objectID":"Home","href":"api/exceptions.html#field-specific-exceptions","title":"Exceptions API > Field-Specific Exceptions","text":"Field-Specific Exceptions\n\nField validation exceptions for specific field types."},{"objectID":"Home","href":"api/exceptions.html#stringfielderror","title":"Exceptions API > StringFieldError","text":"StringFieldError\n\nString field validation errors."},{"objectID":"Home","href":"api/exceptions.html#numberfielderror","title":"Exceptions API > NumberFieldError","text":"NumberFieldError\n\nNumber field validation errors."},{"objectID":"Home","href":"api/exceptions.html#datetimefielderror","title":"Exceptions API > DateTimeFieldError","text":"DateTimeFieldError\n\nDateTime field validation errors."},{"objectID":"Home","href":"api/exceptions.html#referencefielderror","title":"Exceptions API > ReferenceFieldError","text":"ReferenceFieldError\n\nReference field validation errors."},{"objectID":"Home","href":"api/exceptions.html#listfielderror","title":"Exceptions API > ListFieldError","text":"ListFieldError\n\nList field validation errors."},{"objectID":"Home","href":"api/exceptions.html#dictfielderror","title":"Exceptions API > DictFieldError","text":"DictFieldError\n\nDictionary field validation errors."},{"objectID":"Home","href":"api/exceptions.html#query-specific-exceptions","title":"Exceptions API > Query-Specific Exceptions","text":"Query-Specific Exceptions\n\nQuery system exceptions for specific operations."},{"objectID":"Home","href":"api/exceptions.html#filtererror","title":"Exceptions API > FilterError","text":"FilterError\n\nRaised when query filtering fails."},{"objectID":"Home","href":"api/exceptions.html#lookuperror","title":"Exceptions API > LookupError","text":"LookupError\n\nRaised when field lookup operations fail."},{"objectID":"Home","href":"api/exceptions.html#aggregationerror","title":"Exceptions API > AggregationError","text":"AggregationError\n\nRaised when aggregation operations fail."},{"objectID":"Home","href":"api/exceptions.html#relationerror","title":"Exceptions API > RelationError","text":"RelationError\n\nRaised when relationship operations fail."},{"objectID":"Home","href":"api/exceptions.html#schema-exceptions","title":"Exceptions API > Schema Exceptions","text":"Schema Exceptions\n\nSchema-related exceptions."},{"objectID":"Home","href":"api/exceptions.html#schemaerror","title":"Exceptions API > SchemaError","text":"SchemaError\n\nBase class for schema-related exceptions."},{"objectID":"Home","href":"api/exceptions.html#migrationerror","title":"Exceptions API > MigrationError","text":"MigrationError\n\nRaised when schema migrations fail."},{"objectID":"Home","href":"api/exceptions.html#indexerror","title":"Exceptions API > IndexError","text":"IndexError\n\nRaised when index operations fail."},{"objectID":"Home","href":"api/exceptions.html#security-exceptions","title":"Exceptions API > Security Exceptions","text":"Security Exceptions\n\nSecurity-related exceptions."},{"objectID":"Home","href":"api/exceptions.html#securityerror","title":"Exceptions API > SecurityError","text":"SecurityError\n\nBase class for security-related exceptions."},{"objectID":"Home","href":"api/exceptions.html#permissionerror","title":"Exceptions API > PermissionError","text":"PermissionError\n\nRaised when permission checks fail."},{"objectID":"Home","href":"api/exceptions.html#authenticationerror","title":"Exceptions API > AuthenticationError","text":"AuthenticationError\n\nRaised when authentication fails."},{"objectID":"Home","href":"api/exceptions.html#performance-exceptions","title":"Exceptions API > Performance Exceptions","text":"Performance Exceptions\n\nPerformance and optimization exceptions."},{"objectID":"Home","href":"api/exceptions.html#performanceerror","title":"Exceptions API > PerformanceError","text":"PerformanceError\n\nBase class for performance-related exceptions."},{"objectID":"Home","href":"api/exceptions.html#timeouterror","title":"Exceptions API > TimeoutError","text":"TimeoutError\n\nRaised when operations timeout."},{"objectID":"Home","href":"api/exceptions.html#resourceerror","title":"Exceptions API > ResourceError","text":"ResourceError\n\nRaised when resource limits are exceeded."},{"objectID":"Home","href":"api/exceptions.html#serialization-exceptions","title":"Exceptions API > Serialization Exceptions","text":"Serialization Exceptions\n\nData serialization and deserialization exceptions."},{"objectID":"Home","href":"api/exceptions.html#serializationerror","title":"Exceptions API > SerializationError","text":"SerializationError\n\nBase class for serialization exceptions."},{"objectID":"Home","href":"api/exceptions.html#deserializationerror","title":"Exceptions API > DeserializationError","text":"DeserializationError\n\nRaised when data deserialization fails."},{"objectID":"Home","href":"api/exceptions.html#encodingerror","title":"Exceptions API > EncodingError","text":"EncodingError\n\nRaised when data encoding/decoding fails."},{"objectID":"Home","href":"api/exceptions.html#exception-utilities","title":"Exceptions API > Exception Utilities","text":"Exception Utilities\n\nUtility functions for exception handling."},{"objectID":"Home","href":"api/exceptions.html#exception-helpers","title":"Exceptions API > Exception Helpers","text":"Exception Helpers\n\nHelper functions for working with exceptions."},{"objectID":"Home","href":"api/exceptions.html#exception-decorators","title":"Exceptions API > Exception Decorators","text":"Exception Decorators\n\nDecorators for exception handling."},{"objectID":"Home","href":"api/exceptions.html#custom-exception-base-classes","title":"Exceptions API > Custom Exception Base Classes","text":"Custom Exception Base Classes\n\nBase classes for creating custom exceptions."},{"objectID":"Home","href":"api/exceptions.html#applicationerror","title":"Exceptions API > ApplicationError","text":"ApplicationError\n\nBase class for application-specific exceptions."},{"objectID":"Home","href":"api/exceptions.html#businesslogicerror","title":"Exceptions API > BusinessLogicError","text":"BusinessLogicError\n\nBase class for business logic exceptions."},{"objectID":"Home","href":"api/exceptions.html#exception-context-management","title":"Exceptions API > Exception Context Management","text":"Exception Context Management\n\nContext managers for exception handling."},{"objectID":"Home","href":"api/exceptions.html#exceptioncontext","title":"Exceptions API > ExceptionContext","text":"ExceptionContext\n\nContext manager for exception handling and logging."},{"objectID":"Home","href":"api/exceptions.html#errorboundary","title":"Exceptions API > ErrorBoundary","text":"ErrorBoundary\n\nError boundary for isolating exceptions."},{"objectID":"Home","href":"api/exceptions.html#exception-reporting","title":"Exceptions API > Exception Reporting","text":"Exception Reporting\n\nException reporting and monitoring utilities."},{"objectID":"Home","href":"api/exceptions.html#exceptionreporter","title":"Exceptions API > ExceptionReporter","text":"ExceptionReporter\n\nReport exceptions to external services."},{"objectID":"Home","href":"api/exceptions.html#exceptionmetrics","title":"Exceptions API > ExceptionMetrics","text":"ExceptionMetrics\n\nCollect metrics about exceptions."},{"objectID":"Home","href":"api/exceptions.html#see-also","title":"Exceptions API > See Also","text":"See Also\n\n/exceptions/index - Comprehensive exceptions guide\n\n/fields/index - Field validation and exceptions\n\n/query/index - Query exceptions and error handling\n\n/backends/index - Backend-specific exception handling"},{"objectID":"Home","href":"backends/index.html#backends","title":"Backends","text":"Backends\n\nQuantumEngine provides a unified interface to multiple database backends, allowing you to switch between different storage systems while maintaining consistent API semantics.\n\nTable of Contents\n\nOverview\n\nBackend Selection\n\nDocument-Level Backend\n\nGlobal Backend Configuration\n\nSurrealDB Backend\n\nFeatures\n\nConfiguration\n\nData Types\n\nExample Usage\n\nClickHouse Backend\n\nFeatures\n\nConfiguration\n\nData Types\n\nSpecialized Fields\n\nExample Usage\n\nBackend Comparison\n\nMulti-Backend Applications\n\nConnection Management\n\nMigration and Data Transfer\n\nPerformance Considerations\n\nSurrealDB Best Practices\n\nClickHouse Best Practices\n\nSee Also"},{"objectID":"Home","href":"backends/index.html#overview","title":"Backends > Overview","text":"Overview\n\nQuantumEngine supports multiple database backends through a pluggable architecture:\n\nSurrealDB: A multi-model database optimized for real-time applications\n\nClickHouse: A column-oriented database for analytics and OLAP workloads\n\nEach backend provides specific optimizations while maintaining API compatibility through the Document ORM layer."},{"objectID":"Home","href":"backends/index.html#backend-selection","title":"Backends > Backend Selection","text":"Backend Selection\n\nBackends can be specified at the document level or globally:"},{"objectID":"Home","href":"backends/index.html#document-level-backend","title":"Backends > Document-Level Backend","text":"Document-Level Backend"},{"objectID":"Home","href":"backends/index.html#global-backend-configuration","title":"Backends > Global Backend Configuration","text":"Global Backend Configuration"},{"objectID":"Home","href":"backends/index.html#surrealdb-backend","title":"Backends > SurrealDB Backend","text":"SurrealDB Backend\n\nSurrealDB is a multi-model database that supports:\n\nDocument storage with flexible schemas\n\nGraph relationships between documents\n\nReal-time subscriptions for live data\n\nAdvanced querying with SurrealQL"},{"objectID":"Home","href":"backends/index.html#features","title":"Backends > Features","text":"Features\n\nSchema flexibility: Dynamic document structures\n\nRelations: First-class support for document relationships\n\nReal-time: Live queries and subscriptions\n\nMulti-model: Document, graph, and key-value data models\n\nACID transactions: Full transactional support"},{"objectID":"Home","href":"backends/index.html#configuration","title":"Backends > Configuration","text":"Configuration"},{"objectID":"Home","href":"backends/index.html#data-types","title":"Backends > Data Types","text":"Data Types\n\nSurrealDB supports rich data types:\n\nBasic types: String, number, boolean, datetime\n\nComplex types: Arrays, objects, geometries\n\nRelations: Links between documents\n\nRecord IDs: Strongly-typed identifiers"},{"objectID":"Home","href":"backends/index.html#example-usage","title":"Backends > Example Usage","text":"Example Usage"},{"objectID":"Home","href":"backends/index.html#clickhouse-backend","title":"Backends > ClickHouse Backend","text":"ClickHouse Backend\n\nClickHouse is optimized for analytical workloads and provides:\n\nColumn-oriented storage for fast analytical queries\n\nCompression for efficient storage\n\nMaterialized views for pre-computed aggregations\n\nDistributed processing for large datasets"},{"objectID":"Home","href":"backends/index.html#features","title":"Backends > Features","text":"Features\n\nHigh performance: Optimized for analytical queries\n\nCompression: Efficient storage with various compression algorithms\n\nScalability: Horizontal scaling capabilities\n\nSQL compatibility: Familiar SQL syntax with extensions\n\nMaterialized views: Pre-computed aggregations"},{"objectID":"Home","href":"backends/index.html#configuration","title":"Backends > Configuration","text":"Configuration"},{"objectID":"Home","href":"backends/index.html#data-types","title":"Backends > Data Types","text":"Data Types\n\nClickHouse provides specialized data types:\n\nNumeric: Int8/16/32/64, UInt8/16/32/64, Float32/64, Decimal\n\nString: String, FixedString, LowCardinality(String)\n\nDateTime: DateTime, DateTime64, Date\n\nArrays: Array(T) for any type T\n\nNullable: Nullable(T) for optional values"},{"objectID":"Home","href":"backends/index.html#specialized-fields","title":"Backends > Specialized Fields","text":"Specialized Fields\n\nClickHouse backend includes optimized field types:"},{"objectID":"Home","href":"backends/index.html#example-usage","title":"Backends > Example Usage","text":"Example Usage"},{"objectID":"Home","href":"backends/index.html#backend-comparison","title":"Backends > Backend Comparison","text":"Backend Comparison\n\n\n\n\n\n\n\nFeature\n\nSurrealDB\n\nClickHouse\n\nUse Case\n\nReal-time applications, flexible schemas\n\nAnalytics, time-series data, reporting\n\nData Model\n\nDocument, Graph, Key-Value\n\nColumnar, Relational\n\nRelationships\n\nNative graph relations\n\nForeign keys, JOINs\n\nReal-time\n\nLive queries, subscriptions\n\nLimited real-time capabilities\n\nScalability\n\nHorizontal scaling\n\nExcellent for read-heavy workloads\n\nSchema\n\nFlexible, schemaless\n\nFixed schema, strongly typed\n\nTransactions\n\nACID transactions\n\nLimited transaction support\n\nQuery Language\n\nSurrealQL\n\nSQL with extensions"},{"objectID":"Home","href":"backends/index.html#multi-backend-applications","title":"Backends > Multi-Backend Applications","text":"Multi-Backend Applications\n\nYou can use multiple backends in the same application:"},{"objectID":"Home","href":"backends/index.html#connection-management","title":"Backends > Connection Management","text":"Connection Management\n\nQuantumEngine handles connection pooling and management automatically:"},{"objectID":"Home","href":"backends/index.html#migration-and-data-transfer","title":"Backends > Migration and Data Transfer","text":"Migration and Data Transfer\n\nMoving data between backends:"},{"objectID":"Home","href":"backends/index.html#performance-considerations","title":"Backends > Performance Considerations","text":"Performance Considerations"},{"objectID":"Home","href":"backends/index.html#surrealdb-best-practices","title":"Backends > SurrealDB Best Practices","text":"SurrealDB Best Practices\n\nUse indexes for frequently queried fields\n\nLeverage graph relationships for complex queries\n\nUse live queries for real-time features\n\nBatch operations when possible"},{"objectID":"Home","href":"backends/index.html#clickhouse-best-practices","title":"Backends > ClickHouse Best Practices","text":"ClickHouse Best Practices\n\nUse appropriate data types (LowCardinality for repeated values)\n\nPartition large tables by date/time\n\nUse materialized views for common aggregations\n\nBatch inserts for better performance\n\nAvoid frequent updates/deletes"},{"objectID":"Home","href":"backends/index.html#see-also","title":"Backends > See Also","text":"See Also\n\n/api/backends - Complete backends API reference\n\n/fields/index - Field types and backend-specific fields\n\n/query/index - Query system documentation\n\n/tutorial - Getting started with backends"},{"objectID":"Home","href":"api/query.html#query-system-api","title":"Query System API","text":"Query System API\n\nThis section provides the complete API reference for QuantumEngine’s query system.\n\nTable of Contents\n\nBase Query Classes\n\nQuerySet\n\nManager\n\nQuery Operations\n\nFiltering\n\nOrdering\n\nLimiting\n\nQuery Expressions\n\nQ Objects\n\nField References\n\nConditional Expressions\n\nLookup Operations\n\nAggregation\n\nAggregate Functions\n\nGrouping Operations\n\nRelationship Queries\n\nRelated Object Selection\n\nReverse Relationships\n\nGraph Traversal\n\nBackend-Specific Query Features\n\nSurrealDB Queries\n\nClickHouse Queries\n\nRaw Queries\n\nQuery Compilation\n\nQuery Compiler\n\nBackend Compilers\n\nQuery Optimization\n\nQuery Analyzer\n\nPerformance Monitoring\n\nTransaction Support\n\nTransaction Context\n\nSearch Operations\n\nText Search\n\nVector Search\n\nBulk Operations\n\nBulk Creation\n\nBulk Updates\n\nBulk Deletion\n\nQuery Utilities\n\nQuery Helpers\n\nField Validation\n\nSee Also"},{"objectID":"Home","href":"api/query.html#base-query-classes","title":"Query System API > Base Query Classes","text":"Base Query Classes\n\n\n\n\n\nclass quantumengine.query.base.QuerySet(document_class, connection=None)\n\nBases: BaseQuerySet, Generic[T]\n\nQuery builder for SurrealDB with generic type safety.\n\nThis class provides a query builder for document classes with a predefined schema.\nIt extends BaseQuerySet to provide methods for querying and manipulating\ndocuments of a specific document class.\n\nType Parameters:\n\nT: The document class type that this QuerySet operates on\n\n\n\n\n\ndocument_class\n\nThe document class to query\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\n__init__(document_class, connection=None)\n\nInitialize a new QuerySet.\n\nParameters\n\ndocument_class (Type[T]) – The document class to query\n\nconnection (Any) – The database connection to use for queries (optional, will use document’s backend if None)\n\n\n\nasync join(field_name, target_fields=None, dereference=True, dereference_depth=1)\n\nPerform a JOIN-like operation on a reference field using FETCH.\n\nThis method performs a JOIN-like operation on a reference field by using\nSurrealDB’s FETCH clause to efficiently resolve references in a single query.\n\nParameters\n\nfield_name (str) – The name of the reference field to join on\n\ntarget_fields (List[str] | None) – Optional list of fields to select from the target document\n\ndereference (bool) – Whether to dereference references in the joined documents (default: True)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nList of documents with joined data\n\nRaises\n\nValueError – If the field is not a ReferenceField\n\nReturn type\n\nList[Any]\n\n\n\njoin_sync(field_name, target_fields=None, dereference=True, dereference_depth=1)\n\nPerform a JOIN-like operation on a reference field synchronously using FETCH.\n\nThis method performs a JOIN-like operation on a reference field by using\nSurrealDB’s FETCH clause to efficiently resolve references in a single query.\n\nParameters\n\nfield_name (str) – The name of the reference field to join on\n\ntarget_fields (List[str] | None) – Optional list of fields to select from the target document\n\ndereference (bool) – Whether to dereference references in the joined documents (default: True)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nList of documents with joined data\n\nRaises\n\nValueError – If the field is not a ReferenceField\n\nReturn type\n\nList[Any]\n\n\n\nasync all(dereference=False)\n\nExecute the query and return all results asynchronously.\n\nThis method builds and executes the query, then converts the results\nto instances of the document class. Includes automatic retry on transient failures.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\nReturns\n\nList of document instances\n\nReturn type\n\nList[T]\n\n\n\nall_sync(dereference=False)\n\nExecute the query and return all results synchronously.\n\nThis method builds and executes the query, then converts the results\nto instances of the document class. Includes automatic retry on transient failures.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\nReturns\n\nList of document instances\n\nReturn type\n\nList[T]\n\n\n\nasync count()\n\nCount documents matching the query asynchronously.\n\nThis method builds and executes a count query to count the number\nof documents matching the query. Includes automatic retry on transient failures.\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\ncount_sync()\n\nCount documents matching the query synchronously.\n\nThis method builds and executes a count query to count the number\nof documents matching the query. Includes automatic retry on transient failures.\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\nasync get(dereference=False, **kwargs)\n\nGet a single document matching the query asynchronously.\n\nThis method applies filters and ensures that exactly one document is returned.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nThe matching document\n\nRaises\n\nDoesNotExist – If no matching document is found\n\nMultipleObjectsReturned – If multiple matching documents are found\n\nReturn type\n\nT\n\n\n\nget_sync(dereference=False, **kwargs)\n\nGet a single document matching the query synchronously.\n\nThis method applies filters and ensures that exactly one document is returned.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nThe matching document\n\nRaises\n\nDoesNotExist – If no matching document is found\n\nMultipleObjectsReturned – If multiple matching documents are found\n\nReturn type\n\nT\n\n\n\nasync create(**kwargs)\n\nCreate a new document asynchronously.\n\nThis method creates a new document with the given field values.\nIncludes automatic retry on transient failures.\n\nParameters\n\n**kwargs (Any) – Field names and values for the new document\n\nReturns\n\nThe created document\n\nReturn type\n\nT\n\n\n\ncreate_sync(**kwargs)\n\nCreate a new document synchronously.\n\nThis method creates a new document with the given field values.\nIncludes automatic retry on transient failures.\n\nParameters\n\n**kwargs (Any) – Field names and values for the new document\n\nReturns\n\nThe created document\n\nReturn type\n\nT\n\n\n\nasync update(**kwargs)\n\nUpdate documents matching the query asynchronously with performance optimizations.\n\nThis method updates documents matching the query with the given field values.\nUses direct record access for bulk ID operations for better performance.\n\nParameters\n\n**kwargs (Any) – Field names and values to update\n\nReturns\n\nList of updated documents\n\nReturn type\n\nList[T]\n\n\n\nupdate_sync(**kwargs)\n\nUpdate documents matching the query synchronously with performance optimizations.\n\nThis method updates documents matching the query with the given field values.\nUses direct record access for bulk ID operations for better performance.\n\nParameters\n\n**kwargs (Any) – Field names and values to update\n\nReturns\n\nList of updated documents\n\nReturn type\n\nList[T]\n\n\n\nasync delete()\n\nDelete documents matching the query asynchronously with performance optimizations.\n\nThis method deletes documents matching the query.\nUses direct record access for bulk ID operations for better performance.\n\nReturns\n\nNumber of deleted documents\n\nReturn type\n\nint\n\n\n\ndelete_sync()\n\nDelete documents matching the query synchronously with performance optimizations.\n\nThis method deletes documents matching the query.\nUses direct record access for bulk ID operations for better performance.\n\nReturns\n\nNumber of deleted documents\n\nReturn type\n\nint\n\n\n\nasync bulk_create(documents, batch_size=1000, validate=True, return_documents=True)\n\nCreate multiple documents in a single operation asynchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally validate the\ndocuments and return the created documents.\n\nParameters\n\ndocuments (List[T]) – List of Document instances to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nvalidate (bool) – Whether to validate documents (default: True)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[T] | int\n\n\n\nbulk_create_sync(documents, batch_size=1000, validate=True, return_documents=True)\n\nCreate multiple documents in a single operation synchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally validate the\ndocuments and return the created documents.\n\nParameters\n\ndocuments (List[T]) – List of Document instances to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nvalidate (bool) – Whether to validate documents (default: True)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[T] | int\n\n\n\nasync explain()\n\nGet query execution plan for performance analysis.\n\nThis method appends EXPLAIN to the query to show how the database\nwill execute it, helping identify performance bottlenecks.\n\nReturns\n\nList of execution plan steps with details\n\nReturn type\n\nList[Dict[str, Any]]\n\nExample\n\nplan = await User.objects.filter(age__lt=18).explain()\nprint(f”Query will use: {plan[0][‘operation’]}”)\n\nRaises\n\nNotImplementedError – If backend doesn’t support EXPLAIN queries\n\n\n\nexplain_sync()\n\nGet query execution plan for performance analysis synchronously.\n\nReturns\n\nList of execution plan steps with details\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nsuggest_indexes()\n\nSuggest indexes based on current query patterns.\n\nAnalyzes the current query conditions and suggests optimal\nindexes that could improve performance.\n\nReturns\n\nList of suggested DEFINE INDEX statements\n\nReturn type\n\nList[str]\n\nExample\n\n>>> suggestions = User.objects.filter(age__lt=18, city=\"NYC\").suggest_indexes()\n>>> for suggestion in suggestions:\n...     print(f\"Consider: {suggestion}\")"},{"objectID":"Home","href":"api/query.html#queryset","title":"Query System API > QuerySet","text":"QuerySet\n\nThe main query interface for database operations.\n\n\n\nclass quantumengine.query.base.QuerySet(document_class, connection=None)\n\nBases: BaseQuerySet, Generic[T]\n\nQuery builder for SurrealDB with generic type safety.\n\nThis class provides a query builder for document classes with a predefined schema.\nIt extends BaseQuerySet to provide methods for querying and manipulating\ndocuments of a specific document class.\n\nType Parameters:\n\nT: The document class type that this QuerySet operates on\n\n\n\n\n\ndocument_class\n\nThe document class to query\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\n__init__(document_class, connection=None)\n\nInitialize a new QuerySet.\n\nParameters\n\ndocument_class (Type[T]) – The document class to query\n\nconnection (Any) – The database connection to use for queries (optional, will use document’s backend if None)\n\n\n\nasync join(field_name, target_fields=None, dereference=True, dereference_depth=1)\n\nPerform a JOIN-like operation on a reference field using FETCH.\n\nThis method performs a JOIN-like operation on a reference field by using\nSurrealDB’s FETCH clause to efficiently resolve references in a single query.\n\nParameters\n\nfield_name (str) – The name of the reference field to join on\n\ntarget_fields (List[str] | None) – Optional list of fields to select from the target document\n\ndereference (bool) – Whether to dereference references in the joined documents (default: True)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nList of documents with joined data\n\nRaises\n\nValueError – If the field is not a ReferenceField\n\nReturn type\n\nList[Any]\n\n\n\njoin_sync(field_name, target_fields=None, dereference=True, dereference_depth=1)\n\nPerform a JOIN-like operation on a reference field synchronously using FETCH.\n\nThis method performs a JOIN-like operation on a reference field by using\nSurrealDB’s FETCH clause to efficiently resolve references in a single query.\n\nParameters\n\nfield_name (str) – The name of the reference field to join on\n\ntarget_fields (List[str] | None) – Optional list of fields to select from the target document\n\ndereference (bool) – Whether to dereference references in the joined documents (default: True)\n\ndereference_depth (int) – Maximum depth of reference resolution (default: 1)\n\nReturns\n\nList of documents with joined data\n\nRaises\n\nValueError – If the field is not a ReferenceField\n\nReturn type\n\nList[Any]\n\n\n\nasync all(dereference=False)\n\nExecute the query and return all results asynchronously.\n\nThis method builds and executes the query, then converts the results\nto instances of the document class. Includes automatic retry on transient failures.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\nReturns\n\nList of document instances\n\nReturn type\n\nList[T]\n\n\n\nall_sync(dereference=False)\n\nExecute the query and return all results synchronously.\n\nThis method builds and executes the query, then converts the results\nto instances of the document class. Includes automatic retry on transient failures.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\nReturns\n\nList of document instances\n\nReturn type\n\nList[T]\n\n\n\nasync count()\n\nCount documents matching the query asynchronously.\n\nThis method builds and executes a count query to count the number\nof documents matching the query. Includes automatic retry on transient failures.\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\ncount_sync()\n\nCount documents matching the query synchronously.\n\nThis method builds and executes a count query to count the number\nof documents matching the query. Includes automatic retry on transient failures.\n\nReturns\n\nNumber of matching documents\n\nReturn type\n\nint\n\n\n\nasync get(dereference=False, **kwargs)\n\nGet a single document matching the query asynchronously.\n\nThis method applies filters and ensures that exactly one document is returned.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nThe matching document\n\nRaises\n\nDoesNotExist – If no matching document is found\n\nMultipleObjectsReturned – If multiple matching documents are found\n\nReturn type\n\nT\n\n\n\nget_sync(dereference=False, **kwargs)\n\nGet a single document matching the query synchronously.\n\nThis method applies filters and ensures that exactly one document is returned.\n\nParameters\n\ndereference (bool) – Whether to dereference references (default: False)\n\n**kwargs (Any) – Field names and values to filter by\n\nReturns\n\nThe matching document\n\nRaises\n\nDoesNotExist – If no matching document is found\n\nMultipleObjectsReturned – If multiple matching documents are found\n\nReturn type\n\nT\n\n\n\nasync create(**kwargs)\n\nCreate a new document asynchronously.\n\nThis method creates a new document with the given field values.\nIncludes automatic retry on transient failures.\n\nParameters\n\n**kwargs (Any) – Field names and values for the new document\n\nReturns\n\nThe created document\n\nReturn type\n\nT\n\n\n\ncreate_sync(**kwargs)\n\nCreate a new document synchronously.\n\nThis method creates a new document with the given field values.\nIncludes automatic retry on transient failures.\n\nParameters\n\n**kwargs (Any) – Field names and values for the new document\n\nReturns\n\nThe created document\n\nReturn type\n\nT\n\n\n\nasync update(**kwargs)\n\nUpdate documents matching the query asynchronously with performance optimizations.\n\nThis method updates documents matching the query with the given field values.\nUses direct record access for bulk ID operations for better performance.\n\nParameters\n\n**kwargs (Any) – Field names and values to update\n\nReturns\n\nList of updated documents\n\nReturn type\n\nList[T]\n\n\n\nupdate_sync(**kwargs)\n\nUpdate documents matching the query synchronously with performance optimizations.\n\nThis method updates documents matching the query with the given field values.\nUses direct record access for bulk ID operations for better performance.\n\nParameters\n\n**kwargs (Any) – Field names and values to update\n\nReturns\n\nList of updated documents\n\nReturn type\n\nList[T]\n\n\n\nasync delete()\n\nDelete documents matching the query asynchronously with performance optimizations.\n\nThis method deletes documents matching the query.\nUses direct record access for bulk ID operations for better performance.\n\nReturns\n\nNumber of deleted documents\n\nReturn type\n\nint\n\n\n\ndelete_sync()\n\nDelete documents matching the query synchronously with performance optimizations.\n\nThis method deletes documents matching the query.\nUses direct record access for bulk ID operations for better performance.\n\nReturns\n\nNumber of deleted documents\n\nReturn type\n\nint\n\n\n\nasync bulk_create(documents, batch_size=1000, validate=True, return_documents=True)\n\nCreate multiple documents in a single operation asynchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally validate the\ndocuments and return the created documents.\n\nParameters\n\ndocuments (List[T]) – List of Document instances to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nvalidate (bool) – Whether to validate documents (default: True)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[T] | int\n\n\n\nbulk_create_sync(documents, batch_size=1000, validate=True, return_documents=True)\n\nCreate multiple documents in a single operation synchronously.\n\nThis method creates multiple documents in a single operation, processing\nthem in batches for better performance. It can optionally validate the\ndocuments and return the created documents.\n\nParameters\n\ndocuments (List[T]) – List of Document instances to create\n\nbatch_size (int) – Number of documents per batch (default: 1000)\n\nvalidate (bool) – Whether to validate documents (default: True)\n\nreturn_documents (bool) – Whether to return created documents (default: True)\n\nReturns\n\nList of created documents with their IDs set if return_documents=True,\notherwise returns the count of created documents\n\nReturn type\n\nList[T] | int\n\n\n\nasync explain()\n\nGet query execution plan for performance analysis.\n\nThis method appends EXPLAIN to the query to show how the database\nwill execute it, helping identify performance bottlenecks.\n\nReturns\n\nList of execution plan steps with details\n\nReturn type\n\nList[Dict[str, Any]]\n\nExample\n\nplan = await User.objects.filter(age__lt=18).explain()\nprint(f”Query will use: {plan[0][‘operation’]}”)\n\nRaises\n\nNotImplementedError – If backend doesn’t support EXPLAIN queries\n\n\n\nexplain_sync()\n\nGet query execution plan for performance analysis synchronously.\n\nReturns\n\nList of execution plan steps with details\n\nReturn type\n\nList[Dict[str, Any]]\n\n\n\nsuggest_indexes()\n\nSuggest indexes based on current query patterns.\n\nAnalyzes the current query conditions and suggests optimal\nindexes that could improve performance.\n\nReturns\n\nList of suggested DEFINE INDEX statements\n\nReturn type\n\nList[str]\n\nExample\n\n>>> suggestions = User.objects.filter(age__lt=18, city=\"NYC\").suggest_indexes()\n>>> for suggestion in suggestions:\n...     print(f\"Consider: {suggestion}\")"},{"objectID":"Home","href":"api/query.html#manager","title":"Query System API > Manager","text":"Manager\n\nDocument manager providing query interface."},{"objectID":"Home","href":"api/query.html#query-operations","title":"Query System API > Query Operations","text":"Query Operations"},{"objectID":"Home","href":"api/query.html#filtering","title":"Query System API > Filtering","text":"Filtering\n\nQuery filtering and lookup operations."},{"objectID":"Home","href":"api/query.html#ordering","title":"Query System API > Ordering","text":"Ordering\n\nQuery ordering and sorting operations."},{"objectID":"Home","href":"api/query.html#limiting","title":"Query System API > Limiting","text":"Limiting\n\nQuery limiting and pagination operations."},{"objectID":"Home","href":"api/query.html#query-expressions","title":"Query System API > Query Expressions","text":"Query Expressions\n\n\n\nQuery expression system for QuantumEngine\n\nThis module provides a query expression system that allows building complex\nqueries programmatically and passing them to objects() and filter() methods.\n\n\n\nclass quantumengine.query_expressions.Q(**kwargs)\n\nBases: object\n\nQuery expression builder for complex queries.\n\nThis class allows building complex query expressions that can be used\nwith filter() and objects() methods.\n\nExample\n\n# Complex AND/OR queries\nquery = Q(age__gt=18) & Q(active=True)\nusers = User.objects.filter(query)\n\n# Complex queries with objects()\nquery = Q(department=”engineering”) | Q(department=”sales”)\nusers = User.objects(query)\n\n\n\n__init__(**kwargs)\n\nInitialize a query expression.\n\nParameters\n\n**kwargs – Field filters to include in the query\n\n\n\n__and__(other)\n\nCombine with another Q object using AND.\n\n\n\n\n\n__or__(other)\n\nCombine with another Q object using OR.\n\n\n\n\n\n__invert__()\n\nNegate this query using NOT.\n\n\n\n\n\nclassmethod raw(query_string)\n\nCreate a raw query expression.\n\nParameters\n\nquery_string (str) – Raw SurrealQL WHERE clause\n\nReturns\n\nQ object with raw query\n\nReturn type\n\nQ\n\n\n\nto_conditions()\n\nConvert this Q object to a list of conditions.\n\nReturns\n\nList of (field, operator, value) tuples\n\nReturn type\n\nList[tuple]\n\n\n\nto_where_clause()\n\nConvert this Q object to a WHERE clause string.\n\nReturns\n\nWHERE clause string for SurrealQL\n\nReturn type\n\nstr\n\n\n\nclass quantumengine.query_expressions.QueryExpression(where=None)\n\nBases: object\n\nHigher-level query expression that can include fetch, grouping, etc.\n\nThis class provides a more comprehensive query building interface\nthat includes not just WHERE conditions but also FETCH, GROUP BY, etc.\n\n\n\n\n\n__init__(where=None)\n\nInitialize a query expression.\n\nParameters\n\nwhere (Q | None) – Q object for WHERE clause conditions\n\n\n\nfetch(*fields)\n\nAdd FETCH clause to resolve references.\n\nParameters\n\n*fields (str) – Field names to fetch\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\ngroup_by(*fields)\n\nAdd GROUP BY clause.\n\nParameters\n\n*fields (str) – Field names to group by\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\norder_by(field, direction='ASC')\n\nAdd ORDER BY clause.\n\nParameters\n\nfield (str) – Field name to order by\n\ndirection (str) – ‘ASC’ or ‘DESC’\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\nlimit(value)\n\nAdd LIMIT clause.\n\nParameters\n\nvalue (int) – Maximum number of results\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\nstart(value)\n\nAdd START clause for pagination.\n\nParameters\n\nvalue (int) – Number of results to skip\n\nReturns\n\nSelf for method chaining\n\nReturn type\n\nQueryExpression\n\n\n\napply_to_queryset(queryset)\n\nApply this expression to a queryset.\n\nParameters\n\nqueryset – BaseQuerySet to apply expression to\n\nReturns\n\nModified queryset"},{"objectID":"Home","href":"api/query.html#q-objects","title":"Query System API > Q Objects","text":"Q Objects\n\nComplex query construction with Q objects.\n\n\n\nclass quantumengine.query_expressions.Q(**kwargs)\n\nBases: object\n\nQuery expression builder for complex queries.\n\nThis class allows building complex query expressions that can be used\nwith filter() and objects() methods.\n\nExample\n\n# Complex AND/OR queries\nquery = Q(age__gt=18) & Q(active=True)\nusers = User.objects.filter(query)\n\n# Complex queries with objects()\nquery = Q(department=”engineering”) | Q(department=”sales”)\nusers = User.objects(query)\n\n\n\n__init__(**kwargs)\n\nInitialize a query expression.\n\nParameters\n\n**kwargs – Field filters to include in the query\n\n\n\n__and__(other)\n\nCombine with another Q object using AND.\n\n\n\n\n\n__or__(other)\n\nCombine with another Q object using OR.\n\n\n\n\n\n__invert__()\n\nNegate this query using NOT.\n\n\n\n\n\nclassmethod raw(query_string)\n\nCreate a raw query expression.\n\nParameters\n\nquery_string (str) – Raw SurrealQL WHERE clause\n\nReturns\n\nQ object with raw query\n\nReturn type\n\nQ\n\n\n\nto_conditions()\n\nConvert this Q object to a list of conditions.\n\nReturns\n\nList of (field, operator, value) tuples\n\nReturn type\n\nList[tuple]\n\n\n\nto_where_clause()\n\nConvert this Q object to a WHERE clause string.\n\nReturns\n\nWHERE clause string for SurrealQL\n\nReturn type\n\nstr"},{"objectID":"Home","href":"api/query.html#field-references","title":"Query System API > Field References","text":"Field References\n\nReference fields in queries and expressions."},{"objectID":"Home","href":"api/query.html#conditional-expressions","title":"Query System API > Conditional Expressions","text":"Conditional Expressions\n\nConditional logic in queries."},{"objectID":"Home","href":"api/query.html#lookup-operations","title":"Query System API > Lookup Operations","text":"Lookup Operations\n\nField lookup operations for filtering."},{"objectID":"Home","href":"api/query.html#aggregation","title":"Query System API > Aggregation","text":"Aggregation\n\n\n\nAggregation pipeline for SurrealEngine.\n\nThis module provides support for building and executing aggregation pipelines\nin SurrealEngine. Aggregation pipelines allow for complex data transformations\nand analysis through a series of stages.\n\n\n\nclass quantumengine.aggregation.AggregationPipeline(query_set)\n\nBases: object\n\nPipeline for building and executing aggregation queries.\n\nThis class provides a fluent interface for building complex aggregation\npipelines with multiple stages, similar to MongoDB’s aggregation framework.\n\n\n\n\n\n__init__(query_set)\n\nInitialize a new AggregationPipeline.\n\nParameters\n\nquery_set (QuerySet) – The QuerySet to build the pipeline from\n\n\n\ngroup(by_fields=None, **aggregations)\n\nGroup by fields and apply aggregations.\n\nParameters\n\nby_fields – Field or list of fields to group by\n\n**aggregations – Named aggregation functions to apply\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nproject(**fields)\n\nSelect or compute fields to include in output.\n\nParameters\n\n**fields – Field mappings for projection\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nsort(**fields)\n\nSort results by fields.\n\nParameters\n\n**fields – Field names and sort directions (‘ASC’ or ‘DESC’)\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nlimit(count)\n\nLimit number of results.\n\nParameters\n\ncount – Maximum number of results to return\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nskip(count)\n\nSkip number of results.\n\nParameters\n\ncount – Number of results to skip\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nwith_index(index)\n\nUse the specified index for the query.\n\nParameters\n\nindex – Name of the index to use\n\nReturns\n\nThe pipeline instance for method chaining\n\n\n\nbuild_query()\n\nBuild the SurrealQL query from the pipeline stages.\n\nReturns\n\nThe SurrealQL query string\n\n\n\nasync execute(connection=None)\n\nExecute the pipeline and return results.\n\nParameters\n\nconnection – Optional connection to use\n\nReturns\n\nThe query results\n\n\n\nexecute_sync(connection=None)\n\nExecute the pipeline synchronously.\n\nParameters\n\nconnection – Optional connection to use\n\nReturns\n\nThe query results"},{"objectID":"Home","href":"api/query.html#aggregate-functions","title":"Query System API > Aggregate Functions","text":"Aggregate Functions\n\nStatistical and mathematical aggregate functions."},{"objectID":"Home","href":"api/query.html#grouping-operations","title":"Query System API > Grouping Operations","text":"Grouping Operations\n\nGroup by and annotation operations."},{"objectID":"Home","href":"api/query.html#relationship-queries","title":"Query System API > Relationship Queries","text":"Relationship Queries\n\n\n\n\n\nclass quantumengine.query.relation.RelationQuerySet(from_document, connection, relation=None)\n\nBases: object\n\nQuery set specifically for graph relations.\n\nThis class provides methods for querying and manipulating graph relations\nbetween documents in the database. It allows creating, retrieving, updating,\nand deleting relations between documents.\n\n\n\n\n\nfrom_document\n\nThe document class the relation is from\n\n\n\nconnection\n\nThe database connection to use for queries\n\n\n\nrelation\n\nThe name of the relation\n\n\n\nquery_parts\n\nList of query parts\n\n\n\n__init__(from_document, connection, relation=None)\n\nInitialize a new RelationQuerySet.\n\nParameters\n\nfrom_document (Type) – The document class the relation is from\n\nconnection (Any) – The database connection to use for queries\n\nrelation (str | None) – The name of the relation\n\n\n\nasync relate(from_instance, to_instance, **attrs)\n\nCreate a relation between two instances asynchronously.\n\nThis method creates a relation between two document instances in the database.\nIt constructs a RELATE query with the given relation name and attributes.\n\nParameters\n\nfrom_instance (Any) – The instance to create the relation from\n\nto_instance (Any) – The instance to create the relation to\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nRaises\n\nValueError – If either instance is not saved or if no relation name is specified\n\nReturn type\n\nAny | None\n\n\n\nrelate_sync(from_instance, to_instance, **attrs)\n\nCreate a relation between two instances synchronously.\n\nThis method creates a relation between two document instances in the database.\nIt constructs a RELATE query with the given relation name and attributes.\n\nParameters\n\nfrom_instance (Any) – The instance to create the relation from\n\nto_instance (Any) – The instance to create the relation to\n\n**attrs (Any) – Attributes to set on the relation\n\nReturns\n\nThe created relation record or None if creation failed\n\nRaises\n\nValueError – If either instance is not saved or if no relation name is specified\n\nReturn type\n\nAny | None\n\n\n\nasync get_related(instance, target_document=None, **filters)\n\nGet related documents asynchronously.\n\nThis method retrieves documents related to the given instance through\nthe specified relation. It can return either the target documents or\nthe relation records themselves.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\ntarget_document (Type | None) – The document class of the target documents (optional)\n\n**filters (Any) – Filters to apply to the related documents\n\nReturns\n\nList of related documents or relation records\n\nRaises\n\nValueError – If the instance is not saved or if no relation name is specified\n\nReturn type\n\nList[Any]\n\n\n\nget_related_sync(instance, target_document=None, **filters)\n\nGet related documents synchronously.\n\nThis method retrieves documents related to the given instance through\nthe specified relation. It can return either the target documents or\nthe relation records themselves.\n\nParameters\n\ninstance (Any) – The instance to get related documents for\n\ntarget_document (Type | None) – The document class of the target documents (optional)\n\n**filters (Any) – Filters to apply to the related documents\n\nReturns\n\nList of related documents or relation records\n\nRaises\n\nValueError – If the instance is not saved or if no relation name is specified\n\nReturn type\n\nList[Any]\n\n\n\nasync update_relation(from_instance, to_instance, **attrs)\n\nUpdate an existing relation asynchronously.\n\nThis method updates an existing relation between two document instances\nin the database. If the relation doesn’t exist, it creates it.\n\nParameters\n\nfrom_instance (Any) – The instance the relation is from\n\nto_instance (Any) – The instance the relation is to\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nRaises\n\nValueError – If either instance is not saved or if no relation name is specified\n\nReturn type\n\nAny | None\n\n\n\nupdate_relation_sync(from_instance, to_instance, **attrs)\n\nUpdate an existing relation synchronously.\n\nThis method updates an existing relation between two document instances\nin the database. If the relation doesn’t exist, it creates it.\n\nParameters\n\nfrom_instance (Any) – The instance the relation is from\n\nto_instance (Any) – The instance the relation is to\n\n**attrs (Any) – Attributes to update on the relation\n\nReturns\n\nThe updated relation record or None if update failed\n\nRaises\n\nValueError – If either instance is not saved or if no relation name is specified\n\nReturn type\n\nAny | None\n\n\n\nasync delete_relation(from_instance, to_instance=None)\n\nDelete a relation asynchronously.\n\nThis method deletes a relation between two document instances in the database.\nIf to_instance is not provided, it deletes all relations from from_instance.\n\nParameters\n\nfrom_instance (Any) – The instance the relation is from\n\nto_instance (Any | None) – The instance the relation is to (optional)\n\nReturns\n\nNumber of deleted relations\n\nRaises\n\nValueError – If from_instance is not saved, if to_instance is provided but not saved,\n    or if no relation name is specified\n\nReturn type\n\nint\n\n\n\ndelete_relation_sync(from_instance, to_instance=None)\n\nDelete a relation synchronously.\n\nThis method deletes a relation between two document instances in the database.\nIf to_instance is not provided, it deletes all relations from from_instance.\n\nParameters\n\nfrom_instance (Any) – The instance the relation is from\n\nto_instance (Any | None) – The instance the relation is to (optional)\n\nReturns\n\nNumber of deleted relations\n\nRaises\n\nValueError – If from_instance is not saved, if to_instance is provided but not saved,\n    or if no relation name is specified\n\nReturn type\n\nint"},{"objectID":"Home","href":"api/query.html#related-object-selection","title":"Query System API > Related Object Selection","text":"Related Object Selection\n\nOptimize relationship queries with select_related and prefetch_related."},{"objectID":"Home","href":"api/query.html#reverse-relationships","title":"Query System API > Reverse Relationships","text":"Reverse Relationships\n\nHandle reverse foreign key relationships."},{"objectID":"Home","href":"api/query.html#graph-traversal","title":"Query System API > Graph Traversal","text":"Graph Traversal\n\nSurrealDB-specific graph traversal operations."},{"objectID":"Home","href":"api/query.html#backend-specific-query-features","title":"Query System API > Backend-Specific Query Features","text":"Backend-Specific Query Features"},{"objectID":"Home","href":"api/query.html#surrealdb-queries","title":"Query System API > SurrealDB Queries","text":"SurrealDB Queries\n\nSurrealDB-specific query features and optimizations."},{"objectID":"Home","href":"api/query.html#clickhouse-queries","title":"Query System API > ClickHouse Queries","text":"ClickHouse Queries\n\nClickHouse-specific query features and optimizations."},{"objectID":"Home","href":"api/query.html#raw-queries","title":"Query System API > Raw Queries","text":"Raw Queries\n\nExecute raw database queries when needed."},{"objectID":"Home","href":"api/query.html#query-compilation","title":"Query System API > Query Compilation","text":"Query Compilation\n\nQuery compilation and optimization."},{"objectID":"Home","href":"api/query.html#query-compiler","title":"Query System API > Query Compiler","text":"Query Compiler\n\nBase query compiler for all backends."},{"objectID":"Home","href":"api/query.html#backend-compilers","title":"Query System API > Backend Compilers","text":"Backend Compilers\n\nBackend-specific query compilation."},{"objectID":"Home","href":"api/query.html#query-optimization","title":"Query System API > Query Optimization","text":"Query Optimization\n\nQuery analysis and optimization tools."},{"objectID":"Home","href":"api/query.html#query-analyzer","title":"Query System API > Query Analyzer","text":"Query Analyzer\n\nAnalyze query performance and structure."},{"objectID":"Home","href":"api/query.html#performance-monitoring","title":"Query System API > Performance Monitoring","text":"Performance Monitoring\n\nMonitor query performance and statistics."},{"objectID":"Home","href":"api/query.html#transaction-support","title":"Query System API > Transaction Support","text":"Transaction Support\n\nTransaction management for queries."},{"objectID":"Home","href":"api/query.html#transaction-context","title":"Query System API > Transaction Context","text":"Transaction Context\n\nAtomic transaction operations."},{"objectID":"Home","href":"api/query.html#search-operations","title":"Query System API > Search Operations","text":"Search Operations\n\nFull-text search and indexing."},{"objectID":"Home","href":"api/query.html#text-search","title":"Query System API > Text Search","text":"Text Search\n\nFull-text search capabilities."},{"objectID":"Home","href":"api/query.html#vector-search","title":"Query System API > Vector Search","text":"Vector Search\n\nVector similarity search operations."},{"objectID":"Home","href":"api/query.html#bulk-operations","title":"Query System API > Bulk Operations","text":"Bulk Operations\n\nEfficient bulk database operations."},{"objectID":"Home","href":"api/query.html#bulk-creation","title":"Query System API > Bulk Creation","text":"Bulk Creation\n\nBulk insert operations."},{"objectID":"Home","href":"api/query.html#bulk-updates","title":"Query System API > Bulk Updates","text":"Bulk Updates\n\nBulk update operations."},{"objectID":"Home","href":"api/query.html#bulk-deletion","title":"Query System API > Bulk Deletion","text":"Bulk Deletion\n\nBulk delete operations."},{"objectID":"Home","href":"api/query.html#query-utilities","title":"Query System API > Query Utilities","text":"Query Utilities\n\nUtility functions for query operations."},{"objectID":"Home","href":"api/query.html#query-helpers","title":"Query System API > Query Helpers","text":"Query Helpers\n\nHelper functions for common query operations."},{"objectID":"Home","href":"api/query.html#field-validation","title":"Query System API > Field Validation","text":"Field Validation\n\nQuery field validation utilities."},{"objectID":"Home","href":"api/query.html#see-also","title":"Query System API > See Also","text":"See Also\n\n/query/index - Comprehensive query system guide\n\n/backends/index - Backend-specific query features\n\n/fields/index - Field types and query compatibility\n\n/exceptions/index - Exception handling for queries"},{"objectID":"Home","href":"query/index.html#query-system","title":"Query System","text":"Query System\n\nQuantumEngine provides a powerful and flexible query system that abstracts database operations across different backends while maintaining performance and expressiveness.\n\nTable of Contents\n\nOverview\n\nBasic Queries\n\nDocument Manager\n\nFiltering\n\nField Lookups\n\nComplex Queries\n\nOrdering\n\nLimiting Results\n\nAggregation\n\nRelationship Queries\n\nAdvanced Queries\n\nRaw Queries\n\nSubqueries\n\nFull-Text Search\n\nBackend-Specific Features\n\nSurrealDB Features\n\nClickHouse Features\n\nQuery Optimization\n\nPerformance Tips\n\nQuery Debugging\n\nCustom Query Methods\n\nQuery Expressions\n\nTransactions\n\nError Handling\n\nSee Also"},{"objectID":"Home","href":"query/index.html#overview","title":"Query System > Overview","text":"Overview\n\nThe query system in QuantumEngine provides:\n\nUnified API across different database backends\n\nExpressive query language with method chaining\n\nBackend-specific optimizations for performance\n\nType-safe queries with field validation\n\nRelationship traversal for complex data access\n\nAggregation support for analytical operations"},{"objectID":"Home","href":"query/index.html#basic-queries","title":"Query System > Basic Queries","text":"Basic Queries"},{"objectID":"Home","href":"query/index.html#document-manager","title":"Query System > Document Manager","text":"Document Manager\n\nEach document class provides a manager for database operations:"},{"objectID":"Home","href":"query/index.html#filtering","title":"Query System > Filtering","text":"Filtering"},{"objectID":"Home","href":"query/index.html#field-lookups","title":"Query System > Field Lookups","text":"Field Lookups\n\nQuantumEngine supports Django-style field lookups:"},{"objectID":"Home","href":"query/index.html#complex-queries","title":"Query System > Complex Queries","text":"Complex Queries\n\nCombine multiple conditions:"},{"objectID":"Home","href":"query/index.html#ordering","title":"Query System > Ordering","text":"Ordering\n\nSort query results:"},{"objectID":"Home","href":"query/index.html#limiting-results","title":"Query System > Limiting Results","text":"Limiting Results\n\nControl the number of results:"},{"objectID":"Home","href":"query/index.html#aggregation","title":"Query System > Aggregation","text":"Aggregation\n\nPerform calculations on query results:"},{"objectID":"Home","href":"query/index.html#relationship-queries","title":"Query System > Relationship Queries","text":"Relationship Queries\n\nNavigate relationships between documents:"},{"objectID":"Home","href":"query/index.html#advanced-queries","title":"Query System > Advanced Queries","text":"Advanced Queries"},{"objectID":"Home","href":"query/index.html#raw-queries","title":"Query System > Raw Queries","text":"Raw Queries\n\nExecute backend-specific queries when needed:"},{"objectID":"Home","href":"query/index.html#subqueries","title":"Query System > Subqueries","text":"Subqueries\n\nUse subqueries for complex filtering:"},{"objectID":"Home","href":"query/index.html#full-text-search","title":"Query System > Full-Text Search","text":"Full-Text Search\n\nSearch across text fields:"},{"objectID":"Home","href":"query/index.html#backend-specific-features","title":"Query System > Backend-Specific Features","text":"Backend-Specific Features"},{"objectID":"Home","href":"query/index.html#surrealdb-features","title":"Query System > SurrealDB Features","text":"SurrealDB Features\n\nTake advantage of SurrealDB’s graph capabilities:"},{"objectID":"Home","href":"query/index.html#clickhouse-features","title":"Query System > ClickHouse Features","text":"ClickHouse Features\n\nOptimize for analytical workloads:"},{"objectID":"Home","href":"query/index.html#query-optimization","title":"Query System > Query Optimization","text":"Query Optimization"},{"objectID":"Home","href":"query/index.html#performance-tips","title":"Query System > Performance Tips","text":"Performance Tips\n\nUse indexes on frequently queried fields\n\nSelect only needed fields with values() or only()\n\nPrefetch relationships to avoid N+1 queries\n\nUse bulk operations for multiple inserts/updates\n\nOptimize filtering by putting most selective filters first"},{"objectID":"Home","href":"query/index.html#query-debugging","title":"Query System > Query Debugging","text":"Query Debugging\n\nDebug and analyze query performance:"},{"objectID":"Home","href":"query/index.html#custom-query-methods","title":"Query System > Custom Query Methods","text":"Custom Query Methods\n\nExtend query functionality:"},{"objectID":"Home","href":"query/index.html#query-expressions","title":"Query System > Query Expressions","text":"Query Expressions\n\nUse expressions for complex calculations:"},{"objectID":"Home","href":"query/index.html#transactions","title":"Query System > Transactions","text":"Transactions\n\nEnsure data consistency:"},{"objectID":"Home","href":"query/index.html#error-handling","title":"Query System > Error Handling","text":"Error Handling\n\nHandle query-related errors:"},{"objectID":"Home","href":"query/index.html#see-also","title":"Query System > See Also","text":"See Also\n\n/api/query - Complete query system API reference\n\n/backends/index - Backend-specific query features\n\n/fields/index - Field types and query compatibility\n\n/exceptions/index - Exception handling guide"},{"objectID":"Home","href":"fields/index.html#fields","title":"Fields","text":"Fields\n\nQuantumEngine provides a comprehensive set of field types for defining document schemas.\nThese fields handle validation, serialization, and backend-specific transformations.\n\nTable of Contents\n\nOverview\n\nBasic Usage\n\nField Categories\n\nScalar Fields\n\nDateTime Fields\n\nCollection Fields\n\nReference Fields\n\nSpecialized Fields\n\nClickHouse-Specific Fields\n\nCommon Field Options\n\nValidation\n\nType Validation\n\nCustom Validators\n\nRequired Fields\n\nBackend Considerations\n\nSurrealDB\n\nClickHouse\n\nExamples\n\nBasic Document\n\nWith Validation\n\nClickHouse Analytics\n\nSee Also"},{"objectID":"Home","href":"fields/index.html#overview","title":"Fields > Overview","text":"Overview\n\nFields in QuantumEngine serve multiple purposes:\n\nType validation: Ensure data conforms to expected types\n\nDefault values: Provide sensible defaults for missing data\n\nRequired validation: Enforce mandatory fields\n\nCustom validation: Apply business logic rules\n\nBackend adaptation: Translate between Python types and database-specific formats"},{"objectID":"Home","href":"fields/index.html#basic-usage","title":"Fields > Basic Usage","text":"Basic Usage\n\nFields are typically used as class attributes in document definitions:"},{"objectID":"Home","href":"fields/index.html#field-categories","title":"Fields > Field Categories","text":"Field Categories"},{"objectID":"Home","href":"fields/index.html#scalar-fields","title":"Fields > Scalar Fields","text":"Scalar Fields\n\nBasic data types for simple values:\n\nStringField - Text data\n\nIntField - Integer numbers\n\nFloatField - Floating-point numbers\n\nBooleanField - True/False values\n\nDecimalField - Precise decimal numbers"},{"objectID":"Home","href":"fields/index.html#datetime-fields","title":"Fields > DateTime Fields","text":"DateTime Fields\n\nTemporal data handling:\n\nDateTimeField - Date and time values\n\nTimeSeriesField - Time series data\n\nDurationField - Time duration values"},{"objectID":"Home","href":"fields/index.html#collection-fields","title":"Fields > Collection Fields","text":"Collection Fields\n\nContainer types for multiple values:\n\nListField - Ordered lists\n\nDictField - Key-value mappings\n\nSetField - Unique value collections"},{"objectID":"Home","href":"fields/index.html#reference-fields","title":"Fields > Reference Fields","text":"Reference Fields\n\nRelationships between documents:\n\nReferenceField - Document references\n\nRelationField - Graph-style relations (SurrealDB)"},{"objectID":"Home","href":"fields/index.html#specialized-fields","title":"Fields > Specialized Fields","text":"Specialized Fields\n\nDomain-specific field types:\n\nEmailField - Email addresses\n\nURLField - Web URLs\n\nUUIDField - UUID values\n\nIPAddressField - IP addresses\n\nSlugField - URL-friendly strings\n\nChoiceField - Enumerated choices\n\nRegexField - Regex-validated strings"},{"objectID":"Home","href":"fields/index.html#clickhouse-specific-fields","title":"Fields > ClickHouse-Specific Fields","text":"ClickHouse-Specific Fields\n\nOptimized fields for ClickHouse backend:\n\nLowCardinalityField - Low cardinality optimization\n\nFixedStringField - Fixed-length strings\n\nArrayField - Native array support\n\nCompressedStringField - Compressed text data"},{"objectID":"Home","href":"fields/index.html#common-field-options","title":"Fields > Common Field Options","text":"Common Field Options\n\nAll fields support these common parameters:\n\n\n\n\n\nParameter\n\nDescription\n\nrequired\n\nWhether the field must have a value (default: False)\n\ndefault\n\nDefault value or callable that returns a default\n\ndb_field\n\nOverride the database field name\n\nunique\n\nEnforce uniqueness constraint\n\nchoices\n\nRestrict values to a predefined set\n\nvalidation\n\nCustom validation function or list of functions"},{"objectID":"Home","href":"fields/index.html#validation","title":"Fields > Validation","text":"Validation\n\nFields provide multiple levels of validation:"},{"objectID":"Home","href":"fields/index.html#type-validation","title":"Fields > Type Validation","text":"Type Validation\n\nAutomatic type checking based on field class:"},{"objectID":"Home","href":"fields/index.html#custom-validators","title":"Fields > Custom Validators","text":"Custom Validators\n\nAdd custom validation logic:"},{"objectID":"Home","href":"fields/index.html#required-fields","title":"Fields > Required Fields","text":"Required Fields\n\nEnforce mandatory fields:"},{"objectID":"Home","href":"fields/index.html#backend-considerations","title":"Fields > Backend Considerations","text":"Backend Considerations\n\nDifferent backends may handle fields differently:"},{"objectID":"Home","href":"fields/index.html#surrealdb","title":"Fields > SurrealDB","text":"SurrealDB\n\nSupports all field types including relations\n\nHandles complex nested structures\n\nNative support for geometric data"},{"objectID":"Home","href":"fields/index.html#clickhouse","title":"Fields > ClickHouse","text":"ClickHouse\n\nOptimized for analytical workloads\n\nSpecial fields for compression and low cardinality\n\nNo support for document references"},{"objectID":"Home","href":"fields/index.html#examples","title":"Fields > Examples","text":"Examples"},{"objectID":"Home","href":"fields/index.html#basic-document","title":"Fields > Basic Document","text":"Basic Document"},{"objectID":"Home","href":"fields/index.html#with-validation","title":"Fields > With Validation","text":"With Validation"},{"objectID":"Home","href":"fields/index.html#clickhouse-analytics","title":"Fields > ClickHouse Analytics","text":"ClickHouse Analytics"},{"objectID":"Home","href":"fields/index.html#see-also","title":"Fields > See Also","text":"See Also\n\n/api/fields - Complete API reference\n\n/tutorial - Getting started guide\n\n/backends - Backend-specific features"}]